
qspi_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008000  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080082ac  080082ac  000092ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008310  08008310  00009310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008318  08008318  00009318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800831c  0800831c  0000931c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08008320  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000260  2400006c  0800838c  0000a06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002cc  0800838c  0000a2cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013d9e  00000000  00000000  0000a09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002827  00000000  00000000  0001de38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d68  00000000  00000000  00020660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a3d  00000000  00000000  000213c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031096  00000000  00000000  00021e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013324  00000000  00000000  00052e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013925b  00000000  00000000  000661bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0019f41a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003ca4  00000000  00000000  0019f460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008a  00000000  00000000  001a3104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	2400006c 	.word	0x2400006c
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08008294 	.word	0x08008294

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000070 	.word	0x24000070
 80002e8:	08008294 	.word	0x08008294

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <W25Q128_OCTO_SPI_Init>:
#include "W25Q128.h"
#include "octospi.h"

/* OCTO SPI Initial Function */
HAL_StatusTypeDef W25Q128_OCTO_SPI_Init(OSPI_HandleTypeDef* hospi)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	if (HAL_OSPI_DeInit(hospi) != HAL_OK) {
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f001 ff5f 	bl	80024a8 <HAL_OSPI_DeInit>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <W25Q128_OCTO_SPI_Init+0x18>
	    return HAL_ERROR;
 80005f0:	2301      	movs	r3, #1
 80005f2:	e025      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
	}

	MX_OCTOSPI1_Init();
 80005f4:	f000 fdf8 	bl	80011e8 <MX_OCTOSPI1_Init>

	if (W25Q128_OSPI_ResetChip(hospi) != HAL_OK) {
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 f825 	bl	8000648 <W25Q128_OSPI_ResetChip>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <W25Q128_OCTO_SPI_Init+0x2c>
	    return HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	e01b      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
	}
	if (W25Q128_OSPI_Configuration(hospi) != HAL_OK) {
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 f899 	bl	8000740 <W25Q128_OSPI_Configuration>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <W25Q128_OCTO_SPI_Init+0x3c>
        return HAL_ERROR;
 8000614:	2301      	movs	r3, #1
 8000616:	e013      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
    }
	HAL_Delay(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f001 fa4f 	bl	8001abc <HAL_Delay>
	if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK) {
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f980 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <W25Q128_OCTO_SPI_Init+0x52>
        return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e008      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
    }
    if (W25Q128_OSPI_WriteEnable(hospi) != HAL_OK) {
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 f8ea 	bl	8000808 <W25Q128_OSPI_WriteEnable>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <W25Q128_OCTO_SPI_Init+0x62>
        return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	e000      	b.n	8000640 <W25Q128_OCTO_SPI_Init+0x64>
    }
    return HAL_OK;
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <W25Q128_OSPI_ResetChip>:

/* Reset Chip Function */
HAL_StatusTypeDef W25Q128_OSPI_ResetChip(OSPI_HandleTypeDef* hospi)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b096      	sub	sp, #88	@ 0x58
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    OSPI_RegularCmdTypeDef sCommand={0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2250      	movs	r2, #80	@ 0x50
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f007 fb67 	bl	8007d2c <memset>

    /* Enable Reset --------------------------- */
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 800066a:	2300      	movs	r3, #0
 800066c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 800066e:	2300      	movs	r3, #0
 8000670:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000672:	2300      	movs	r3, #0
 8000674:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000676:	2300      	movs	r3, #0
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 800067a:	2300      	movs	r3, #0
 800067c:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 800067e:	2300      	movs	r3, #0
 8000680:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000682:	2300      	movs	r3, #0
 8000684:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000686:	2300      	movs	r3, #0
 8000688:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 800068a:	2301      	movs	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000692:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000696:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Instruction */
	sCommand.Instruction 				= W25Q_ENABLE_RST_CMD;						/* What We Do? */
 8000698:	2366      	movs	r3, #102	@ 0x66
 800069a:	613b      	str	r3, [r7, #16]
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 800069c:	2300      	movs	r3, #0
 800069e:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.Address					= 0;										/* Byte Address */
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 80006a4:	2300      	movs	r3, #0
 80006a6:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 80006a8:	2300      	movs	r3, #0
 80006aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.NbData            			= 0;										/* Bytes Send With Data */
 80006ac:	2300      	movs	r3, #0
 80006ae:	647b      	str	r3, [r7, #68]	@ 0x44

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f001 ff1b 	bl	80024f6 <HAL_OSPI_Command>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <W25Q128_OSPI_ResetChip+0x82>
        return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
 80006c8:	e036      	b.n	8000738 <W25Q128_OSPI_ResetChip+0xf0>
    }

    /* Reset Device --------------------------- */
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 80006d6:	2300      	movs	r3, #0
 80006d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 80006da:	2300      	movs	r3, #0
 80006dc:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 80006de:	2300      	movs	r3, #0
 80006e0:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 80006e2:	2300      	movs	r3, #0
 80006e4:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 80006e6:	2300      	movs	r3, #0
 80006e8:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 80006ea:	2300      	movs	r3, #0
 80006ec:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 80006ee:	2300      	movs	r3, #0
 80006f0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 80006f2:	2300      	movs	r3, #0
 80006f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 80006f6:	2301      	movs	r3, #1
 80006f8:	617b      	str	r3, [r7, #20]
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 80006fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000702:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Instruction */
	sCommand.Instruction 				= W25Q_RESET_CMD;							/* What We Do? */
 8000704:	2399      	movs	r3, #153	@ 0x99
 8000706:	613b      	str	r3, [r7, #16]
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.Address					= 0;										/* Byte Address */
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 8000710:	2300      	movs	r3, #0
 8000712:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 8000714:	2300      	movs	r3, #0
 8000716:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.NbData            			= 0;										/* Bytes Send With Data */
 8000718:	2300      	movs	r3, #0
 800071a:	647b      	str	r3, [r7, #68]	@ 0x44

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000724:	4619      	mov	r1, r3
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f001 fee5 	bl	80024f6 <HAL_OSPI_Command>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <W25Q128_OSPI_ResetChip+0xee>
        return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e000      	b.n	8000738 <W25Q128_OSPI_ResetChip+0xf0>
    }
    return HAL_OK;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	3758      	adds	r7, #88	@ 0x58
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <W25Q128_OSPI_Configuration>:

/* Enable Quad Mode & Set Dummy Cycles Count */
HAL_StatusTypeDef W25Q128_OSPI_Configuration(OSPI_HandleTypeDef* hospi)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    uint8_t reg1=0, reg2=0, reg3=0;
 8000748:	2300      	movs	r3, #0
 800074a:	733b      	strb	r3, [r7, #12]
 800074c:	2300      	movs	r3, #0
 800074e:	72fb      	strb	r3, [r7, #11]
 8000750:	2300      	movs	r3, #0
 8000752:	72bb      	strb	r3, [r7, #10]
    uint8_t w_reg1=0, w_reg2=0, w_reg3=0;
 8000754:	2300      	movs	r3, #0
 8000756:	73fb      	strb	r3, [r7, #15]
 8000758:	2300      	movs	r3, #0
 800075a:	73bb      	strb	r3, [r7, #14]
 800075c:	2300      	movs	r3, #0
 800075e:	737b      	strb	r3, [r7, #13]

    if (W25Q128_Read_Status_Registers(hospi, &reg1, 1) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2201      	movs	r2, #1
 8000766:	4619      	mov	r1, r3
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 faf1 	bl	8000d50 <W25Q128_Read_Status_Registers>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <W25Q128_OSPI_Configuration+0x38>
    {
        return HAL_ERROR;
 8000774:	2301      	movs	r3, #1
 8000776:	e043      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    if (W25Q128_Read_Status_Registers(hospi, &reg2, 2) != HAL_OK)
 8000778:	f107 030b 	add.w	r3, r7, #11
 800077c:	2202      	movs	r2, #2
 800077e:	4619      	mov	r1, r3
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 fae5 	bl	8000d50 <W25Q128_Read_Status_Registers>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <W25Q128_OSPI_Configuration+0x50>
    {
        return HAL_ERROR;
 800078c:	2301      	movs	r3, #1
 800078e:	e037      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    if (W25Q128_Read_Status_Registers(hospi, &reg3, 3) != HAL_OK)
 8000790:	f107 030a 	add.w	r3, r7, #10
 8000794:	2203      	movs	r2, #3
 8000796:	4619      	mov	r1, r3
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f000 fad9 	bl	8000d50 <W25Q128_Read_Status_Registers>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <W25Q128_OSPI_Configuration+0x68>
    {
        return HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e02b      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    w_reg1 = reg1;
 80007a8:	7b3b      	ldrb	r3, [r7, #12]
 80007aa:	73fb      	strb	r3, [r7, #15]
    w_reg2 = reg2 | W25Q_SR_Quad_Enable;
 80007ac:	7afb      	ldrb	r3, [r7, #11]
 80007ae:	f043 0302 	orr.w	r3, r3, #2
 80007b2:	73bb      	strb	r3, [r7, #14]
    w_reg3 = (reg3 & W25Q_SR_DRV1);
 80007b4:	7abb      	ldrb	r3, [r7, #10]
 80007b6:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80007ba:	737b      	strb	r3, [r7, #13]

    if (W25Q128_Write_Status_Registers(hospi, w_reg1, 1) != HAL_OK)
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	2201      	movs	r2, #1
 80007c0:	4619      	mov	r1, r3
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 fb2d 	bl	8000e22 <W25Q128_Write_Status_Registers>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <W25Q128_OSPI_Configuration+0x92>
    {
        return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e016      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }
    if (W25Q128_Write_Status_Registers(hospi, w_reg2, 2) != HAL_OK)
 80007d2:	7bbb      	ldrb	r3, [r7, #14]
 80007d4:	2202      	movs	r2, #2
 80007d6:	4619      	mov	r1, r3
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 fb22 	bl	8000e22 <W25Q128_Write_Status_Registers>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <W25Q128_OSPI_Configuration+0xa8>
    {
        return HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	e00b      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    if (W25Q128_Write_Status_Registers(hospi, w_reg3, 3) != HAL_OK)
 80007e8:	7b7b      	ldrb	r3, [r7, #13]
 80007ea:	2203      	movs	r2, #3
 80007ec:	4619      	mov	r1, r3
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f000 fb17 	bl	8000e22 <W25Q128_Write_Status_Registers>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <W25Q128_OSPI_Configuration+0xbe>
    {
        return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <W25Q128_OSPI_Configuration+0xc0>
    }

    return HAL_OK;
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <W25Q128_OSPI_WriteEnable>:

/* Write Enable Function */
HAL_StatusTypeDef W25Q128_OSPI_WriteEnable(OSPI_HandleTypeDef* hospi)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b09c      	sub	sp, #112	@ 0x70
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
    OSPI_RegularCmdTypeDef sCommand;
    OSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000818:	2300      	movs	r3, #0
 800081a:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 800081c:	2300      	movs	r3, #0
 800081e:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000820:	2300      	movs	r3, #0
 8000822:	663b      	str	r3, [r7, #96]	@ 0x60
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000824:	2300      	movs	r3, #0
 8000826:	66bb      	str	r3, [r7, #104]	@ 0x68
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000828:	2300      	movs	r3, #0
 800082a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 800082c:	2300      	movs	r3, #0
 800082e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000830:	2300      	movs	r3, #0
 8000832:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000834:	2300      	movs	r3, #0
 8000836:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000838:	2300      	movs	r3, #0
 800083a:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 800083c:	2301      	movs	r3, #1
 800083e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000840:	2300      	movs	r3, #0
 8000842:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000844:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000848:	643b      	str	r3, [r7, #64]	@ 0x40
	/* Instruction */
	sCommand.Instruction 				= W25Q_WRITE_ENABLE_CMD;					/* What We Do? */
 800084a:	2306      	movs	r3, #6
 800084c:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 800084e:	2300      	movs	r3, #0
 8000850:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.Address					= 0;										/* Byte Address */
 8000852:	2300      	movs	r3, #0
 8000854:	63bb      	str	r3, [r7, #56]	@ 0x38
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 8000856:	2300      	movs	r3, #0
 8000858:	65bb      	str	r3, [r7, #88]	@ 0x58
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 800085a:	2300      	movs	r3, #0
 800085c:	667b      	str	r3, [r7, #100]	@ 0x64
	sCommand.NbData            			= 0;										/* Bytes Send With Data */
 800085e:	2300      	movs	r3, #0
 8000860:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800086a:	4619      	mov	r1, r3
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f001 fe42 	bl	80024f6 <HAL_OSPI_Command>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <W25Q128_OSPI_WriteEnable+0x74>
        return HAL_ERROR;
 8000878:	2301      	movs	r3, #1
 800087a:	e04f      	b.n	800091c <W25Q128_OSPI_WriteEnable+0x114>
    }

	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000884:	2300      	movs	r3, #0
 8000886:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000888:	2300      	movs	r3, #0
 800088a:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 800088c:	2300      	movs	r3, #0
 800088e:	663b      	str	r3, [r7, #96]	@ 0x60
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000890:	2300      	movs	r3, #0
 8000892:	66bb      	str	r3, [r7, #104]	@ 0x68
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000894:	2300      	movs	r3, #0
 8000896:	66fb      	str	r3, [r7, #108]	@ 0x6c
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000898:	2300      	movs	r3, #0
 800089a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 800089c:	2300      	movs	r3, #0
 800089e:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 80008a0:	2300      	movs	r3, #0
 80008a2:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 80008a4:	2300      	movs	r3, #0
 80008a6:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 80008a8:	2301      	movs	r3, #1
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 80008b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b4:	643b      	str	r3, [r7, #64]	@ 0x40
	/* Instruction */
	sCommand.Instruction 				= W25Q_READ_SR1_CMD;						/* What We Do? */
 80008b6:	2305      	movs	r3, #5
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 80008ba:	2300      	movs	r3, #0
 80008bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.Address					= 0;										/* Byte Address */
 80008be:	2300      	movs	r3, #0
 80008c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_1_LINE;						/* Define Data Lines: Data On a Single Line */
 80008c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80008c6:	65bb      	str	r3, [r7, #88]	@ 0x58
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 80008c8:	2300      	movs	r3, #0
 80008ca:	667b      	str	r3, [r7, #100]	@ 0x64
	sCommand.NbData            			= 1;										/* Bytes Send With Data */
 80008cc:	2301      	movs	r3, #1
 80008ce:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80008d0:	f107 0320 	add.w	r3, r7, #32
 80008d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80008d8:	4619      	mov	r1, r3
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f001 fe0b 	bl	80024f6 <HAL_OSPI_Command>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <W25Q128_OSPI_WriteEnable+0xe2>
        return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e018      	b.n	800091c <W25Q128_OSPI_WriteEnable+0x114>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match 					= 0x02U;
 80008ea:	2302      	movs	r3, #2
 80008ec:	60fb      	str	r3, [r7, #12]
    sConfig.Mask 					= 0x02U;
 80008ee:	2302      	movs	r3, #2
 80008f0:	613b      	str	r3, [r7, #16]
    sConfig.MatchMode 				= HAL_OSPI_MATCH_MODE_AND;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
    sConfig.Interval 				= W25Q_AUTOPOLLING_INTERVAL_TIME;
 80008f6:	2310      	movs	r3, #16
 80008f8:	61fb      	str	r3, [r7, #28]
    sConfig.AutomaticStop 			= HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80008fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008fe:	61bb      	str	r3, [r7, #24]


    if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000908:	4619      	mov	r1, r3
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f001 ff96 	bl	800283c <HAL_OSPI_AutoPolling>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <W25Q128_OSPI_WriteEnable+0x112>
        return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e000      	b.n	800091c <W25Q128_OSPI_WriteEnable+0x114>
    }

    return HAL_OK;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3770      	adds	r7, #112	@ 0x70
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <W25Q128_OSPI_AutoPollingMemReady>:

/* Auto Polling Memory Function */
HAL_StatusTypeDef W25Q128_OSPI_AutoPollingMemReady(OSPI_HandleTypeDef* hospi)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09c      	sub	sp, #112	@ 0x70
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    OSPI_RegularCmdTypeDef sCommand;
    OSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000934:	2300      	movs	r3, #0
 8000936:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000938:	2300      	movs	r3, #0
 800093a:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 800093c:	2300      	movs	r3, #0
 800093e:	663b      	str	r3, [r7, #96]	@ 0x60
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000940:	2300      	movs	r3, #0
 8000942:	66bb      	str	r3, [r7, #104]	@ 0x68
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000944:	2300      	movs	r3, #0
 8000946:	66fb      	str	r3, [r7, #108]	@ 0x6c
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000948:	2300      	movs	r3, #0
 800094a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 800094c:	2300      	movs	r3, #0
 800094e:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000950:	2300      	movs	r3, #0
 8000952:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000954:	2300      	movs	r3, #0
 8000956:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000958:	2301      	movs	r3, #1
 800095a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 800095c:	2300      	movs	r3, #0
 800095e:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000960:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000964:	643b      	str	r3, [r7, #64]	@ 0x40
	/* Instruction */
	sCommand.Instruction 				= W25Q_READ_SR1_CMD;						/* What We Do? */
 8000966:	2305      	movs	r3, #5
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 800096a:	2300      	movs	r3, #0
 800096c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.Address					= 0;										/* Byte Address */
 800096e:	2300      	movs	r3, #0
 8000970:	63bb      	str	r3, [r7, #56]	@ 0x38
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_1_LINE;						/* Define Data Lines: Data On a Single Line */
 8000972:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000976:	65bb      	str	r3, [r7, #88]	@ 0x58
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 8000978:	2300      	movs	r3, #0
 800097a:	667b      	str	r3, [r7, #100]	@ 0x64
	sCommand.NbData            			= 1;										/* Bytes Send With Data */
 800097c:	2301      	movs	r3, #1
 800097e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000980:	f107 0320 	add.w	r3, r7, #32
 8000984:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000988:	4619      	mov	r1, r3
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f001 fdb3 	bl	80024f6 <HAL_OSPI_Command>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <W25Q128_OSPI_AutoPollingMemReady+0x76>
        return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e018      	b.n	80009cc <W25Q128_OSPI_AutoPollingMemReady+0xa8>
    }

    sConfig.Match           			= 0x00U;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
    sConfig.Mask            			= 0x01U;
 800099e:	2301      	movs	r3, #1
 80009a0:	613b      	str	r3, [r7, #16]
    sConfig.MatchMode       			= HAL_OSPI_MATCH_MODE_AND;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
    sConfig.Interval        			= W25Q_AUTOPOLLING_INTERVAL_TIME;
 80009a6:	2310      	movs	r3, #16
 80009a8:	61fb      	str	r3, [r7, #28]
    sConfig.AutomaticStop   			= HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80009aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ae:	61bb      	str	r3, [r7, #24]

    if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80009b8:	4619      	mov	r1, r3
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f001 ff3e 	bl	800283c <HAL_OSPI_AutoPolling>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <W25Q128_OSPI_AutoPollingMemReady+0xa6>
        return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e000      	b.n	80009cc <W25Q128_OSPI_AutoPollingMemReady+0xa8>
    }

    return HAL_OK;
 80009ca:	2300      	movs	r3, #0
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3770      	adds	r7, #112	@ 0x70
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <W25Q128_OSPI_Erase_Chip>:

/* Erase Chip Function */
HAL_StatusTypeDef W25Q128_OSPI_Erase_Chip(OSPI_HandleTypeDef* hospi)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b096      	sub	sp, #88	@ 0x58
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    OSPI_RegularCmdTypeDef sCommand={0};
 80009dc:	f107 0308 	add.w	r3, r7, #8
 80009e0:	2250      	movs	r2, #80	@ 0x50
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f007 f9a1 	bl	8007d2c <memset>
    //uint8_t reg3=0, w_reg3=0;

    /* Erasing Sequence ---------------------------------*/
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 80009f6:	2300      	movs	r3, #0
 80009f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 80009fa:	2300      	movs	r3, #0
 80009fc:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 80009fe:	2300      	movs	r3, #0
 8000a00:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000a02:	2300      	movs	r3, #0
 8000a04:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000a06:	2300      	movs	r3, #0
 8000a08:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000a0e:	2300      	movs	r3, #0
 8000a10:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000a12:	2300      	movs	r3, #0
 8000a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000a16:	2301      	movs	r3, #1
 8000a18:	617b      	str	r3, [r7, #20]
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000a1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Instruction */
	sCommand.Instruction 				= W25Q_CHIP_ERASE_CMD;						/* What We Do? */
 8000a24:	23c7      	movs	r3, #199	@ 0xc7
 8000a26:	613b      	str	r3, [r7, #16]
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.Address					= 0;										/* Byte Address */
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 8000a30:	2300      	movs	r3, #0
 8000a32:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 8000a34:	2300      	movs	r3, #0
 8000a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.NbData            			= 1;										/* Bytes Send With Data */
 8000a38:	2301      	movs	r3, #1
 8000a3a:	647b      	str	r3, [r7, #68]	@ 0x44

    if (W25Q128_OSPI_WriteEnable(hospi) != HAL_OK) {
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff fee3 	bl	8000808 <W25Q128_OSPI_WriteEnable>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <W25Q128_OSPI_Erase_Chip+0x78>
        return HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e01e      	b.n	8000a8a <W25Q128_OSPI_Erase_Chip+0xb6>
    }

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a54:	4619      	mov	r1, r3
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f001 fd4d 	bl	80024f6 <HAL_OSPI_Command>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d004      	beq.n	8000a6c <W25Q128_OSPI_Erase_Chip+0x98>
        return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e011      	b.n	8000a8a <W25Q128_OSPI_Erase_Chip+0xb6>
    }

    while (W25Q128_IsBusy(hospi)==HAL_ERROR)
    {
    	HAL_Delay(1);
 8000a66:	2001      	movs	r0, #1
 8000a68:	f001 f828 	bl	8001abc <HAL_Delay>
    while (W25Q128_IsBusy(hospi)==HAL_ERROR)
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f000 f94c 	bl	8000d0a <W25Q128_IsBusy>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d0f6      	beq.n	8000a66 <W25Q128_OSPI_Erase_Chip+0x92>
    }

    if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK) {
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ff53 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <W25Q128_OSPI_Erase_Chip+0xb4>
        return HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	e000      	b.n	8000a8a <W25Q128_OSPI_Erase_Chip+0xb6>
    }

    return HAL_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3758      	adds	r7, #88	@ 0x58
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <W25Q128_OSPI_Write>:
    return HAL_OK;
}

/* Write Function */
HAL_StatusTypeDef W25Q128_OSPI_Write(OSPI_HandleTypeDef* hospi, uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b09c      	sub	sp, #112	@ 0x70
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	60f8      	str	r0, [r7, #12]
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
 8000a9e:	603b      	str	r3, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand={0};
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	2250      	movs	r2, #80	@ 0x50
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f007 f93f 	bl	8007d2c <memset>
  uint32_t end_addr=0, current_size=0, current_addr=0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	663b      	str	r3, [r7, #96]	@ 0x60
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	66bb      	str	r3, [r7, #104]	@ 0x68
  uint32_t data_addr=0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	667b      	str	r3, [r7, #100]	@ 0x64

  current_addr = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	66bb      	str	r3, [r7, #104]	@ 0x68

  while (current_addr <= WriteAddr) {
 8000ac2:	e003      	b.n	8000acc <W25Q128_OSPI_Write+0x3a>
      current_addr += W25Q_PAGE_SIZE;
 8000ac4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000ac6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000aca:	66bb      	str	r3, [r7, #104]	@ 0x68
  while (current_addr <= WriteAddr) {
 8000acc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d9f7      	bls.n	8000ac4 <W25Q128_OSPI_Write+0x32>
  }
  current_size = current_addr - WriteAddr;
 8000ad4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size) {
 8000adc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d901      	bls.n	8000ae8 <W25Q128_OSPI_Write+0x56>
      current_size = Size;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	66bb      	str	r3, [r7, #104]	@ 0x68
  end_addr = WriteAddr + Size;
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	663b      	str	r3, [r7, #96]	@ 0x60

  data_addr = (uint32_t)pData;
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	667b      	str	r3, [r7, #100]	@ 0x64
  /* Perform the write page by page */
  do
  {
	/* Initialize the program command */
	/* Common Commands*/
	sCommand.OperationType      		= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
	sCommand.FlashId            		= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
	sCommand.InstructionDtrMode 		= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.AddressDtrMode     		= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000b04:	2300      	movs	r3, #0
 8000b06:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DataDtrMode				= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000b08:	2300      	movs	r3, #0
 8000b0a:	653b      	str	r3, [r7, #80]	@ 0x50
	sCommand.DQSMode            		= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	65bb      	str	r3, [r7, #88]	@ 0x58
	sCommand.SIOOMode          			= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000b10:	2300      	movs	r3, #0
 8000b12:	65fb      	str	r3, [r7, #92]	@ 0x5c
	sCommand.AlternateBytesMode 		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000b14:	2300      	movs	r3, #0
 8000b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.AlternateBytes				= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000b18:	2300      	movs	r3, #0
 8000b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateBytesSize			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.AlternateBytesDtrMode		= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000b20:	2300      	movs	r3, #0
 8000b22:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.InstructionMode   			= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000b24:	2301      	movs	r3, #1
 8000b26:	61fb      	str	r3, [r7, #28]
	sCommand.InstructionSize    		= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize 				= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000b2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b30:	633b      	str	r3, [r7, #48]	@ 0x30
	/* Instruction */
	sCommand.Instruction 				= W25Q_PAGE_PROGRAM_QUAD_INP_CMD;			/* What We Do? */
 8000b32:	2332      	movs	r3, #50	@ 0x32
 8000b34:	61bb      	str	r3, [r7, #24]
	/* Address */
	sCommand.AddressMode       			= HAL_OSPI_ADDRESS_1_LINE;					/* Define Address Lines: Address On a Single Line */
 8000b36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.Address					= current_addr;								/* Byte Address */
 8000b3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* Data */
	sCommand.DataMode          			= HAL_OSPI_DATA_4_LINES;					/* Define Data Lines: Data On Four Lines */
 8000b40:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000b44:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DummyCycles       			= 0;										/* Bytes Send With No Data */
 8000b46:	2300      	movs	r3, #0
 8000b48:	657b      	str	r3, [r7, #84]	@ 0x54
	sCommand.NbData            			= current_size;								/* Bytes Send With Data */
 8000b4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (current_size == 0) {
 8000b4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d101      	bne.n	8000b58 <W25Q128_OSPI_Write+0xc6>
        return HAL_OK;
 8000b54:	2300      	movs	r3, #0
 8000b56:	e042      	b.n	8000bde <W25Q128_OSPI_Write+0x14c>
    }

    /* Enable write operations */
    if (W25Q128_OSPI_WriteEnable(hospi) != HAL_OK)
 8000b58:	68f8      	ldr	r0, [r7, #12]
 8000b5a:	f7ff fe55 	bl	8000808 <W25Q128_OSPI_WriteEnable>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <W25Q128_OSPI_Write+0xd6>
    {
      return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e03a      	b.n	8000bde <W25Q128_OSPI_Write+0x14c>
    }

    /* Configure the command */
    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b70:	4619      	mov	r1, r3
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f001 fcbf 	bl	80024f6 <HAL_OSPI_Command>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <W25Q128_OSPI_Write+0xf0>
    {
      return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e02d      	b.n	8000bde <W25Q128_OSPI_Write+0x14c>
    }

    /* Transmission of the data */
    if (HAL_OSPI_Transmit(hospi, (uint8_t*)data_addr, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000b84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b88:	4619      	mov	r1, r3
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f001 fd40 	bl	8002610 <HAL_OSPI_Transmit>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <W25Q128_OSPI_Write+0x108>
    {
      return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e021      	b.n	8000bde <W25Q128_OSPI_Write+0x14c>
    }

    /* Configure automatic polling mode to wait for end of program */
    if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK)
 8000b9a:	68f8      	ldr	r0, [r7, #12]
 8000b9c:	f7ff fec2 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <W25Q128_OSPI_Write+0x118>
    {
      return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e019      	b.n	8000bde <W25Q128_OSPI_Write+0x14c>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8000baa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000bac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bae:	4413      	add	r3, r2
 8000bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
    data_addr += current_size;
 8000bb2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bb6:	4413      	add	r3, r2
 8000bb8:	667b      	str	r3, [r7, #100]	@ 0x64
    current_size = ((current_addr + W25Q_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : W25Q_PAGE_SIZE;
 8000bba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000bbc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000bc0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d203      	bcs.n	8000bce <W25Q128_OSPI_Write+0x13c>
 8000bc6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000bc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	e001      	b.n	8000bd2 <W25Q128_OSPI_Write+0x140>
 8000bce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  } while (current_addr <= end_addr);
 8000bd4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000bd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d98d      	bls.n	8000af8 <W25Q128_OSPI_Write+0x66>

  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3770      	adds	r7, #112	@ 0x70
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <W25Q128_OSPI_EnableMemoryMappedMode>:
  return HAL_OK;
}

/* Memory Map Enable Function */
HAL_StatusTypeDef W25Q128_OSPI_EnableMemoryMappedMode(OSPI_HandleTypeDef* hospi)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b098      	sub	sp, #96	@ 0x60
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]

    OSPI_RegularCmdTypeDef sCommand={0};
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	2250      	movs	r2, #80	@ 0x50
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f007 f898 	bl	8007d2c <memset>
    OSPI_MemoryMappedTypeDef sMemMappedCfg={0};
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]

    /* Enable Memory-Mapped mode-------------------------------------------------- */
	/* Common Commands*/
    sCommand.OperationType      	= HAL_OSPI_OPTYPE_READ_CFG; 				/* Read Configuration (Memory-Mapped Mode) */
 8000c06:	2301      	movs	r3, #1
 8000c08:	613b      	str	r3, [r7, #16]
    sCommand.FlashId            	= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
    sCommand.InstructionDtrMode 	= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressDtrMode     	= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000c12:	2300      	movs	r3, #0
 8000c14:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DataDtrMode			= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000c16:	2300      	movs	r3, #0
 8000c18:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.DQSMode            	= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000c1e:	2300      	movs	r3, #0
 8000c20:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sCommand.AlternateBytesMode 	= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000c22:	2300      	movs	r3, #0
 8000c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000c26:	2300      	movs	r3, #0
 8000c28:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000c2e:	2300      	movs	r3, #0
 8000c30:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000c32:	2301      	movs	r3, #1
 8000c34:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize    	= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize 			= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000c3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c3e:	633b      	str	r3, [r7, #48]	@ 0x30
    /* Instruction */
    sCommand.Instruction 			= W25Q_FAST_READ_QUAD_IO_CMD;				/* What We Do? */
 8000c40:	23eb      	movs	r3, #235	@ 0xeb
 8000c42:	61bb      	str	r3, [r7, #24]
    /* Address */
    sCommand.AddressMode       		= HAL_OSPI_ADDRESS_4_LINES;					/* Define Address Lines: Address On Four Lines */
 8000c44:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.Address				= 0;										/* Byte Address */
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Data */
    sCommand.DataMode          		= HAL_OSPI_DATA_4_LINES;					/* Define Data Lines: Data On Four Lines */
 8000c4e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000c52:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DummyCycles       		= W25Q_DUMMY_CYCLES_READ_QUAD;				/* Bytes Send With No Data */
 8000c54:	2306      	movs	r3, #6
 8000c56:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.NbData            		= 0;										/* Bytes Send With Data */
 8000c58:	2300      	movs	r3, #0
 8000c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c64:	4619      	mov	r1, r3
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f001 fc45 	bl	80024f6 <HAL_OSPI_Command>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <W25Q128_OSPI_EnableMemoryMappedMode+0x90>
        return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e045      	b.n	8000d02 <W25Q128_OSPI_EnableMemoryMappedMode+0x11c>
    }

    /* Initialize the program command */
	/* Common Commands*/
    sCommand.OperationType      	= HAL_OSPI_OPTYPE_WRITE_CFG; 				/* Write Configuration (Memory-Mapped Mode)) */
 8000c76:	2302      	movs	r3, #2
 8000c78:	613b      	str	r3, [r7, #16]
    sCommand.FlashId            	= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
    sCommand.InstructionDtrMode 	= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressDtrMode     	= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000c82:	2300      	movs	r3, #0
 8000c84:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DataDtrMode			= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000c86:	2300      	movs	r3, #0
 8000c88:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.DQSMode            	= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000c8e:	2300      	movs	r3, #0
 8000c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sCommand.AlternateBytesMode 	= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000c92:	2300      	movs	r3, #0
 8000c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000c96:	2300      	movs	r3, #0
 8000c98:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize    	= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize 			= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000caa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cae:	633b      	str	r3, [r7, #48]	@ 0x30
    /* Instruction */
    sCommand.Instruction 			= W25Q_PAGE_PROGRAM_QUAD_INP_CMD;			/* What We Do? */
 8000cb0:	2332      	movs	r3, #50	@ 0x32
 8000cb2:	61bb      	str	r3, [r7, #24]
    /* Address */
    sCommand.AddressMode       		= HAL_OSPI_ADDRESS_1_LINE;					/* Define Address Lines: Address On a Single Line */
 8000cb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.Address				= 0;										/* Byte Address */
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Data */
    sCommand.DataMode          		= HAL_OSPI_DATA_4_LINES;					/* Define Data Lines: Data On Four Lines */
 8000cbe:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DummyCycles       		= 0;										/* Bytes Send With No Data */
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.NbData            		= 0;										/* Bytes Send With Data */
 8000cc8:	2300      	movs	r3, #0
 8000cca:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f001 fc0d 	bl	80024f6 <HAL_OSPI_Command>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <W25Q128_OSPI_EnableMemoryMappedMode+0x100>
        return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00d      	b.n	8000d02 <W25Q128_OSPI_EnableMemoryMappedMode+0x11c>
    }

    /* Initialize Memory Mapped Command */
    sMemMappedCfg.TimeOutActivation 	= HAL_OSPI_TIMEOUT_COUNTER_DISABLE;		/* Timeout counter disabled, nCS remains active */
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]

    if (HAL_OSPI_MemoryMapped(hospi, &sMemMappedCfg) != HAL_OK) {
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	4619      	mov	r1, r3
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f001 fe2b 	bl	800294c <HAL_OSPI_MemoryMapped>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <W25Q128_OSPI_EnableMemoryMappedMode+0x11a>
        return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e000      	b.n	8000d02 <W25Q128_OSPI_EnableMemoryMappedMode+0x11c>
    }

    return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3760      	adds	r7, #96	@ 0x60
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <W25Q128_IsBusy>:

/* Check Chip is Busy Function */
HAL_StatusTypeDef W25Q128_IsBusy(OSPI_HandleTypeDef* hospi)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef state;
	uint8_t status_rgister = {0};
 8000d12:	2300      	movs	r3, #0
 8000d14:	73bb      	strb	r3, [r7, #14]

	state = W25Q128_Read_Status_Registers(hospi, &status_rgister, 1);
 8000d16:	f107 030e 	add.w	r3, r7, #14
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 f816 	bl	8000d50 <W25Q128_Read_Status_Registers>
 8000d24:	4603      	mov	r3, r0
 8000d26:	73fb      	strb	r3, [r7, #15]
	if (state != HAL_OK)
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <W25Q128_IsBusy+0x28>
		return state;
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	e00a      	b.n	8000d48 <W25Q128_IsBusy+0x3e>

	status_rgister = status_rgister & 0b1;
 8000d32:	7bbb      	ldrb	r3, [r7, #14]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	73bb      	strb	r3, [r7, #14]

	return status_rgister ? HAL_ERROR : HAL_OK;
 8000d3c:	7bbb      	ldrb	r3, [r7, #14]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	bf14      	ite	ne
 8000d42:	2301      	movne	r3, #1
 8000d44:	2300      	moveq	r3, #0
 8000d46:	b2db      	uxtb	r3, r3
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <W25Q128_Read_Status_Registers>:

/* Read Status Registers Function */
HAL_StatusTypeDef W25Q128_Read_Status_Registers(OSPI_HandleTypeDef* hospi, uint8_t* register_data, uint8_t register_num)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b098      	sub	sp, #96	@ 0x60
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	71fb      	strb	r3, [r7, #7]
	OSPI_RegularCmdTypeDef sCommand={0};
 8000d5e:	f107 0310 	add.w	r3, r7, #16
 8000d62:	2250      	movs	r2, #80	@ 0x50
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f006 ffe0 	bl	8007d2c <memset>

	/* Common Commands*/
    sCommand.OperationType      	= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]
    sCommand.FlashId            	= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
    sCommand.InstructionDtrMode 	= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressDtrMode     	= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000d78:	2300      	movs	r3, #0
 8000d7a:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DataDtrMode			= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.DQSMode            	= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000d80:	2300      	movs	r3, #0
 8000d82:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000d84:	2300      	movs	r3, #0
 8000d86:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sCommand.AlternateBytesMode 	= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000d90:	2300      	movs	r3, #0
 8000d92:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000d94:	2300      	movs	r3, #0
 8000d96:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize    	= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize 			= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000da0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000da4:	633b      	str	r3, [r7, #48]	@ 0x30
    /* Instruction */
    sCommand.Instruction 			= 0;										/* What We Do? */
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
    /* Address */
    sCommand.AddressMode       		= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.Address				= 0;										/* Byte Address */
 8000dae:	2300      	movs	r3, #0
 8000db0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Data */
    sCommand.DataMode          		= HAL_OSPI_DATA_1_LINE;						/* Define Data Lines: Data On a Single Line */
 8000db2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000db6:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DummyCycles       		= 0;										/* Bytes Send With No Data */
 8000db8:	2300      	movs	r3, #0
 8000dba:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.NbData            		= 1;										/* Bytes Send With Data */
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (register_num == 1)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d102      	bne.n	8000dcc <W25Q128_Read_Status_Registers+0x7c>
		sCommand.Instruction = W25Q_READ_SR1_CMD;
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	61bb      	str	r3, [r7, #24]
 8000dca:	e00d      	b.n	8000de8 <W25Q128_Read_Status_Registers+0x98>
	else if (register_num == 2)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d102      	bne.n	8000dd8 <W25Q128_Read_Status_Registers+0x88>
		sCommand.Instruction = W25Q_READ_SR2_CMD;
 8000dd2:	2335      	movs	r3, #53	@ 0x35
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	e007      	b.n	8000de8 <W25Q128_Read_Status_Registers+0x98>
	else if (register_num == 3)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d102      	bne.n	8000de4 <W25Q128_Read_Status_Registers+0x94>
		sCommand.Instruction = W25Q_READ_SR3_CMD;
 8000dde:	2315      	movs	r3, #21
 8000de0:	61bb      	str	r3, [r7, #24]
 8000de2:	e001      	b.n	8000de8 <W25Q128_Read_Status_Registers+0x98>
	else
		return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e018      	b.n	8000e1a <W25Q128_Read_Status_Registers+0xca>

    if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000df0:	4619      	mov	r1, r3
 8000df2:	68f8      	ldr	r0, [r7, #12]
 8000df4:	f001 fb7f 	bl	80024f6 <HAL_OSPI_Command>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <W25Q128_Read_Status_Registers+0xb2>
    {
        return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00b      	b.n	8000e1a <W25Q128_Read_Status_Registers+0xca>
    }

    if (HAL_OSPI_Receive(hospi, register_data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e06:	68b9      	ldr	r1, [r7, #8]
 8000e08:	68f8      	ldr	r0, [r7, #12]
 8000e0a:	f001 fc74 	bl	80026f6 <HAL_OSPI_Receive>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <W25Q128_Read_Status_Registers+0xc8>
    {
        return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <W25Q128_Read_Status_Registers+0xca>
    }

	return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3760      	adds	r7, #96	@ 0x60
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <W25Q128_Write_Status_Registers>:

/* Write Status Registers Function */
HAL_StatusTypeDef W25Q128_Write_Status_Registers(OSPI_HandleTypeDef* hospi, uint8_t reg_data, uint8_t reg_num)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b096      	sub	sp, #88	@ 0x58
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	70fb      	strb	r3, [r7, #3]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	70bb      	strb	r3, [r7, #2]
	OSPI_RegularCmdTypeDef sCommand;

	/* Common Commands*/
    sCommand.OperationType      	= HAL_OSPI_OPTYPE_COMMON_CFG; 				/* Common configuration (indirect or auto-polling mode) */
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
    sCommand.FlashId            	= HAL_OSPI_FLASH_ID_1; 						/* Set The OCTO SPI Flash ID */
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
    sCommand.InstructionDtrMode 	= HAL_OSPI_INSTRUCTION_DTR_DISABLE; 		/* Disable Instruction DDR/DTR Mode */
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    sCommand.AddressDtrMode     	= HAL_OSPI_ADDRESS_DTR_DISABLE; 			/* Disable Address DDR/DTR Mode */
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DataDtrMode			= HAL_OSPI_DATA_DTR_DISABLE; 				/* Disable Data DDR/DTR Mode */
 8000e42:	2300      	movs	r3, #0
 8000e44:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DQSMode            	= HAL_OSPI_DQS_DISABLE; 					/* Disable Data Strobe */
 8000e46:	2300      	movs	r3, #0
 8000e48:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.SIOOMode          		= HAL_OSPI_SIOO_INST_EVERY_CMD; 			/* SIOO Mode: Send instruction on every transaction */
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.AlternateBytesMode 	= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Disable Alternate Bytes Mode */
 8000e4e:	2300      	movs	r3, #0
 8000e50:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.AlternateBytes			= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes = 0 */
 8000e52:	2300      	movs	r3, #0
 8000e54:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.AlternateBytesSize		= HAL_OSPI_ALTERNATE_BYTES_NONE; 			/* Alternate Bytes Size = 0 */
 8000e56:	2300      	movs	r3, #0
 8000e58:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.AlternateBytesDtrMode	= HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE; 	/* Disable Alternate Bytes DDR/DTR Mode */
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.InstructionMode   		= HAL_OSPI_INSTRUCTION_1_LINE;				/* Instruction on a single line */
 8000e5e:	2301      	movs	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
    sCommand.InstructionSize    	= HAL_OSPI_INSTRUCTION_8_BITS;				/* 8-bit Instruction */
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
    sCommand.AddressSize 			= HAL_OSPI_ADDRESS_24_BITS;					/* 24-bit Address */
 8000e66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Instruction */
    sCommand.Instruction 			= W25Q_WRITE_DISABLE_CMD;					/* What We Do? */
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	613b      	str	r3, [r7, #16]
    /* Address */
    sCommand.AddressMode       		= HAL_OSPI_ADDRESS_NONE;					/* Define Address Lines: No Address */
 8000e70:	2300      	movs	r3, #0
 8000e72:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.Address				= 0;										/* Byte Address */
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
    /* Data */
    sCommand.DataMode          		= HAL_OSPI_DATA_NONE;						/* Define Data Lines: No Data */
 8000e78:	2300      	movs	r3, #0
 8000e7a:	643b      	str	r3, [r7, #64]	@ 0x40
    sCommand.DummyCycles       		= 0;										/* Bytes Send With No Data */
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sCommand.NbData            		= 0;										/* Bytes Send With Data */
 8000e80:	2300      	movs	r3, #0
 8000e82:	647b      	str	r3, [r7, #68]	@ 0x44

	if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f001 fb31 	bl	80024f6 <HAL_OSPI_Command>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <W25Q128_Write_Status_Registers+0x7c>
		return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e061      	b.n	8000f62 <W25Q128_Write_Status_Registers+0x140>
	}
	if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK) {
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff fd40 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <W25Q128_Write_Status_Registers+0x8c>
        return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e059      	b.n	8000f62 <W25Q128_Write_Status_Registers+0x140>
    }

	sCommand.Instruction 			= W25Q_ENABLE_VOLATILE_SR_CMD;				/* What We Do? */
 8000eae:	2350      	movs	r3, #80	@ 0x50
 8000eb0:	613b      	str	r3, [r7, #16]
	if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000eb2:	f107 0308 	add.w	r3, r7, #8
 8000eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000eba:	4619      	mov	r1, r3
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f001 fb1a 	bl	80024f6 <HAL_OSPI_Command>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <W25Q128_Write_Status_Registers+0xaa>
		return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e04a      	b.n	8000f62 <W25Q128_Write_Status_Registers+0x140>
	}
	if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK) {
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff fd29 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <W25Q128_Write_Status_Registers+0xba>
        return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e042      	b.n	8000f62 <W25Q128_Write_Status_Registers+0x140>
    }

	if (reg_num == 1)
 8000edc:	78bb      	ldrb	r3, [r7, #2]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d102      	bne.n	8000ee8 <W25Q128_Write_Status_Registers+0xc6>
		sCommand.Instruction = W25Q_WRITE_SR1_CMD;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	e00d      	b.n	8000f04 <W25Q128_Write_Status_Registers+0xe2>
	else if (reg_num == 2)
 8000ee8:	78bb      	ldrb	r3, [r7, #2]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d102      	bne.n	8000ef4 <W25Q128_Write_Status_Registers+0xd2>
		sCommand.Instruction = W25Q_WRITE_SR2_CMD;
 8000eee:	2331      	movs	r3, #49	@ 0x31
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	e007      	b.n	8000f04 <W25Q128_Write_Status_Registers+0xe2>
	else if (reg_num == 3)
 8000ef4:	78bb      	ldrb	r3, [r7, #2]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d102      	bne.n	8000f00 <W25Q128_Write_Status_Registers+0xde>
		sCommand.Instruction = W25Q_WRITE_SR3_CMD;
 8000efa:	2311      	movs	r3, #17
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	e001      	b.n	8000f04 <W25Q128_Write_Status_Registers+0xe2>
	else
		return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e02e      	b.n	8000f62 <W25Q128_Write_Status_Registers+0x140>

	sCommand.DataMode          		= HAL_OSPI_DATA_1_LINE;
 8000f04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f08:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.NbData            		= 1;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	647b      	str	r3, [r7, #68]	@ 0x44

	if (W25Q128_OSPI_WriteEnable(hospi) != HAL_OK) {
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fc7a 	bl	8000808 <W25Q128_OSPI_WriteEnable>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <W25Q128_Write_Status_Registers+0xfc>
		return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e021      	b.n	8000f62 <W25Q128_Write_Status_Registers+0x140>
	}

	if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f26:	4619      	mov	r1, r3
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f001 fae4 	bl	80024f6 <HAL_OSPI_Command>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <W25Q128_Write_Status_Registers+0x116>
		return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e014      	b.n	8000f62 <W25Q128_Write_Status_Registers+0x140>
	}
	if (HAL_OSPI_Transmit(hospi, &reg_data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000f38:	1cfb      	adds	r3, r7, #3
 8000f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f001 fb65 	bl	8002610 <HAL_OSPI_Transmit>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <W25Q128_Write_Status_Registers+0x12e>
		return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e008      	b.n	8000f62 <W25Q128_Write_Status_Registers+0x140>
	}
	if (W25Q128_OSPI_AutoPollingMemReady(hospi) != HAL_OK) {
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fce7 	bl	8000924 <W25Q128_OSPI_AutoPollingMemReady>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <W25Q128_Write_Status_Registers+0x13e>
        return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e000      	b.n	8000f62 <W25Q128_Write_Status_Registers+0x140>
    }

	return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3758      	adds	r7, #88	@ 0x58
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <MX_GPIO_Init+0x6c>)
 8000f74:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f78:	4a17      	ldr	r2, [pc, #92]	@ (8000fd8 <MX_GPIO_Init+0x6c>)
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <MX_GPIO_Init+0x6c>)
 8000f84:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f90:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <MX_GPIO_Init+0x6c>)
 8000f92:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f96:	4a10      	ldr	r2, [pc, #64]	@ (8000fd8 <MX_GPIO_Init+0x6c>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <MX_GPIO_Init+0x6c>)
 8000fa2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <MX_GPIO_Init+0x6c>)
 8000fb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fb4:	4a08      	ldr	r2, [pc, #32]	@ (8000fd8 <MX_GPIO_Init+0x6c>)
 8000fb6:	f043 0302 	orr.w	r3, r3, #2
 8000fba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <MX_GPIO_Init+0x6c>)
 8000fc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]

}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	58024400 	.word	0x58024400

08000fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fdc:	b5b0      	push	{r4, r5, r7, lr}
 8000fde:	b0a0      	sub	sp, #128	@ 0x80
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000fe2:	f000 f8cf 	bl	8001184 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe6:	f000 fcd7 	bl	8001998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fea:	f000 f837 	bl	800105c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000fee:	f000 f8ab 	bl	8001148 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff2:	f7ff ffbb 	bl	8000f6c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ff6:	f000 fbdd 	bl	80017b4 <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 8000ffa:	f000 f8f5 	bl	80011e8 <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */



  HAL_StatusTypeDef retVal = W25Q128_OCTO_SPI_Init(&hospi1);
 8000ffe:	4814      	ldr	r0, [pc, #80]	@ (8001050 <main+0x74>)
 8001000:	f7ff faec 	bl	80005dc <W25Q128_OCTO_SPI_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f


  W25Q128_OSPI_Erase_Chip(&hospi1);
 800100a:	4811      	ldr	r0, [pc, #68]	@ (8001050 <main+0x74>)
 800100c:	f7ff fce2 	bl	80009d4 <W25Q128_OSPI_Erase_Chip>
  printf("Hello world!!!121\r\n");
 8001010:	4810      	ldr	r0, [pc, #64]	@ (8001054 <main+0x78>)
 8001012:	f006 fdab 	bl	8007b6c <puts>
  char writebuf[] = "Hello world from QSPI";
 8001016:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <main+0x7c>)
 8001018:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 800101c:	461d      	mov	r5, r3
 800101e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001022:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001026:	6020      	str	r0, [r4, #0]
 8001028:	3404      	adds	r4, #4
 800102a:	8021      	strh	r1, [r4, #0]
  char Readbuf[100];
  retVal =W25Q128_OSPI_Write(&hospi1, writebuf, 0, 22);
 800102c:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001030:	2316      	movs	r3, #22
 8001032:	2200      	movs	r2, #0
 8001034:	4806      	ldr	r0, [pc, #24]	@ (8001050 <main+0x74>)
 8001036:	f7ff fd2c 	bl	8000a92 <W25Q128_OSPI_Write>
 800103a:	4603      	mov	r3, r0
 800103c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

  retVal = W25Q128_OSPI_EnableMemoryMappedMode(&hospi1);
 8001040:	4803      	ldr	r0, [pc, #12]	@ (8001050 <main+0x74>)
 8001042:	f7ff fdd0 	bl	8000be6 <W25Q128_OSPI_EnableMemoryMappedMode>
 8001046:	4603      	mov	r3, r0
 8001048:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <main+0x70>
 8001050:	24000088 	.word	0x24000088
 8001054:	080082ac 	.word	0x080082ac
 8001058:	080082c0 	.word	0x080082c0

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b09c      	sub	sp, #112	@ 0x70
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001066:	224c      	movs	r2, #76	@ 0x4c
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f006 fe5e 	bl	8007d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2220      	movs	r2, #32
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f006 fe58 	bl	8007d2c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800107c:	4b30      	ldr	r3, [pc, #192]	@ (8001140 <SystemClock_Config+0xe4>)
 800107e:	f04f 32ff 	mov.w	r2, #4294967295
 8001082:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001086:	2002      	movs	r0, #2
 8001088:	f002 fc12 	bl	80038b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800108c:	2300      	movs	r3, #0
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	4b2c      	ldr	r3, [pc, #176]	@ (8001144 <SystemClock_Config+0xe8>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a2b      	ldr	r2, [pc, #172]	@ (8001144 <SystemClock_Config+0xe8>)
 8001096:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b29      	ldr	r3, [pc, #164]	@ (8001144 <SystemClock_Config+0xe8>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010a8:	bf00      	nop
 80010aa:	4b26      	ldr	r3, [pc, #152]	@ (8001144 <SystemClock_Config+0xe8>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010b6:	d1f8      	bne.n	80010aa <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b8:	2302      	movs	r3, #2
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80010bc:	2301      	movs	r3, #1
 80010be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80010c0:	2340      	movs	r3, #64	@ 0x40
 80010c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c4:	2302      	movs	r3, #2
 80010c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c8:	2300      	movs	r3, #0
 80010ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010cc:	2304      	movs	r3, #4
 80010ce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010d0:	230a      	movs	r3, #10
 80010d2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010d8:	2302      	movs	r3, #2
 80010da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010dc:	2302      	movs	r3, #2
 80010de:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010e0:	230c      	movs	r3, #12
 80010e2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f0:	4618      	mov	r0, r3
 80010f2:	f002 fc17 	bl	8003924 <HAL_RCC_OscConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80010fc:	f000 f86e 	bl	80011dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001100:	233f      	movs	r3, #63	@ 0x3f
 8001102:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001104:	2303      	movs	r3, #3
 8001106:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001110:	2340      	movs	r3, #64	@ 0x40
 8001112:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001114:	2340      	movs	r3, #64	@ 0x40
 8001116:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001118:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800111c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800111e:	2340      	movs	r3, #64	@ 0x40
 8001120:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2103      	movs	r1, #3
 8001126:	4618      	mov	r0, r3
 8001128:	f003 f82e 	bl	8004188 <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001132:	f000 f853 	bl	80011dc <Error_Handler>
  }
}
 8001136:	bf00      	nop
 8001138:	3770      	adds	r7, #112	@ 0x70
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	58024400 	.word	0x58024400
 8001144:	58024800 	.word	0x58024800

08001148 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b0b0      	sub	sp, #192	@ 0xc0
 800114c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800114e:	463b      	mov	r3, r7
 8001150:	22c0      	movs	r2, #192	@ 0xc0
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f006 fde9 	bl	8007d2c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800115a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001166:	2300      	movs	r3, #0
 8001168:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	4618      	mov	r0, r3
 800116e:	f003 fb97 	bl	80048a0 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8001178:	f000 f830 	bl	80011dc <Error_Handler>
  }
}
 800117c:	bf00      	nop
 800117e:	37c0      	adds	r7, #192	@ 0xc0
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800118a:	463b      	mov	r3, r7
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001196:	f000 fd99 	bl	8001ccc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800119a:	2301      	movs	r3, #1
 800119c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800119e:	2300      	movs	r3, #0
 80011a0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80011a6:	231f      	movs	r3, #31
 80011a8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80011aa:	2387      	movs	r3, #135	@ 0x87
 80011ac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80011b2:	2300      	movs	r3, #0
 80011b4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80011b6:	2301      	movs	r3, #1
 80011b8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80011ba:	2301      	movs	r3, #1
 80011bc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011c6:	463b      	mov	r3, r7
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fdb7 	bl	8001d3c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011ce:	2004      	movs	r0, #4
 80011d0:	f000 fd94 	bl	8001cfc <HAL_MPU_Enable>

}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <Error_Handler+0x8>

080011e8 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80011ee:	463b      	mov	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
 80011fc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 80011fe:	4b28      	ldr	r3, [pc, #160]	@ (80012a0 <MX_OCTOSPI1_Init+0xb8>)
 8001200:	4a28      	ldr	r2, [pc, #160]	@ (80012a4 <MX_OCTOSPI1_Init+0xbc>)
 8001202:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 8001204:	4b26      	ldr	r3, [pc, #152]	@ (80012a0 <MX_OCTOSPI1_Init+0xb8>)
 8001206:	2204      	movs	r2, #4
 8001208:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800120a:	4b25      	ldr	r3, [pc, #148]	@ (80012a0 <MX_OCTOSPI1_Init+0xb8>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001210:	4b23      	ldr	r3, [pc, #140]	@ (80012a0 <MX_OCTOSPI1_Init+0xb8>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8001216:	4b22      	ldr	r3, [pc, #136]	@ (80012a0 <MX_OCTOSPI1_Init+0xb8>)
 8001218:	221a      	movs	r2, #26
 800121a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800121c:	4b20      	ldr	r3, [pc, #128]	@ (80012a0 <MX_OCTOSPI1_Init+0xb8>)
 800121e:	2201      	movs	r2, #1
 8001220:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001222:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <MX_OCTOSPI1_Init+0xb8>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001228:	4b1d      	ldr	r3, [pc, #116]	@ (80012a0 <MX_OCTOSPI1_Init+0xb8>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800122e:	4b1c      	ldr	r3, [pc, #112]	@ (80012a0 <MX_OCTOSPI1_Init+0xb8>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8001234:	4b1a      	ldr	r3, [pc, #104]	@ (80012a0 <MX_OCTOSPI1_Init+0xb8>)
 8001236:	2201      	movs	r2, #1
 8001238:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800123a:	4b19      	ldr	r3, [pc, #100]	@ (80012a0 <MX_OCTOSPI1_Init+0xb8>)
 800123c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001240:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001242:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <MX_OCTOSPI1_Init+0xb8>)
 8001244:	2200      	movs	r2, #0
 8001246:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001248:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <MX_OCTOSPI1_Init+0xb8>)
 800124a:	2200      	movs	r2, #0
 800124c:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800124e:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <MX_OCTOSPI1_Init+0xb8>)
 8001250:	2208      	movs	r2, #8
 8001252:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <MX_OCTOSPI1_Init+0xb8>)
 8001256:	2200      	movs	r2, #0
 8001258:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 800125a:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <MX_OCTOSPI1_Init+0xb8>)
 800125c:	2200      	movs	r2, #0
 800125e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001260:	480f      	ldr	r0, [pc, #60]	@ (80012a0 <MX_OCTOSPI1_Init+0xb8>)
 8001262:	f001 f865 	bl	8002330 <HAL_OSPI_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 800126c:	f7ff ffb6 	bl	80011dc <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001270:	2301      	movs	r3, #1
 8001272:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8001274:	2301      	movs	r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001278:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800127c:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800127e:	463b      	mov	r3, r7
 8001280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001284:	4619      	mov	r1, r3
 8001286:	4806      	ldr	r0, [pc, #24]	@ (80012a0 <MX_OCTOSPI1_Init+0xb8>)
 8001288:	f001 fbbe 	bl	8002a08 <HAL_OSPIM_Config>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 8001292:	f7ff ffa3 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	24000088 	.word	0x24000088
 80012a4:	52005000 	.word	0x52005000

080012a8 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b0be      	sub	sp, #248	@ 0xf8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c0:	f107 0320 	add.w	r3, r7, #32
 80012c4:	22c0      	movs	r2, #192	@ 0xc0
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f006 fd2f 	bl	8007d2c <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a67      	ldr	r2, [pc, #412]	@ (8001470 <HAL_OSPI_MspInit+0x1c8>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	f040 80c7 	bne.w	8001468 <HAL_OSPI_MspInit+0x1c0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80012da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_CLKP;
 80012e6:	2330      	movs	r3, #48	@ 0x30
 80012e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 fad6 	bl	80048a0 <HAL_RCCEx_PeriphCLKConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 80012fa:	f7ff ff6f 	bl	80011dc <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80012fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001474 <HAL_OSPI_MspInit+0x1cc>)
 8001300:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001304:	4a5b      	ldr	r2, [pc, #364]	@ (8001474 <HAL_OSPI_MspInit+0x1cc>)
 8001306:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800130a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800130e:	4b59      	ldr	r3, [pc, #356]	@ (8001474 <HAL_OSPI_MspInit+0x1cc>)
 8001310:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001314:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001318:	61fb      	str	r3, [r7, #28]
 800131a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800131c:	4b55      	ldr	r3, [pc, #340]	@ (8001474 <HAL_OSPI_MspInit+0x1cc>)
 800131e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001322:	4a54      	ldr	r2, [pc, #336]	@ (8001474 <HAL_OSPI_MspInit+0x1cc>)
 8001324:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001328:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800132c:	4b51      	ldr	r3, [pc, #324]	@ (8001474 <HAL_OSPI_MspInit+0x1cc>)
 800132e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800133a:	4b4e      	ldr	r3, [pc, #312]	@ (8001474 <HAL_OSPI_MspInit+0x1cc>)
 800133c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001340:	4a4c      	ldr	r2, [pc, #304]	@ (8001474 <HAL_OSPI_MspInit+0x1cc>)
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800134a:	4b4a      	ldr	r3, [pc, #296]	@ (8001474 <HAL_OSPI_MspInit+0x1cc>)
 800134c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b46      	ldr	r3, [pc, #280]	@ (8001474 <HAL_OSPI_MspInit+0x1cc>)
 800135a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800135e:	4a45      	ldr	r2, [pc, #276]	@ (8001474 <HAL_OSPI_MspInit+0x1cc>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001368:	4b42      	ldr	r3, [pc, #264]	@ (8001474 <HAL_OSPI_MspInit+0x1cc>)
 800136a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	4b3f      	ldr	r3, [pc, #252]	@ (8001474 <HAL_OSPI_MspInit+0x1cc>)
 8001378:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800137c:	4a3d      	ldr	r2, [pc, #244]	@ (8001474 <HAL_OSPI_MspInit+0x1cc>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001386:	4b3b      	ldr	r3, [pc, #236]	@ (8001474 <HAL_OSPI_MspInit+0x1cc>)
 8001388:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> OCTOSPIM_P1_IO3
    PA3     ------> OCTOSPIM_P1_CLK
    PB0     ------> OCTOSPIM_P1_IO1
    PB10     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001394:	230c      	movs	r3, #12
 8001396:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80013ac:	2309      	movs	r3, #9
 80013ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80013b6:	4619      	mov	r1, r3
 80013b8:	482f      	ldr	r0, [pc, #188]	@ (8001478 <HAL_OSPI_MspInit+0x1d0>)
 80013ba:	f000 fcff 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013be:	2302      	movs	r3, #2
 80013c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80013d6:	2309      	movs	r3, #9
 80013d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80013e0:	4619      	mov	r1, r3
 80013e2:	4826      	ldr	r0, [pc, #152]	@ (800147c <HAL_OSPI_MspInit+0x1d4>)
 80013e4:	f000 fcea 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013e8:	2308      	movs	r3, #8
 80013ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P1;
 8001400:	2303      	movs	r3, #3
 8001402:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800140a:	4619      	mov	r1, r3
 800140c:	481b      	ldr	r0, [pc, #108]	@ (800147c <HAL_OSPI_MspInit+0x1d4>)
 800140e:	f000 fcd5 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001412:	2301      	movs	r3, #1
 8001414:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 800142a:	230b      	movs	r3, #11
 800142c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001434:	4619      	mov	r1, r3
 8001436:	4812      	ldr	r0, [pc, #72]	@ (8001480 <HAL_OSPI_MspInit+0x1d8>)
 8001438:	f000 fcc0 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800143c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001440:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001456:	2309      	movs	r3, #9
 8001458:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001460:	4619      	mov	r1, r3
 8001462:	4807      	ldr	r0, [pc, #28]	@ (8001480 <HAL_OSPI_MspInit+0x1d8>)
 8001464:	f000 fcaa 	bl	8001dbc <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8001468:	bf00      	nop
 800146a:	37f8      	adds	r7, #248	@ 0xf8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	52005000 	.word	0x52005000
 8001474:	58024400 	.word	0x58024400
 8001478:	58020800 	.word	0x58020800
 800147c:	58020000 	.word	0x58020000
 8001480:	58020400 	.word	0x58020400

08001484 <HAL_OSPI_MspDeInit>:

void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* ospiHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  if(ospiHandle->Instance==OCTOSPI1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a11      	ldr	r2, [pc, #68]	@ (80014d8 <HAL_OSPI_MspDeInit+0x54>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d11c      	bne.n	80014d0 <HAL_OSPI_MspDeInit+0x4c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <HAL_OSPI_MspDeInit+0x58>)
 8001498:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800149c:	4a0f      	ldr	r2, [pc, #60]	@ (80014dc <HAL_OSPI_MspDeInit+0x58>)
 800149e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80014a2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80014a6:	4b0d      	ldr	r3, [pc, #52]	@ (80014dc <HAL_OSPI_MspDeInit+0x58>)
 80014a8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80014ac:	4a0b      	ldr	r2, [pc, #44]	@ (80014dc <HAL_OSPI_MspDeInit+0x58>)
 80014ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80014b2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    PA1     ------> OCTOSPIM_P1_IO3
    PA3     ------> OCTOSPIM_P1_CLK
    PB0     ------> OCTOSPIM_P1_IO1
    PB10     ------> OCTOSPIM_P1_NCS
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 80014b6:	210c      	movs	r1, #12
 80014b8:	4809      	ldr	r0, [pc, #36]	@ (80014e0 <HAL_OSPI_MspDeInit+0x5c>)
 80014ba:	f000 fe2f 	bl	800211c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_3);
 80014be:	210a      	movs	r1, #10
 80014c0:	4808      	ldr	r0, [pc, #32]	@ (80014e4 <HAL_OSPI_MspDeInit+0x60>)
 80014c2:	f000 fe2b 	bl	800211c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_10);
 80014c6:	f240 4101 	movw	r1, #1025	@ 0x401
 80014ca:	4807      	ldr	r0, [pc, #28]	@ (80014e8 <HAL_OSPI_MspDeInit+0x64>)
 80014cc:	f000 fe26 	bl	800211c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	52005000 	.word	0x52005000
 80014dc:	58024400 	.word	0x58024400
 80014e0:	58020800 	.word	0x58020800
 80014e4:	58020000 	.word	0x58020000
 80014e8:	58020400 	.word	0x58020400

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <HAL_MspInit+0x30>)
 80014f4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80014f8:	4a08      	ldr	r2, [pc, #32]	@ (800151c <HAL_MspInit+0x30>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001502:	4b06      	ldr	r3, [pc, #24]	@ (800151c <HAL_MspInit+0x30>)
 8001504:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	58024400 	.word	0x58024400

08001520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <NMI_Handler+0x4>

08001528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <MemManage_Handler+0x4>

08001538 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <BusFault_Handler+0x4>

08001540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <UsageFault_Handler+0x4>

08001548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001576:	f000 fa81 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}

0800157e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	e00a      	b.n	80015a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001590:	f3af 8000 	nop.w
 8001594:	4601      	mov	r1, r0
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	60ba      	str	r2, [r7, #8]
 800159c:	b2ca      	uxtb	r2, r1
 800159e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	3301      	adds	r3, #1
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	dbf0      	blt.n	8001590 <_read+0x12>
  }

  return len;
 80015ae:	687b      	ldr	r3, [r7, #4]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e009      	b.n	80015de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	60ba      	str	r2, [r7, #8]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f9a4 	bl	8001920 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3301      	adds	r3, #1
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	dbf1      	blt.n	80015ca <_write+0x12>
  }
  return len;
 80015e6:	687b      	ldr	r3, [r7, #4]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_close>:

int _close(int file)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001618:	605a      	str	r2, [r3, #4]
  return 0;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <_isatty>:

int _isatty(int file)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001630:	2301      	movs	r3, #1
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800163e:	b480      	push	{r7}
 8001640:	b085      	sub	sp, #20
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001660:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <_sbrk+0x5c>)
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <_sbrk+0x60>)
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800166c:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <_sbrk+0x64>)
 8001676:	4a12      	ldr	r2, [pc, #72]	@ (80016c0 <_sbrk+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	429a      	cmp	r2, r3
 8001686:	d207      	bcs.n	8001698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001688:	f006 fb9e 	bl	8007dc8 <__errno>
 800168c:	4603      	mov	r3, r0
 800168e:	220c      	movs	r2, #12
 8001690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	e009      	b.n	80016ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169e:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	4a05      	ldr	r2, [pc, #20]	@ (80016bc <_sbrk+0x64>)
 80016a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	24100000 	.word	0x24100000
 80016b8:	00000400 	.word	0x00000400
 80016bc:	240000e4 	.word	0x240000e4
 80016c0:	240002d0 	.word	0x240002d0

080016c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016c8:	4b32      	ldr	r3, [pc, #200]	@ (8001794 <SystemInit+0xd0>)
 80016ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ce:	4a31      	ldr	r2, [pc, #196]	@ (8001794 <SystemInit+0xd0>)
 80016d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001798 <SystemInit+0xd4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d807      	bhi.n	80016f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001798 <SystemInit+0xd4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 030f 	bic.w	r3, r3, #15
 80016ec:	4a2a      	ldr	r2, [pc, #168]	@ (8001798 <SystemInit+0xd4>)
 80016ee:	f043 0303 	orr.w	r3, r3, #3
 80016f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016f4:	4b29      	ldr	r3, [pc, #164]	@ (800179c <SystemInit+0xd8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a28      	ldr	r2, [pc, #160]	@ (800179c <SystemInit+0xd8>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001700:	4b26      	ldr	r3, [pc, #152]	@ (800179c <SystemInit+0xd8>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001706:	4b25      	ldr	r3, [pc, #148]	@ (800179c <SystemInit+0xd8>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4924      	ldr	r1, [pc, #144]	@ (800179c <SystemInit+0xd8>)
 800170c:	4b24      	ldr	r3, [pc, #144]	@ (80017a0 <SystemInit+0xdc>)
 800170e:	4013      	ands	r3, r2
 8001710:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001712:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <SystemInit+0xd4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800171e:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <SystemInit+0xd4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 030f 	bic.w	r3, r3, #15
 8001726:	4a1c      	ldr	r2, [pc, #112]	@ (8001798 <SystemInit+0xd4>)
 8001728:	f043 0303 	orr.w	r3, r3, #3
 800172c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800172e:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <SystemInit+0xd8>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001734:	4b19      	ldr	r3, [pc, #100]	@ (800179c <SystemInit+0xd8>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800173a:	4b18      	ldr	r3, [pc, #96]	@ (800179c <SystemInit+0xd8>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001740:	4b16      	ldr	r3, [pc, #88]	@ (800179c <SystemInit+0xd8>)
 8001742:	4a18      	ldr	r2, [pc, #96]	@ (80017a4 <SystemInit+0xe0>)
 8001744:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <SystemInit+0xd8>)
 8001748:	4a17      	ldr	r2, [pc, #92]	@ (80017a8 <SystemInit+0xe4>)
 800174a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800174c:	4b13      	ldr	r3, [pc, #76]	@ (800179c <SystemInit+0xd8>)
 800174e:	4a17      	ldr	r2, [pc, #92]	@ (80017ac <SystemInit+0xe8>)
 8001750:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001752:	4b12      	ldr	r3, [pc, #72]	@ (800179c <SystemInit+0xd8>)
 8001754:	2200      	movs	r2, #0
 8001756:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001758:	4b10      	ldr	r3, [pc, #64]	@ (800179c <SystemInit+0xd8>)
 800175a:	4a14      	ldr	r2, [pc, #80]	@ (80017ac <SystemInit+0xe8>)
 800175c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800175e:	4b0f      	ldr	r3, [pc, #60]	@ (800179c <SystemInit+0xd8>)
 8001760:	2200      	movs	r2, #0
 8001762:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001764:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <SystemInit+0xd8>)
 8001766:	4a11      	ldr	r2, [pc, #68]	@ (80017ac <SystemInit+0xe8>)
 8001768:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800176a:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <SystemInit+0xd8>)
 800176c:	2200      	movs	r2, #0
 800176e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001770:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <SystemInit+0xd8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a09      	ldr	r2, [pc, #36]	@ (800179c <SystemInit+0xd8>)
 8001776:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800177a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800177c:	4b07      	ldr	r3, [pc, #28]	@ (800179c <SystemInit+0xd8>)
 800177e:	2200      	movs	r2, #0
 8001780:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001782:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <SystemInit+0xec>)
 8001784:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001788:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00
 8001798:	52002000 	.word	0x52002000
 800179c:	58024400 	.word	0x58024400
 80017a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80017a4:	02020200 	.word	0x02020200
 80017a8:	01ff0000 	.word	0x01ff0000
 80017ac:	01010280 	.word	0x01010280
 80017b0:	52004000 	.word	0x52004000

080017b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017b8:	4b22      	ldr	r3, [pc, #136]	@ (8001844 <MX_USART1_UART_Init+0x90>)
 80017ba:	4a23      	ldr	r2, [pc, #140]	@ (8001848 <MX_USART1_UART_Init+0x94>)
 80017bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017be:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <MX_USART1_UART_Init+0x90>)
 80017c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001844 <MX_USART1_UART_Init+0x90>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <MX_USART1_UART_Init+0x90>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001844 <MX_USART1_UART_Init+0x90>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001844 <MX_USART1_UART_Init+0x90>)
 80017da:	220c      	movs	r2, #12
 80017dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017de:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <MX_USART1_UART_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e4:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <MX_USART1_UART_Init+0x90>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ea:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <MX_USART1_UART_Init+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017f0:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <MX_USART1_UART_Init+0x90>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f6:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <MX_USART1_UART_Init+0x90>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017fc:	4811      	ldr	r0, [pc, #68]	@ (8001844 <MX_USART1_UART_Init+0x90>)
 80017fe:	f004 fe2f 	bl	8006460 <HAL_UART_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001808:	f7ff fce8 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800180c:	2100      	movs	r1, #0
 800180e:	480d      	ldr	r0, [pc, #52]	@ (8001844 <MX_USART1_UART_Init+0x90>)
 8001810:	f005 ffc9 	bl	80077a6 <HAL_UARTEx_SetTxFifoThreshold>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800181a:	f7ff fcdf 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800181e:	2100      	movs	r1, #0
 8001820:	4808      	ldr	r0, [pc, #32]	@ (8001844 <MX_USART1_UART_Init+0x90>)
 8001822:	f005 fffe 	bl	8007822 <HAL_UARTEx_SetRxFifoThreshold>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800182c:	f7ff fcd6 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001830:	4804      	ldr	r0, [pc, #16]	@ (8001844 <MX_USART1_UART_Init+0x90>)
 8001832:	f005 ff7f 	bl	8007734 <HAL_UARTEx_DisableFifoMode>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800183c:	f7ff fcce 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	240000e8 	.word	0x240000e8
 8001848:	40011000 	.word	0x40011000

0800184c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b0ba      	sub	sp, #232	@ 0xe8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001864:	f107 0310 	add.w	r3, r7, #16
 8001868:	22c0      	movs	r2, #192	@ 0xc0
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f006 fa5d 	bl	8007d2c <memset>
  if(uartHandle->Instance==USART1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a27      	ldr	r2, [pc, #156]	@ (8001914 <HAL_UART_MspInit+0xc8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d146      	bne.n	800190a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800187c:	f04f 0201 	mov.w	r2, #1
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800188e:	f107 0310 	add.w	r3, r7, #16
 8001892:	4618      	mov	r0, r3
 8001894:	f003 f804 	bl	80048a0 <HAL_RCCEx_PeriphCLKConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800189e:	f7ff fc9d 	bl	80011dc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001918 <HAL_UART_MspInit+0xcc>)
 80018a4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80018a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001918 <HAL_UART_MspInit+0xcc>)
 80018aa:	f043 0310 	orr.w	r3, r3, #16
 80018ae:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80018b2:	4b19      	ldr	r3, [pc, #100]	@ (8001918 <HAL_UART_MspInit+0xcc>)
 80018b4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c0:	4b15      	ldr	r3, [pc, #84]	@ (8001918 <HAL_UART_MspInit+0xcc>)
 80018c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018c6:	4a14      	ldr	r2, [pc, #80]	@ (8001918 <HAL_UART_MspInit+0xcc>)
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <HAL_UART_MspInit+0xcc>)
 80018d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbgUART_TX_Pin|dbgUART_RX_Pin;
 80018de:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80018e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80018f8:	2304      	movs	r3, #4
 80018fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	@ (800191c <HAL_UART_MspInit+0xd0>)
 8001906:	f000 fa59 	bl	8001dbc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800190a:	bf00      	nop
 800190c:	37e8      	adds	r7, #232	@ 0xe8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40011000 	.word	0x40011000
 8001918:	58024400 	.word	0x58024400
 800191c:	58020400 	.word	0x58020400

08001920 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
//printf to uart redirection
void __io_putchar(uint8_t ch) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 800192a:	1df9      	adds	r1, r7, #7
 800192c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001930:	2201      	movs	r2, #1
 8001932:	4803      	ldr	r0, [pc, #12]	@ (8001940 <__io_putchar+0x20>)
 8001934:	f004 fde4 	bl	8006500 <HAL_UART_Transmit>
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	240000e8 	.word	0x240000e8

08001944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800197c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001948:	f7ff febc 	bl	80016c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800194c:	480c      	ldr	r0, [pc, #48]	@ (8001980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800194e:	490d      	ldr	r1, [pc, #52]	@ (8001984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001950:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001964:	4c0a      	ldr	r4, [pc, #40]	@ (8001990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001972:	f006 fa2f 	bl	8007dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001976:	f7ff fb31 	bl	8000fdc <main>
  bx  lr
 800197a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800197c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001980:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001984:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001988:	08008320 	.word	0x08008320
  ldr r2, =_sbss
 800198c:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001990:	240002cc 	.word	0x240002cc

08001994 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC_IRQHandler>
	...

08001998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199e:	2003      	movs	r0, #3
 80019a0:	f000 f962 	bl	8001c68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80019a4:	f002 fda6 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <HAL_Init+0x68>)
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	0a1b      	lsrs	r3, r3, #8
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	4913      	ldr	r1, [pc, #76]	@ (8001a04 <HAL_Init+0x6c>)
 80019b6:	5ccb      	ldrb	r3, [r1, r3]
 80019b8:	f003 031f 	and.w	r3, r3, #31
 80019bc:	fa22 f303 	lsr.w	r3, r2, r3
 80019c0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80019c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <HAL_Init+0x68>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001a04 <HAL_Init+0x6c>)
 80019cc:	5cd3      	ldrb	r3, [r2, r3]
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	fa22 f303 	lsr.w	r3, r2, r3
 80019d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001a08 <HAL_Init+0x70>)
 80019da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019dc:	4a0b      	ldr	r2, [pc, #44]	@ (8001a0c <HAL_Init+0x74>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019e2:	200f      	movs	r0, #15
 80019e4:	f000 f814 	bl	8001a10 <HAL_InitTick>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e002      	b.n	80019f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019f2:	f7ff fd7b 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	58024400 	.word	0x58024400
 8001a04:	080082d8 	.word	0x080082d8
 8001a08:	24000004 	.word	0x24000004
 8001a0c:	24000000 	.word	0x24000000

08001a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a18:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <HAL_InitTick+0x60>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e021      	b.n	8001a68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a24:	4b13      	ldr	r3, [pc, #76]	@ (8001a74 <HAL_InitTick+0x64>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <HAL_InitTick+0x60>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 f939 	bl	8001cb2 <HAL_SYSTICK_Config>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00e      	b.n	8001a68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b0f      	cmp	r3, #15
 8001a4e:	d80a      	bhi.n	8001a66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a50:	2200      	movs	r2, #0
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f000 f911 	bl	8001c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a5c:	4a06      	ldr	r2, [pc, #24]	@ (8001a78 <HAL_InitTick+0x68>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	2400000c 	.word	0x2400000c
 8001a74:	24000000 	.word	0x24000000
 8001a78:	24000008 	.word	0x24000008

08001a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	2400000c 	.word	0x2400000c
 8001aa0:	2400017c 	.word	0x2400017c

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	@ (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	2400017c 	.word	0x2400017c

08001abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac4:	f7ff ffee 	bl	8001aa4 <HAL_GetTick>
 8001ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d005      	beq.n	8001ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b00 <HAL_Delay+0x44>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ae2:	bf00      	nop
 8001ae4:	f7ff ffde 	bl	8001aa4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d8f7      	bhi.n	8001ae4 <HAL_Delay+0x28>
  {
  }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2400000c 	.word	0x2400000c

08001b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <__NVIC_SetPriorityGrouping+0x40>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b20:	4013      	ands	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b32:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <__NVIC_SetPriorityGrouping+0x40>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	60d3      	str	r3, [r2, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00
 8001b48:	05fa0000 	.word	0x05fa0000

08001b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <__NVIC_GetPriorityGrouping+0x18>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	f003 0307 	and.w	r3, r3, #7
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	@ (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	@ (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	@ 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
         );
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	@ 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c34:	d301      	bcc.n	8001c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00f      	b.n	8001c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c64 <SysTick_Config+0x40>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c42:	210f      	movs	r1, #15
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f7ff ff8e 	bl	8001b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c4c:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <SysTick_Config+0x40>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c52:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <SysTick_Config+0x40>)
 8001c54:	2207      	movs	r2, #7
 8001c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	e000e010 	.word	0xe000e010

08001c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ff47 	bl	8001b04 <__NVIC_SetPriorityGrouping>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8c:	f7ff ff5e 	bl	8001b4c <__NVIC_GetPriorityGrouping>
 8001c90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff ff90 	bl	8001bbc <NVIC_EncodePriority>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff5f 	bl	8001b68 <__NVIC_SetPriority>
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffb2 	bl	8001c24 <SysTick_Config>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001cd0:	f3bf 8f5f 	dmb	sy
}
 8001cd4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001cd6:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <HAL_MPU_Disable+0x28>)
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cda:	4a06      	ldr	r2, [pc, #24]	@ (8001cf4 <HAL_MPU_Disable+0x28>)
 8001cdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ce0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ce2:	4b05      	ldr	r3, [pc, #20]	@ (8001cf8 <HAL_MPU_Disable+0x2c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	605a      	str	r2, [r3, #4]
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00
 8001cf8:	e000ed90 	.word	0xe000ed90

08001cfc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d04:	4a0b      	ldr	r2, [pc, #44]	@ (8001d34 <HAL_MPU_Enable+0x38>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <HAL_MPU_Enable+0x3c>)
 8001d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d12:	4a09      	ldr	r2, [pc, #36]	@ (8001d38 <HAL_MPU_Enable+0x3c>)
 8001d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d18:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d1a:	f3bf 8f4f 	dsb	sy
}
 8001d1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d20:	f3bf 8f6f 	isb	sy
}
 8001d24:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed90 	.word	0xe000ed90
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	785a      	ldrb	r2, [r3, #1]
 8001d48:	4b1b      	ldr	r3, [pc, #108]	@ (8001db8 <HAL_MPU_ConfigRegion+0x7c>)
 8001d4a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <HAL_MPU_ConfigRegion+0x7c>)
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	4a19      	ldr	r2, [pc, #100]	@ (8001db8 <HAL_MPU_ConfigRegion+0x7c>)
 8001d52:	f023 0301 	bic.w	r3, r3, #1
 8001d56:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001d58:	4a17      	ldr	r2, [pc, #92]	@ (8001db8 <HAL_MPU_ConfigRegion+0x7c>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	7b1b      	ldrb	r3, [r3, #12]
 8001d64:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	7adb      	ldrb	r3, [r3, #11]
 8001d6a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	7a9b      	ldrb	r3, [r3, #10]
 8001d72:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7b5b      	ldrb	r3, [r3, #13]
 8001d7a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7b9b      	ldrb	r3, [r3, #14]
 8001d82:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	7bdb      	ldrb	r3, [r3, #15]
 8001d8a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	7a5b      	ldrb	r3, [r3, #9]
 8001d92:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7a1b      	ldrb	r3, [r3, #8]
 8001d9a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d9c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	7812      	ldrb	r2, [r2, #0]
 8001da2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001da4:	4a04      	ldr	r2, [pc, #16]	@ (8001db8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001da6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001da8:	6113      	str	r3, [r2, #16]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000ed90 	.word	0xe000ed90

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	@ 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001dca:	4b89      	ldr	r3, [pc, #548]	@ (8001ff0 <HAL_GPIO_Init+0x234>)
 8001dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dce:	e194      	b.n	80020fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8186 	beq.w	80020f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d005      	beq.n	8001e00 <HAL_GPIO_Init+0x44>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d130      	bne.n	8001e62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e36:	2201      	movs	r2, #1
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	f003 0201 	and.w	r2, r3, #1
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d017      	beq.n	8001e9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d123      	bne.n	8001ef2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	08da      	lsrs	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3208      	adds	r2, #8
 8001eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	08da      	lsrs	r2, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3208      	adds	r2, #8
 8001eec:	69b9      	ldr	r1, [r7, #24]
 8001eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0203 	and.w	r2, r3, #3
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 80e0 	beq.w	80020f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f34:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff4 <HAL_GPIO_Init+0x238>)
 8001f36:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001f3a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ff4 <HAL_GPIO_Init+0x238>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001f44:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff4 <HAL_GPIO_Init+0x238>)
 8001f46:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f52:	4a29      	ldr	r2, [pc, #164]	@ (8001ff8 <HAL_GPIO_Init+0x23c>)
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	3302      	adds	r3, #2
 8001f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	220f      	movs	r2, #15
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a20      	ldr	r2, [pc, #128]	@ (8001ffc <HAL_GPIO_Init+0x240>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d052      	beq.n	8002024 <HAL_GPIO_Init+0x268>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a1f      	ldr	r2, [pc, #124]	@ (8002000 <HAL_GPIO_Init+0x244>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d031      	beq.n	8001fea <HAL_GPIO_Init+0x22e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a1e      	ldr	r2, [pc, #120]	@ (8002004 <HAL_GPIO_Init+0x248>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d02b      	beq.n	8001fe6 <HAL_GPIO_Init+0x22a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a1d      	ldr	r2, [pc, #116]	@ (8002008 <HAL_GPIO_Init+0x24c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d025      	beq.n	8001fe2 <HAL_GPIO_Init+0x226>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a1c      	ldr	r2, [pc, #112]	@ (800200c <HAL_GPIO_Init+0x250>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d01f      	beq.n	8001fde <HAL_GPIO_Init+0x222>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8002010 <HAL_GPIO_Init+0x254>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d019      	beq.n	8001fda <HAL_GPIO_Init+0x21e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a1a      	ldr	r2, [pc, #104]	@ (8002014 <HAL_GPIO_Init+0x258>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <HAL_GPIO_Init+0x21a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a19      	ldr	r2, [pc, #100]	@ (8002018 <HAL_GPIO_Init+0x25c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00d      	beq.n	8001fd2 <HAL_GPIO_Init+0x216>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a18      	ldr	r2, [pc, #96]	@ (800201c <HAL_GPIO_Init+0x260>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d007      	beq.n	8001fce <HAL_GPIO_Init+0x212>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a17      	ldr	r2, [pc, #92]	@ (8002020 <HAL_GPIO_Init+0x264>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_GPIO_Init+0x20e>
 8001fc6:	2309      	movs	r3, #9
 8001fc8:	e02d      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fca:	230a      	movs	r3, #10
 8001fcc:	e02b      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fce:	2308      	movs	r3, #8
 8001fd0:	e029      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	e027      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fd6:	2306      	movs	r3, #6
 8001fd8:	e025      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fda:	2305      	movs	r3, #5
 8001fdc:	e023      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fde:	2304      	movs	r3, #4
 8001fe0:	e021      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e01f      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e01d      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e01b      	b.n	8002026 <HAL_GPIO_Init+0x26a>
 8001fee:	bf00      	nop
 8001ff0:	58000080 	.word	0x58000080
 8001ff4:	58024400 	.word	0x58024400
 8001ff8:	58000400 	.word	0x58000400
 8001ffc:	58020000 	.word	0x58020000
 8002000:	58020400 	.word	0x58020400
 8002004:	58020800 	.word	0x58020800
 8002008:	58020c00 	.word	0x58020c00
 800200c:	58021000 	.word	0x58021000
 8002010:	58021400 	.word	0x58021400
 8002014:	58021800 	.word	0x58021800
 8002018:	58021c00 	.word	0x58021c00
 800201c:	58022000 	.word	0x58022000
 8002020:	58022400 	.word	0x58022400
 8002024:	2300      	movs	r3, #0
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	f002 0203 	and.w	r2, r2, #3
 800202c:	0092      	lsls	r2, r2, #2
 800202e:	4093      	lsls	r3, r2
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002036:	4938      	ldr	r1, [pc, #224]	@ (8002118 <HAL_GPIO_Init+0x35c>)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3302      	adds	r3, #2
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800206a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002072:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002098:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	3301      	adds	r3, #1
 80020f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	f47f ae63 	bne.w	8001dd0 <HAL_GPIO_Init+0x14>
  }
}
 800210a:	bf00      	nop
 800210c:	bf00      	nop
 800210e:	3724      	adds	r7, #36	@ 0x24
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	58000400 	.word	0x58000400

0800211c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800212a:	4b75      	ldr	r3, [pc, #468]	@ (8002300 <HAL_GPIO_DeInit+0x1e4>)
 800212c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800212e:	e0d9      	b.n	80022e4 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8002130:	2201      	movs	r2, #1
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	4013      	ands	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80cc 	beq.w	80022de <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002146:	4a6f      	ldr	r2, [pc, #444]	@ (8002304 <HAL_GPIO_DeInit+0x1e8>)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3302      	adds	r3, #2
 800214e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002152:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	220f      	movs	r2, #15
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	4013      	ands	r3, r2
 8002166:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a67      	ldr	r2, [pc, #412]	@ (8002308 <HAL_GPIO_DeInit+0x1ec>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d037      	beq.n	80021e0 <HAL_GPIO_DeInit+0xc4>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a66      	ldr	r2, [pc, #408]	@ (800230c <HAL_GPIO_DeInit+0x1f0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d031      	beq.n	80021dc <HAL_GPIO_DeInit+0xc0>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a65      	ldr	r2, [pc, #404]	@ (8002310 <HAL_GPIO_DeInit+0x1f4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d02b      	beq.n	80021d8 <HAL_GPIO_DeInit+0xbc>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a64      	ldr	r2, [pc, #400]	@ (8002314 <HAL_GPIO_DeInit+0x1f8>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d025      	beq.n	80021d4 <HAL_GPIO_DeInit+0xb8>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a63      	ldr	r2, [pc, #396]	@ (8002318 <HAL_GPIO_DeInit+0x1fc>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d01f      	beq.n	80021d0 <HAL_GPIO_DeInit+0xb4>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a62      	ldr	r2, [pc, #392]	@ (800231c <HAL_GPIO_DeInit+0x200>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d019      	beq.n	80021cc <HAL_GPIO_DeInit+0xb0>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a61      	ldr	r2, [pc, #388]	@ (8002320 <HAL_GPIO_DeInit+0x204>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d013      	beq.n	80021c8 <HAL_GPIO_DeInit+0xac>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a60      	ldr	r2, [pc, #384]	@ (8002324 <HAL_GPIO_DeInit+0x208>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00d      	beq.n	80021c4 <HAL_GPIO_DeInit+0xa8>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a5f      	ldr	r2, [pc, #380]	@ (8002328 <HAL_GPIO_DeInit+0x20c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d007      	beq.n	80021c0 <HAL_GPIO_DeInit+0xa4>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a5e      	ldr	r2, [pc, #376]	@ (800232c <HAL_GPIO_DeInit+0x210>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d101      	bne.n	80021bc <HAL_GPIO_DeInit+0xa0>
 80021b8:	2309      	movs	r3, #9
 80021ba:	e012      	b.n	80021e2 <HAL_GPIO_DeInit+0xc6>
 80021bc:	230a      	movs	r3, #10
 80021be:	e010      	b.n	80021e2 <HAL_GPIO_DeInit+0xc6>
 80021c0:	2308      	movs	r3, #8
 80021c2:	e00e      	b.n	80021e2 <HAL_GPIO_DeInit+0xc6>
 80021c4:	2307      	movs	r3, #7
 80021c6:	e00c      	b.n	80021e2 <HAL_GPIO_DeInit+0xc6>
 80021c8:	2306      	movs	r3, #6
 80021ca:	e00a      	b.n	80021e2 <HAL_GPIO_DeInit+0xc6>
 80021cc:	2305      	movs	r3, #5
 80021ce:	e008      	b.n	80021e2 <HAL_GPIO_DeInit+0xc6>
 80021d0:	2304      	movs	r3, #4
 80021d2:	e006      	b.n	80021e2 <HAL_GPIO_DeInit+0xc6>
 80021d4:	2303      	movs	r3, #3
 80021d6:	e004      	b.n	80021e2 <HAL_GPIO_DeInit+0xc6>
 80021d8:	2302      	movs	r3, #2
 80021da:	e002      	b.n	80021e2 <HAL_GPIO_DeInit+0xc6>
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <HAL_GPIO_DeInit+0xc6>
 80021e0:	2300      	movs	r3, #0
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	f002 0203 	and.w	r2, r2, #3
 80021e8:	0092      	lsls	r2, r2, #2
 80021ea:	4093      	lsls	r3, r2
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d136      	bne.n	8002260 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	401a      	ands	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	401a      	ands	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800220e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	43db      	mvns	r3, r3
 8002218:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800221c:	4013      	ands	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	43db      	mvns	r3, r3
 800222a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800222e:	4013      	ands	r3, r2
 8002230:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	220f      	movs	r2, #15
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002242:	4a30      	ldr	r2, [pc, #192]	@ (8002304 <HAL_GPIO_DeInit+0x1e8>)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	43da      	mvns	r2, r3
 8002252:	482c      	ldr	r0, [pc, #176]	@ (8002304 <HAL_GPIO_DeInit+0x1e8>)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	400a      	ands	r2, r1
 800225a:	3302      	adds	r3, #2
 800225c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	2103      	movs	r1, #3
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	08da      	lsrs	r2, r3, #3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3208      	adds	r2, #8
 800227c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	220f      	movs	r2, #15
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	08d2      	lsrs	r2, r2, #3
 8002294:	4019      	ands	r1, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3208      	adds	r2, #8
 800229a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2103      	movs	r1, #3
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	401a      	ands	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	2101      	movs	r1, #1
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	fa01 f303 	lsl.w	r3, r1, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	401a      	ands	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2103      	movs	r1, #3
 80022d2:	fa01 f303 	lsl.w	r3, r1, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	401a      	ands	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	609a      	str	r2, [r3, #8]
    }

    position++;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3301      	adds	r3, #1
 80022e2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f47f af1f 	bne.w	8002130 <HAL_GPIO_DeInit+0x14>
  }
}
 80022f2:	bf00      	nop
 80022f4:	bf00      	nop
 80022f6:	371c      	adds	r7, #28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	58000080 	.word	0x58000080
 8002304:	58000400 	.word	0x58000400
 8002308:	58020000 	.word	0x58020000
 800230c:	58020400 	.word	0x58020400
 8002310:	58020800 	.word	0x58020800
 8002314:	58020c00 	.word	0x58020c00
 8002318:	58021000 	.word	0x58021000
 800231c:	58021400 	.word	0x58021400
 8002320:	58021800 	.word	0x58021800
 8002324:	58021c00 	.word	0x58021c00
 8002328:	58022000 	.word	0x58022000
 800232c:	58022400 	.word	0x58022400

08002330 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af02      	add	r7, sp, #8
 8002336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff fbb2 	bl	8001aa4 <HAL_GetTick>
 8002340:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d102      	bne.n	800234e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	e0a5      	b.n	800249a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002358:	2b00      	cmp	r3, #0
 800235a:	f040 809e 	bne.w	800249a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe ffa2 	bl	80012a8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002364:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 fb3d 	bl	80029e8 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	4b4b      	ldr	r3, [pc, #300]	@ (80024a4 <HAL_OSPI_Init+0x174>)
 8002376:	4013      	ands	r3, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	68d1      	ldr	r1, [r2, #12]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6912      	ldr	r2, [r2, #16]
 8002380:	3a01      	subs	r2, #1
 8002382:	0412      	lsls	r2, r2, #16
 8002384:	4311      	orrs	r1, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6952      	ldr	r2, [r2, #20]
 800238a:	3a01      	subs	r2, #1
 800238c:	0212      	lsls	r2, r2, #8
 800238e:	4311      	orrs	r1, r2
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002394:	4311      	orrs	r1, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	69d2      	ldr	r2, [r2, #28]
 800239a:	4311      	orrs	r1, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1a      	ldr	r2, [r3, #32]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023d4:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	021a      	lsls	r2, r3, #8
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2200      	movs	r2, #0
 80023fa:	2120      	movs	r1, #32
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 ffeb 	bl	80033d8 <OSPI_WaitFlagStateUntilTimeout>
 8002402:	4603      	mov	r3, r0
 8002404:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d146      	bne.n	800249a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241a:	1e5a      	subs	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002442:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0201 	orr.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d107      	bne.n	8002482 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0202 	orr.w	r2, r2, #2
 8002480:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800248a:	d103      	bne.n	8002494 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	651a      	str	r2, [r3, #80]	@ 0x50
 8002492:	e002      	b.n	800249a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2202      	movs	r2, #2
 8002498:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800249a:	7bfb      	ldrb	r3, [r7, #15]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	f8e0f8f4 	.word	0xf8e0f8f4

080024a8 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	73fb      	strb	r3, [r7, #15]
 80024be:	e015      	b.n	80024ec <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0202 	bic.w	r2, r2, #2
 80024de:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7fe ffcf 	bl	8001484 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  return status;
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b08a      	sub	sp, #40	@ 0x28
 80024fa:	af02      	add	r7, sp, #8
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8002502:	f7ff facf 	bl	8001aa4 <HAL_GetTick>
 8002506:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800250c:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002512:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d104      	bne.n	8002524 <HAL_OSPI_Command+0x2e>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002522:	d115      	bne.n	8002550 <HAL_OSPI_Command+0x5a>
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	2b14      	cmp	r3, #20
 8002528:	d107      	bne.n	800253a <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d00e      	beq.n	8002550 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b03      	cmp	r3, #3
 8002538:	d00a      	beq.n	8002550 <HAL_OSPI_Command+0x5a>
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b24      	cmp	r3, #36	@ 0x24
 800253e:	d15b      	bne.n	80025f8 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d003      	beq.n	8002550 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800254c:	2b03      	cmp	r3, #3
 800254e:	d153      	bne.n	80025f8 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2200      	movs	r2, #0
 8002558:	2120      	movs	r1, #32
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 ff3c 	bl	80033d8 <OSPI_WaitFlagStateUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8002564:	7ffb      	ldrb	r3, [r7, #31]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d14c      	bne.n	8002604 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 ff68 	bl	8003448 <OSPI_ConfigCmd>
 8002578:	4603      	mov	r3, r0
 800257a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800257c:	7ffb      	ldrb	r3, [r7, #31]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d140      	bne.n	8002604 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10e      	bne.n	80025a8 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2201      	movs	r2, #1
 8002592:	2102      	movs	r1, #2
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 ff1f 	bl	80033d8 <OSPI_WaitFlagStateUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2202      	movs	r2, #2
 80025a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80025a6:	e02d      	b.n	8002604 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d103      	bne.n	80025b8 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2204      	movs	r2, #4
 80025b4:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80025b6:	e025      	b.n	8002604 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d10b      	bne.n	80025d8 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025c4:	2b24      	cmp	r3, #36	@ 0x24
 80025c6:	d103      	bne.n	80025d0 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2204      	movs	r2, #4
 80025cc:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80025ce:	e019      	b.n	8002604 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2214      	movs	r2, #20
 80025d4:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80025d6:	e015      	b.n	8002604 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d111      	bne.n	8002604 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025e4:	2b14      	cmp	r3, #20
 80025e6:	d103      	bne.n	80025f0 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2204      	movs	r2, #4
 80025ec:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80025ee:	e009      	b.n	8002604 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2224      	movs	r2, #36	@ 0x24
 80025f4:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80025f6:	e005      	b.n	8002604 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2210      	movs	r2, #16
 8002600:	655a      	str	r2, [r3, #84]	@ 0x54
 8002602:	e000      	b.n	8002606 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8002604:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002606:	7ffb      	ldrb	r3, [r7, #31]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3720      	adds	r7, #32
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	@ 0x28
 8002614:	af02      	add	r7, sp, #8
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800261c:	f7ff fa42 	bl	8001aa4 <HAL_GetTick>
 8002620:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	3350      	adds	r3, #80	@ 0x50
 8002628:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d105      	bne.n	800263c <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2208      	movs	r2, #8
 8002638:	655a      	str	r2, [r3, #84]	@ 0x54
 800263a:	e057      	b.n	80026ec <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002640:	2b04      	cmp	r3, #4
 8002642:	d14e      	bne.n	80026e2 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800266c:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2201      	movs	r2, #1
 8002676:	2104      	movs	r1, #4
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fead 	bl	80033d8 <OSPI_WaitFlagStateUntilTimeout>
 800267e:	4603      	mov	r3, r0
 8002680:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8002682:	7ffb      	ldrb	r3, [r7, #31]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d113      	bne.n	80026b0 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	781a      	ldrb	r2, [r3, #0]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a0:	1e5a      	subs	r2, r3, #1
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1df      	bne.n	800266e <HAL_OSPI_Transmit+0x5e>
 80026ae:	e000      	b.n	80026b2 <HAL_OSPI_Transmit+0xa2>
          break;
 80026b0:	bf00      	nop

      if (status == HAL_OK)
 80026b2:	7ffb      	ldrb	r3, [r7, #31]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d119      	bne.n	80026ec <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	2201      	movs	r2, #1
 80026c0:	2102      	movs	r1, #2
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 fe88 	bl	80033d8 <OSPI_WaitFlagStateUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80026cc:	7ffb      	ldrb	r3, [r7, #31]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10c      	bne.n	80026ec <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2202      	movs	r2, #2
 80026d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2202      	movs	r2, #2
 80026de:	651a      	str	r2, [r3, #80]	@ 0x50
 80026e0:	e004      	b.n	80026ec <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2210      	movs	r2, #16
 80026ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 80026ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3720      	adds	r7, #32
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b08c      	sub	sp, #48	@ 0x30
 80026fa:	af02      	add	r7, sp, #8
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002702:	f7ff f9cf 	bl	8001aa4 <HAL_GetTick>
 8002706:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3350      	adds	r3, #80	@ 0x50
 800270e:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002716:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002720:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d106      	bne.n	8002736 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2208      	movs	r2, #8
 8002732:	655a      	str	r2, [r3, #84]	@ 0x54
 8002734:	e07c      	b.n	8002830 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800273a:	2b04      	cmp	r3, #4
 800273c:	d172      	bne.n	8002824 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800276a:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002774:	d104      	bne.n	8002780 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	649a      	str	r2, [r3, #72]	@ 0x48
 800277e:	e011      	b.n	80027a4 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002788:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800278c:	2b00      	cmp	r3, #0
 800278e:	d004      	beq.n	800279a <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	649a      	str	r2, [r3, #72]	@ 0x48
 8002798:	e004      	b.n	80027a4 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	2201      	movs	r2, #1
 80027ac:	2106      	movs	r1, #6
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fe12 	bl	80033d8 <OSPI_WaitFlagStateUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 80027ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d114      	bne.n	80027ec <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	7812      	ldrb	r2, [r2, #0]
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027dc:	1e5a      	subs	r2, r3, #1
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1dc      	bne.n	80027a4 <HAL_OSPI_Receive+0xae>
 80027ea:	e000      	b.n	80027ee <HAL_OSPI_Receive+0xf8>
          break;
 80027ec:	bf00      	nop

      if (status == HAL_OK)
 80027ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d11c      	bne.n	8002830 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	2201      	movs	r2, #1
 80027fe:	2102      	movs	r1, #2
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 fde9 	bl	80033d8 <OSPI_WaitFlagStateUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 800280c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10d      	bne.n	8002830 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2202      	movs	r2, #2
 800281a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2202      	movs	r2, #2
 8002820:	651a      	str	r2, [r3, #80]	@ 0x50
 8002822:	e005      	b.n	8002830 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2210      	movs	r2, #16
 800282e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8002830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002834:	4618      	mov	r0, r3
 8002836:	3728      	adds	r7, #40	@ 0x28
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	@ 0x28
 8002840:	af02      	add	r7, sp, #8
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002848:	f7ff f92c 	bl	8001aa4 <HAL_GetTick>
 800284c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002854:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800285e:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002864:	2b04      	cmp	r3, #4
 8002866:	d164      	bne.n	8002932 <HAL_OSPI_AutoPolling+0xf6>
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002870:	d15f      	bne.n	8002932 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	2200      	movs	r2, #0
 800287a:	2120      	movs	r1, #32
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fdab 	bl	80033d8 <OSPI_WaitFlagStateUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8002886:	7ffb      	ldrb	r3, [r7, #31]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d158      	bne.n	800293e <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	6852      	ldr	r2, [r2, #4]
 80028a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	6912      	ldr	r2, [r2, #16]
 80028ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	6899      	ldr	r1, [r3, #8]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	430b      	orrs	r3, r1
 80028c4:	431a      	orrs	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80028ce:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028d8:	d104      	bne.n	80028e4 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	649a      	str	r2, [r3, #72]	@ 0x48
 80028e2:	e011      	b.n	8002908 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80028ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d004      	beq.n	80028fe <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	649a      	str	r2, [r3, #72]	@ 0x48
 80028fc:	e004      	b.n	8002908 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2201      	movs	r2, #1
 8002910:	2108      	movs	r1, #8
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 fd60 	bl	80033d8 <OSPI_WaitFlagStateUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800291c:	7ffb      	ldrb	r3, [r7, #31]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10d      	bne.n	800293e <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2208      	movs	r2, #8
 8002928:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2202      	movs	r2, #2
 800292e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8002930:	e005      	b.n	800293e <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2210      	movs	r2, #16
 800293a:	655a      	str	r2, [r3, #84]	@ 0x54
 800293c:	e000      	b.n	8002940 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 800293e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002940:	7ffb      	ldrb	r3, [r7, #31]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3720      	adds	r7, #32
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af02      	add	r7, sp, #8
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002956:	f7ff f8a5 	bl	8001aa4 <HAL_GetTick>
 800295a:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002960:	2b04      	cmp	r3, #4
 8002962:	d134      	bne.n	80029ce <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2200      	movs	r2, #0
 800296e:	2120      	movs	r1, #32
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fd31 	bl	80033d8 <OSPI_WaitFlagStateUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d12b      	bne.n	80029d8 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2288      	movs	r2, #136	@ 0x88
 8002984:	651a      	str	r2, [r3, #80]	@ 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b08      	cmp	r3, #8
 800298c:	d111      	bne.n	80029b2 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	6852      	ldr	r2, [r2, #4]
 8002996:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2210      	movs	r2, #16
 80029a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80029b0:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b0a      	ldr	r3, [pc, #40]	@ (80029e4 <HAL_OSPI_MemoryMapped+0x98>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	e004      	b.n	80029d8 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2210      	movs	r2, #16
 80029d6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	cffffff7 	.word	0xcffffff7

080029e8 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b094      	sub	sp, #80	@ 0x50
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a9d      	ldr	r2, [pc, #628]	@ (8002c9c <HAL_OSPIM_Config+0x294>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d105      	bne.n	8002a36 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002a34:	e004      	b.n	8002a40 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8002a36:	2301      	movs	r3, #1
 8002a38:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002a40:	2300      	movs	r3, #0
 8002a42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002a46:	e01d      	b.n	8002a84 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8002a48:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	b2d8      	uxtb	r0, r3
 8002a50:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8002a54:	f107 0114 	add.w	r1, r7, #20
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	440b      	add	r3, r1
 8002a62:	4619      	mov	r1, r3
 8002a64:	f000 fe6a 	bl	800373c <OSPIM_GetConfig>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2208      	movs	r2, #8
 8002a78:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002a7a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002a84:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d9dd      	bls.n	8002a48 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8002a8c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f040 8495 	bne.w	80033c0 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8002a96:	4b81      	ldr	r3, [pc, #516]	@ (8002c9c <HAL_OSPIM_Config+0x294>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00b      	beq.n	8002aba <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002aa2:	4b7e      	ldr	r3, [pc, #504]	@ (8002c9c <HAL_OSPIM_Config+0x294>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a7d      	ldr	r2, [pc, #500]	@ (8002c9c <HAL_OSPIM_Config+0x294>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002aae:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8002aba:	4b79      	ldr	r3, [pc, #484]	@ (8002ca0 <HAL_OSPIM_Config+0x298>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002ac6:	4b76      	ldr	r3, [pc, #472]	@ (8002ca0 <HAL_OSPIM_Config+0x298>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a75      	ldr	r2, [pc, #468]	@ (8002ca0 <HAL_OSPIM_Config+0x298>)
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8002ad2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002ad6:	f043 0302 	orr.w	r3, r3, #2
 8002ada:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8002ade:	4971      	ldr	r1, [pc, #452]	@ (8002ca4 <HAL_OSPIM_Config+0x29c>)
 8002ae0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	3350      	adds	r3, #80	@ 0x50
 8002aec:	443b      	add	r3, r7
 8002aee:	3b34      	subs	r3, #52	@ 0x34
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	6859      	ldr	r1, [r3, #4]
 8002afa:	486a      	ldr	r0, [pc, #424]	@ (8002ca4 <HAL_OSPIM_Config+0x29c>)
 8002afc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002afe:	4613      	mov	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4413      	add	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	3350      	adds	r3, #80	@ 0x50
 8002b08:	443b      	add	r3, r7
 8002b0a:	3b34      	subs	r3, #52	@ 0x34
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4403      	add	r3, r0
 8002b18:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002b1a:	4b62      	ldr	r3, [pc, #392]	@ (8002ca4 <HAL_OSPIM_Config+0x29c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 80c0 	beq.w	8002ca8 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002b28:	4b5e      	ldr	r3, [pc, #376]	@ (8002ca4 <HAL_OSPIM_Config+0x29c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ca4 <HAL_OSPIM_Config+0x29c>)
 8002b2e:	f023 0301 	bic.w	r3, r3, #1
 8002b32:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8002b34:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 8162 	bne.w	8002e02 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8002b3e:	4959      	ldr	r1, [pc, #356]	@ (8002ca4 <HAL_OSPIM_Config+0x29c>)
 8002b40:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	3350      	adds	r3, #80	@ 0x50
 8002b4e:	443b      	add	r3, r7
 8002b50:	3b3c      	subs	r3, #60	@ 0x3c
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	6859      	ldr	r1, [r3, #4]
 8002b5c:	4851      	ldr	r0, [pc, #324]	@ (8002ca4 <HAL_OSPIM_Config+0x29c>)
 8002b5e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002b62:	4613      	mov	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	3350      	adds	r3, #80	@ 0x50
 8002b6c:	443b      	add	r3, r7
 8002b6e:	3b3c      	subs	r3, #60	@ 0x3c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	f041 0202 	orr.w	r2, r1, #2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4403      	add	r3, r0
 8002b7c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002b7e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002b82:	4613      	mov	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	3350      	adds	r3, #80	@ 0x50
 8002b8c:	443b      	add	r3, r7
 8002b8e:	3b38      	subs	r3, #56	@ 0x38
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d01f      	beq.n	8002bd6 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8002b96:	4943      	ldr	r1, [pc, #268]	@ (8002ca4 <HAL_OSPIM_Config+0x29c>)
 8002b98:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	3350      	adds	r3, #80	@ 0x50
 8002ba6:	443b      	add	r3, r7
 8002ba8:	3b38      	subs	r3, #56	@ 0x38
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3b01      	subs	r3, #1
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	6859      	ldr	r1, [r3, #4]
 8002bb4:	483b      	ldr	r0, [pc, #236]	@ (8002ca4 <HAL_OSPIM_Config+0x29c>)
 8002bb6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002bba:	4613      	mov	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	3350      	adds	r3, #80	@ 0x50
 8002bc4:	443b      	add	r3, r7
 8002bc6:	3b38      	subs	r3, #56	@ 0x38
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	f041 0220 	orr.w	r2, r1, #32
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4403      	add	r3, r0
 8002bd4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002bd6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002bda:	4613      	mov	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	3350      	adds	r3, #80	@ 0x50
 8002be4:	443b      	add	r3, r7
 8002be6:	3b30      	subs	r3, #48	@ 0x30
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d023      	beq.n	8002c36 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8002bee:	492d      	ldr	r1, [pc, #180]	@ (8002ca4 <HAL_OSPIM_Config+0x29c>)
 8002bf0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	3350      	adds	r3, #80	@ 0x50
 8002bfe:	443b      	add	r3, r7
 8002c00:	3b30      	subs	r3, #48	@ 0x30
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	6859      	ldr	r1, [r3, #4]
 8002c10:	4824      	ldr	r0, [pc, #144]	@ (8002ca4 <HAL_OSPIM_Config+0x29c>)
 8002c12:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c16:	4613      	mov	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	3350      	adds	r3, #80	@ 0x50
 8002c20:	443b      	add	r3, r7
 8002c22:	3b30      	subs	r3, #48	@ 0x30
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4403      	add	r3, r0
 8002c34:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002c36:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	4413      	add	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	3350      	adds	r3, #80	@ 0x50
 8002c44:	443b      	add	r3, r7
 8002c46:	3b2c      	subs	r3, #44	@ 0x2c
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 80d9 	beq.w	8002e02 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8002c50:	4914      	ldr	r1, [pc, #80]	@ (8002ca4 <HAL_OSPIM_Config+0x29c>)
 8002c52:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c56:	4613      	mov	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	3350      	adds	r3, #80	@ 0x50
 8002c60:	443b      	add	r3, r7
 8002c62:	3b2c      	subs	r3, #44	@ 0x2c
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	6859      	ldr	r1, [r3, #4]
 8002c72:	480c      	ldr	r0, [pc, #48]	@ (8002ca4 <HAL_OSPIM_Config+0x29c>)
 8002c74:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c78:	4613      	mov	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	3350      	adds	r3, #80	@ 0x50
 8002c82:	443b      	add	r3, r7
 8002c84:	3b2c      	subs	r3, #44	@ 0x2c
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4403      	add	r3, r0
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	e0b3      	b.n	8002e02 <HAL_OSPIM_Config+0x3fa>
 8002c9a:	bf00      	nop
 8002c9c:	52005000 	.word	0x52005000
 8002ca0:	5200a000 	.word	0x5200a000
 8002ca4:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8002ca8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	3350      	adds	r3, #80	@ 0x50
 8002cb4:	443b      	add	r3, r7
 8002cb6:	3b3c      	subs	r3, #60	@ 0x3c
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 80a1 	beq.w	8002e02 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8002cc0:	4993      	ldr	r1, [pc, #588]	@ (8002f10 <HAL_OSPIM_Config+0x508>)
 8002cc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	3350      	adds	r3, #80	@ 0x50
 8002cce:	443b      	add	r3, r7
 8002cd0:	3b3c      	subs	r3, #60	@ 0x3c
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	6859      	ldr	r1, [r3, #4]
 8002cdc:	488c      	ldr	r0, [pc, #560]	@ (8002f10 <HAL_OSPIM_Config+0x508>)
 8002cde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	3350      	adds	r3, #80	@ 0x50
 8002cea:	443b      	add	r3, r7
 8002cec:	3b3c      	subs	r3, #60	@ 0x3c
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	f021 0201 	bic.w	r2, r1, #1
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4403      	add	r3, r0
 8002cfa:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8002cfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	3350      	adds	r3, #80	@ 0x50
 8002d08:	443b      	add	r3, r7
 8002d0a:	3b38      	subs	r3, #56	@ 0x38
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d01d      	beq.n	8002d4e <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8002d12:	497f      	ldr	r1, [pc, #508]	@ (8002f10 <HAL_OSPIM_Config+0x508>)
 8002d14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d16:	4613      	mov	r3, r2
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	3350      	adds	r3, #80	@ 0x50
 8002d20:	443b      	add	r3, r7
 8002d22:	3b38      	subs	r3, #56	@ 0x38
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	6859      	ldr	r1, [r3, #4]
 8002d2e:	4878      	ldr	r0, [pc, #480]	@ (8002f10 <HAL_OSPIM_Config+0x508>)
 8002d30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d32:	4613      	mov	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	3350      	adds	r3, #80	@ 0x50
 8002d3c:	443b      	add	r3, r7
 8002d3e:	3b38      	subs	r3, #56	@ 0x38
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	f021 0210 	bic.w	r2, r1, #16
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4403      	add	r3, r0
 8002d4c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002d4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d50:	4613      	mov	r3, r2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	4413      	add	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	3350      	adds	r3, #80	@ 0x50
 8002d5a:	443b      	add	r3, r7
 8002d5c:	3b30      	subs	r3, #48	@ 0x30
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d021      	beq.n	8002da8 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8002d64:	496a      	ldr	r1, [pc, #424]	@ (8002f10 <HAL_OSPIM_Config+0x508>)
 8002d66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d68:	4613      	mov	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4413      	add	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	3350      	adds	r3, #80	@ 0x50
 8002d72:	443b      	add	r3, r7
 8002d74:	3b30      	subs	r3, #48	@ 0x30
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	4862      	ldr	r0, [pc, #392]	@ (8002f10 <HAL_OSPIM_Config+0x508>)
 8002d86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	3350      	adds	r3, #80	@ 0x50
 8002d92:	443b      	add	r3, r7
 8002d94:	3b30      	subs	r3, #48	@ 0x30
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4403      	add	r3, r0
 8002da6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002da8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002daa:	4613      	mov	r3, r2
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	4413      	add	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	3350      	adds	r3, #80	@ 0x50
 8002db4:	443b      	add	r3, r7
 8002db6:	3b2c      	subs	r3, #44	@ 0x2c
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d021      	beq.n	8002e02 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8002dbe:	4954      	ldr	r1, [pc, #336]	@ (8002f10 <HAL_OSPIM_Config+0x508>)
 8002dc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	3350      	adds	r3, #80	@ 0x50
 8002dcc:	443b      	add	r3, r7
 8002dce:	3b2c      	subs	r3, #44	@ 0x2c
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	484c      	ldr	r0, [pc, #304]	@ (8002f10 <HAL_OSPIM_Config+0x508>)
 8002de0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	3350      	adds	r3, #80	@ 0x50
 8002dec:	443b      	add	r3, r7
 8002dee:	3b2c      	subs	r3, #44	@ 0x2c
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4403      	add	r3, r0
 8002e00:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	6819      	ldr	r1, [r3, #0]
 8002e06:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	3350      	adds	r3, #80	@ 0x50
 8002e14:	443b      	add	r3, r7
 8002e16:	3b3c      	subs	r3, #60	@ 0x3c
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4299      	cmp	r1, r3
 8002e1c:	d038      	beq.n	8002e90 <HAL_OSPIM_Config+0x488>
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	6859      	ldr	r1, [r3, #4]
 8002e22:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e26:	4613      	mov	r3, r2
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	4413      	add	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	3350      	adds	r3, #80	@ 0x50
 8002e30:	443b      	add	r3, r7
 8002e32:	3b38      	subs	r3, #56	@ 0x38
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4299      	cmp	r1, r3
 8002e38:	d02a      	beq.n	8002e90 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	6899      	ldr	r1, [r3, #8]
 8002e3e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	3350      	adds	r3, #80	@ 0x50
 8002e4c:	443b      	add	r3, r7
 8002e4e:	3b34      	subs	r3, #52	@ 0x34
 8002e50:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002e52:	4299      	cmp	r1, r3
 8002e54:	d01c      	beq.n	8002e90 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	68d9      	ldr	r1, [r3, #12]
 8002e5a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	3350      	adds	r3, #80	@ 0x50
 8002e68:	443b      	add	r3, r7
 8002e6a:	3b30      	subs	r3, #48	@ 0x30
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4299      	cmp	r1, r3
 8002e70:	d00e      	beq.n	8002e90 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	6919      	ldr	r1, [r3, #16]
 8002e76:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	3350      	adds	r3, #80	@ 0x50
 8002e84:	443b      	add	r3, r7
 8002e86:	3b2c      	subs	r3, #44	@ 0x2c
 8002e88:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002e8a:	4299      	cmp	r1, r3
 8002e8c:	f040 810e 	bne.w	80030ac <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	6819      	ldr	r1, [r3, #0]
 8002e94:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	3350      	adds	r3, #80	@ 0x50
 8002ea2:	443b      	add	r3, r7
 8002ea4:	3b3c      	subs	r3, #60	@ 0x3c
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4299      	cmp	r1, r3
 8002eaa:	d133      	bne.n	8002f14 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4413      	add	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	3350      	adds	r3, #80	@ 0x50
 8002ebe:	443b      	add	r3, r7
 8002ec0:	3b38      	subs	r3, #56	@ 0x38
 8002ec2:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8002ec4:	4299      	cmp	r1, r3
 8002ec6:	d125      	bne.n	8002f14 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	68d9      	ldr	r1, [r3, #12]
 8002ecc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	3350      	adds	r3, #80	@ 0x50
 8002eda:	443b      	add	r3, r7
 8002edc:	3b30      	subs	r3, #48	@ 0x30
 8002ede:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002ee0:	4299      	cmp	r1, r3
 8002ee2:	d117      	bne.n	8002f14 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	6919      	ldr	r1, [r3, #16]
 8002ee8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	3350      	adds	r3, #80	@ 0x50
 8002ef6:	443b      	add	r3, r7
 8002ef8:	3b2c      	subs	r3, #44	@ 0x2c
 8002efa:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002efc:	4299      	cmp	r1, r3
 8002efe:	d109      	bne.n	8002f14 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002f00:	4b03      	ldr	r3, [pc, #12]	@ (8002f10 <HAL_OSPIM_Config+0x508>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a02      	ldr	r2, [pc, #8]	@ (8002f10 <HAL_OSPIM_Config+0x508>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	e0ce      	b.n	80030ac <HAL_OSPIM_Config+0x6a4>
 8002f0e:	bf00      	nop
 8002f10:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8002f14:	49bb      	ldr	r1, [pc, #748]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 8002f16:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4413      	add	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	3350      	adds	r3, #80	@ 0x50
 8002f24:	443b      	add	r3, r7
 8002f26:	3b3c      	subs	r3, #60	@ 0x3c
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	6859      	ldr	r1, [r3, #4]
 8002f32:	48b4      	ldr	r0, [pc, #720]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 8002f34:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	3350      	adds	r3, #80	@ 0x50
 8002f42:	443b      	add	r3, r7
 8002f44:	3b3c      	subs	r3, #60	@ 0x3c
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	f021 0201 	bic.w	r2, r1, #1
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4403      	add	r3, r0
 8002f52:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002f54:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	3350      	adds	r3, #80	@ 0x50
 8002f62:	443b      	add	r3, r7
 8002f64:	3b38      	subs	r3, #56	@ 0x38
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d01f      	beq.n	8002fac <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8002f6c:	49a5      	ldr	r1, [pc, #660]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 8002f6e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002f72:	4613      	mov	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	3350      	adds	r3, #80	@ 0x50
 8002f7c:	443b      	add	r3, r7
 8002f7e:	3b38      	subs	r3, #56	@ 0x38
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	6859      	ldr	r1, [r3, #4]
 8002f8a:	489e      	ldr	r0, [pc, #632]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 8002f8c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002f90:	4613      	mov	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4413      	add	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	3350      	adds	r3, #80	@ 0x50
 8002f9a:	443b      	add	r3, r7
 8002f9c:	3b38      	subs	r3, #56	@ 0x38
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	f021 0210 	bic.w	r2, r1, #16
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4403      	add	r3, r0
 8002faa:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8002fac:	4995      	ldr	r1, [pc, #596]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 8002fae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	3350      	adds	r3, #80	@ 0x50
 8002fbc:	443b      	add	r3, r7
 8002fbe:	3b34      	subs	r3, #52	@ 0x34
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	6859      	ldr	r1, [r3, #4]
 8002fca:	488e      	ldr	r0, [pc, #568]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 8002fcc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4413      	add	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	3350      	adds	r3, #80	@ 0x50
 8002fda:	443b      	add	r3, r7
 8002fdc:	3b34      	subs	r3, #52	@ 0x34
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4403      	add	r3, r0
 8002fea:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002fec:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	3350      	adds	r3, #80	@ 0x50
 8002ffa:	443b      	add	r3, r7
 8002ffc:	3b30      	subs	r3, #48	@ 0x30
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d023      	beq.n	800304c <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003004:	497f      	ldr	r1, [pc, #508]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 8003006:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800300a:	4613      	mov	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4413      	add	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	3350      	adds	r3, #80	@ 0x50
 8003014:	443b      	add	r3, r7
 8003016:	3b30      	subs	r3, #48	@ 0x30
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3b01      	subs	r3, #1
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	6859      	ldr	r1, [r3, #4]
 8003026:	4877      	ldr	r0, [pc, #476]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 8003028:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800302c:	4613      	mov	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4413      	add	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	3350      	adds	r3, #80	@ 0x50
 8003036:	443b      	add	r3, r7
 8003038:	3b30      	subs	r3, #48	@ 0x30
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3b01      	subs	r3, #1
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4403      	add	r3, r0
 800304a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800304c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003050:	4613      	mov	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4413      	add	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	3350      	adds	r3, #80	@ 0x50
 800305a:	443b      	add	r3, r7
 800305c:	3b2c      	subs	r3, #44	@ 0x2c
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d023      	beq.n	80030ac <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003064:	4967      	ldr	r1, [pc, #412]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 8003066:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800306a:	4613      	mov	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	3350      	adds	r3, #80	@ 0x50
 8003074:	443b      	add	r3, r7
 8003076:	3b2c      	subs	r3, #44	@ 0x2c
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3b01      	subs	r3, #1
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	6859      	ldr	r1, [r3, #4]
 8003086:	485f      	ldr	r0, [pc, #380]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 8003088:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800308c:	4613      	mov	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4413      	add	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	3350      	adds	r3, #80	@ 0x50
 8003096:	443b      	add	r3, r7
 8003098:	3b2c      	subs	r3, #44	@ 0x2c
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3b01      	subs	r3, #1
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4403      	add	r3, r0
 80030aa:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80030ac:	4a55      	ldr	r2, [pc, #340]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030c0:	025b      	lsls	r3, r3, #9
 80030c2:	431a      	orrs	r2, r3
 80030c4:	494f      	ldr	r1, [pc, #316]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	1e5a      	subs	r2, r3, #1
 80030dc:	4b49      	ldr	r3, [pc, #292]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	0c1b      	lsrs	r3, r3, #16
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d90a      	bls.n	80030fe <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80030e8:	4b46      	ldr	r3, [pc, #280]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	041b      	lsls	r3, r3, #16
 80030f8:	4942      	ldr	r1, [pc, #264]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80030fe:	4b41      	ldr	r3, [pc, #260]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 809a 	beq.w	8003240 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800310c:	4a3d      	ldr	r2, [pc, #244]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3b01      	subs	r3, #1
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f023 0203 	bic.w	r2, r3, #3
 800311e:	4939      	ldr	r1, [pc, #228]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3b01      	subs	r3, #1
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d011      	beq.n	800315c <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8003138:	4a32      	ldr	r2, [pc, #200]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	3b01      	subs	r3, #1
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800314a:	492e      	ldr	r1, [pc, #184]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	3b01      	subs	r3, #1
 8003152:	f042 0210 	orr.w	r2, r2, #16
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d016      	beq.n	8003196 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003168:	4a26      	ldr	r2, [pc, #152]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	3b01      	subs	r3, #1
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800317e:	4921      	ldr	r1, [pc, #132]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	3b01      	subs	r3, #1
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	605a      	str	r2, [r3, #4]
 8003194:	e019      	b.n	80031ca <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d015      	beq.n	80031ca <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800319e:	4a19      	ldr	r2, [pc, #100]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	3b01      	subs	r3, #1
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80031b4:	4913      	ldr	r1, [pc, #76]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d018      	beq.n	8003208 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80031d6:	4a0b      	ldr	r2, [pc, #44]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	3b01      	subs	r3, #1
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80031ec:	4905      	ldr	r1, [pc, #20]	@ (8003204 <HAL_OSPIM_Config+0x7fc>)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	e0c5      	b.n	8003390 <HAL_OSPIM_Config+0x988>
 8003204:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 80bf 	beq.w	8003390 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003212:	4a6e      	ldr	r2, [pc, #440]	@ (80033cc <HAL_OSPIM_Config+0x9c4>)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	3b01      	subs	r3, #1
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003228:	4968      	ldr	r1, [pc, #416]	@ (80033cc <HAL_OSPIM_Config+0x9c4>)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	3b01      	subs	r3, #1
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	e0a7      	b.n	8003390 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003240:	4a62      	ldr	r2, [pc, #392]	@ (80033cc <HAL_OSPIM_Config+0x9c4>)
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3b01      	subs	r3, #1
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f023 0203 	bic.w	r2, r3, #3
 8003252:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	431a      	orrs	r2, r3
 8003258:	495c      	ldr	r1, [pc, #368]	@ (80033cc <HAL_OSPIM_Config+0x9c4>)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	3b01      	subs	r3, #1
 8003260:	f042 0201 	orr.w	r2, r2, #1
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d014      	beq.n	800329c <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003272:	4a56      	ldr	r2, [pc, #344]	@ (80033cc <HAL_OSPIM_Config+0x9c4>)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	3b01      	subs	r3, #1
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003286:	015b      	lsls	r3, r3, #5
 8003288:	431a      	orrs	r2, r3
 800328a:	4950      	ldr	r1, [pc, #320]	@ (80033cc <HAL_OSPIM_Config+0x9c4>)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	3b01      	subs	r3, #1
 8003292:	f042 0210 	orr.w	r2, r2, #16
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d019      	beq.n	80032dc <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80032a8:	4a48      	ldr	r2, [pc, #288]	@ (80033cc <HAL_OSPIM_Config+0x9c4>)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80032be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032c0:	049b      	lsls	r3, r3, #18
 80032c2:	431a      	orrs	r2, r3
 80032c4:	4941      	ldr	r1, [pc, #260]	@ (80033cc <HAL_OSPIM_Config+0x9c4>)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	e01c      	b.n	8003316 <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d018      	beq.n	8003316 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80032e4:	4a39      	ldr	r2, [pc, #228]	@ (80033cc <HAL_OSPIM_Config+0x9c4>)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80032fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032fc:	069b      	lsls	r3, r3, #26
 80032fe:	431a      	orrs	r2, r3
 8003300:	4932      	ldr	r1, [pc, #200]	@ (80033cc <HAL_OSPIM_Config+0x9c4>)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	3b01      	subs	r3, #1
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d019      	beq.n	8003356 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003322:	4a2a      	ldr	r2, [pc, #168]	@ (80033cc <HAL_OSPIM_Config+0x9c4>)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	3b01      	subs	r3, #1
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003338:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800333a:	049b      	lsls	r3, r3, #18
 800333c:	431a      	orrs	r2, r3
 800333e:	4923      	ldr	r1, [pc, #140]	@ (80033cc <HAL_OSPIM_Config+0x9c4>)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	3b01      	subs	r3, #1
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	e01c      	b.n	8003390 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d018      	beq.n	8003390 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800335e:	4a1b      	ldr	r2, [pc, #108]	@ (80033cc <HAL_OSPIM_Config+0x9c4>)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	3b01      	subs	r3, #1
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003374:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003376:	069b      	lsls	r3, r3, #26
 8003378:	431a      	orrs	r2, r3
 800337a:	4914      	ldr	r1, [pc, #80]	@ (80033cc <HAL_OSPIM_Config+0x9c4>)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	3b01      	subs	r3, #1
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003390:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800339c:	4b0c      	ldr	r3, [pc, #48]	@ (80033d0 <HAL_OSPIM_Config+0x9c8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0b      	ldr	r2, [pc, #44]	@ (80033d0 <HAL_OSPIM_Config+0x9c8>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80033a8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80033b4:	4b07      	ldr	r3, [pc, #28]	@ (80033d4 <HAL_OSPIM_Config+0x9cc>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a06      	ldr	r2, [pc, #24]	@ (80033d4 <HAL_OSPIM_Config+0x9cc>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80033c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3750      	adds	r7, #80	@ 0x50
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	5200b400 	.word	0x5200b400
 80033d0:	52005000 	.word	0x52005000
 80033d4:	5200a000 	.word	0x5200a000

080033d8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	4613      	mov	r3, r2
 80033e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80033e8:	e01a      	b.n	8003420 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d016      	beq.n	8003420 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f2:	f7fe fb57 	bl	8001aa4 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d302      	bcc.n	8003408 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10b      	bne.n	8003420 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800340e:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003414:	f043 0201 	orr.w	r2, r3, #1
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e00e      	b.n	800343e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6a1a      	ldr	r2, [r3, #32]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	4013      	ands	r3, r2
 800342a:	2b00      	cmp	r3, #0
 800342c:	bf14      	ite	ne
 800342e:	2301      	movne	r3, #1
 8003430:	2300      	moveq	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	429a      	cmp	r2, r3
 800343a:	d1d6      	bne.n	80033ea <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8003448:	b480      	push	{r7}
 800344a:	b089      	sub	sp, #36	@ 0x24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003464:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10a      	bne.n	8003484 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d114      	bne.n	80034b6 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003494:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800349e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80034a8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	e02c      	b.n	8003510 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d114      	bne.n	80034e8 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80034c6:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80034d0:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034da:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	e013      	b.n	8003510 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034f0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80034fa:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8003504:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800350e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003518:	431a      	orrs	r2, r3
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d012      	beq.n	800354c <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800353e:	4319      	orrs	r1, r3
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003544:	430b      	orrs	r3, r1
 8003546:	431a      	orrs	r2, r3
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f023 021f 	bic.w	r2, r3, #31
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003558:	431a      	orrs	r2, r3
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d105      	bne.n	800357a <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3a01      	subs	r2, #1
 8003578:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 8095 	beq.w	80036ae <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d053      	beq.n	8003634 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01e      	beq.n	80035d2 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4b64      	ldr	r3, [pc, #400]	@ (800372c <OSPI_ConfigCmd+0x2e4>)
 800359a:	4013      	ands	r3, r2
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	68d1      	ldr	r1, [r2, #12]
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	6952      	ldr	r2, [r2, #20]
 80035a4:	4311      	orrs	r1, r2
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	6912      	ldr	r2, [r2, #16]
 80035aa:	4311      	orrs	r1, r2
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	69d2      	ldr	r2, [r2, #28]
 80035b0:	4311      	orrs	r1, r2
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035b6:	4311      	orrs	r1, r2
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	6a12      	ldr	r2, [r2, #32]
 80035bc:	4311      	orrs	r1, r2
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035c2:	4311      	orrs	r1, r2
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80035c8:	430a      	orrs	r2, r1
 80035ca:	431a      	orrs	r2, r3
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	e026      	b.n	8003620 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	4b56      	ldr	r3, [pc, #344]	@ (8003730 <OSPI_ConfigCmd+0x2e8>)
 80035d8:	4013      	ands	r3, r2
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	68d1      	ldr	r1, [r2, #12]
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	6952      	ldr	r2, [r2, #20]
 80035e2:	4311      	orrs	r1, r2
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	6912      	ldr	r2, [r2, #16]
 80035e8:	4311      	orrs	r1, r2
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	69d2      	ldr	r2, [r2, #28]
 80035ee:	4311      	orrs	r1, r2
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035f4:	4311      	orrs	r1, r2
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	6a12      	ldr	r2, [r2, #32]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	431a      	orrs	r2, r3
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003606:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800360a:	d109      	bne.n	8003620 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003610:	2b08      	cmp	r3, #8
 8003612:	d105      	bne.n	8003620 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	6992      	ldr	r2, [r2, #24]
 8003630:	649a      	str	r2, [r3, #72]	@ 0x48
 8003632:	e074      	b.n	800371e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003638:	2b00      	cmp	r3, #0
 800363a:	d015      	beq.n	8003668 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	4b3c      	ldr	r3, [pc, #240]	@ (8003734 <OSPI_ConfigCmd+0x2ec>)
 8003642:	4013      	ands	r3, r2
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	68d1      	ldr	r1, [r2, #12]
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	6952      	ldr	r2, [r2, #20]
 800364c:	4311      	orrs	r1, r2
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	6912      	ldr	r2, [r2, #16]
 8003652:	4311      	orrs	r1, r2
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003658:	4311      	orrs	r1, r2
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800365e:	430a      	orrs	r2, r1
 8003660:	431a      	orrs	r2, r3
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	e01d      	b.n	80036a4 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68d9      	ldr	r1, [r3, #12]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	4319      	orrs	r1, r3
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	430b      	orrs	r3, r1
 8003680:	431a      	orrs	r2, r3
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800368e:	d109      	bne.n	80036a4 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003694:	2b08      	cmp	r3, #8
 8003696:	d105      	bne.n	80036a4 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	e037      	b.n	800371e <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d02e      	beq.n	8003714 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d015      	beq.n	80036ea <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003738 <OSPI_ConfigCmd+0x2f0>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	69d1      	ldr	r1, [r2, #28]
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036ce:	4311      	orrs	r1, r2
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	6a12      	ldr	r2, [r2, #32]
 80036d4:	4311      	orrs	r1, r2
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036da:	4311      	orrs	r1, r2
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80036e0:	430a      	orrs	r2, r1
 80036e2:	431a      	orrs	r2, r3
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	e00e      	b.n	8003708 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	69d9      	ldr	r1, [r3, #28]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	4319      	orrs	r1, r3
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	430b      	orrs	r3, r1
 8003702:	431a      	orrs	r2, r3
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	6992      	ldr	r2, [r2, #24]
 8003710:	649a      	str	r2, [r3, #72]	@ 0x48
 8003712:	e004      	b.n	800371e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2208      	movs	r2, #8
 800371c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800371e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3724      	adds	r7, #36	@ 0x24
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	f0ffc0c0 	.word	0xf0ffc0c0
 8003730:	ffffc0c0 	.word	0xffffc0c0
 8003734:	f0ffffc0 	.word	0xf0ffffc0
 8003738:	f0ffc0ff 	.word	0xf0ffc0ff

0800373c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	6039      	str	r1, [r7, #0]
 8003746:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <OSPIM_GetConfig+0x26>
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d802      	bhi.n	8003762 <OSPIM_GetConfig+0x26>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d102      	bne.n	8003768 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	75fb      	strb	r3, [r7, #23]
 8003766:	e098      	b.n	800389a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2200      	movs	r2, #0
 8003772:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2200      	movs	r2, #0
 8003778:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2200      	movs	r2, #0
 800377e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2200      	movs	r2, #0
 8003784:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	2b02      	cmp	r3, #2
 800378a:	d10b      	bne.n	80037a4 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800378c:	4b46      	ldr	r3, [pc, #280]	@ (80038a8 <OSPIM_GetConfig+0x16c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d102      	bne.n	800379e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003798:	4b44      	ldr	r3, [pc, #272]	@ (80038ac <OSPIM_GetConfig+0x170>)
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	e002      	b.n	80037a4 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800379e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037a2:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	e074      	b.n	8003894 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80037aa:	4a3f      	ldr	r2, [pc, #252]	@ (80038a8 <OSPIM_GetConfig+0x16c>)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4053      	eors	r3, r2
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d103      	bne.n	80037d6 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4053      	eors	r3, r2
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d103      	bne.n	80037f6 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4053      	eors	r3, r2
 8003806:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800380a:	2b00      	cmp	r3, #0
 800380c:	d103      	bne.n	8003816 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d018      	beq.n	8003852 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4053      	eors	r3, r2
 8003826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d111      	bne.n	8003852 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d106      	bne.n	8003846 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3301      	adds	r3, #1
 800383c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	60da      	str	r2, [r3, #12]
 8003844:	e005      	b.n	8003852 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	3301      	adds	r3, #1
 800384a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d018      	beq.n	800388e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4053      	eors	r3, r2
 8003862:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d111      	bne.n	800388e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d106      	bne.n	8003882 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3301      	adds	r3, #1
 8003878:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	611a      	str	r2, [r3, #16]
 8003880:	e005      	b.n	800388e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3301      	adds	r3, #1
 8003886:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3301      	adds	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d987      	bls.n	80037aa <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800389a:	7dfb      	ldrb	r3, [r7, #23]
}
 800389c:	4618      	mov	r0, r3
 800389e:	371c      	adds	r7, #28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	5200b400 	.word	0x5200b400
 80038ac:	04040222 	.word	0x04040222

080038b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80038b8:	4b19      	ldr	r3, [pc, #100]	@ (8003920 <HAL_PWREx_ConfigSupply+0x70>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d00a      	beq.n	80038da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80038c4:	4b16      	ldr	r3, [pc, #88]	@ (8003920 <HAL_PWREx_ConfigSupply+0x70>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d001      	beq.n	80038d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e01f      	b.n	8003916 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	e01d      	b.n	8003916 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80038da:	4b11      	ldr	r3, [pc, #68]	@ (8003920 <HAL_PWREx_ConfigSupply+0x70>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f023 0207 	bic.w	r2, r3, #7
 80038e2:	490f      	ldr	r1, [pc, #60]	@ (8003920 <HAL_PWREx_ConfigSupply+0x70>)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80038ea:	f7fe f8db 	bl	8001aa4 <HAL_GetTick>
 80038ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038f0:	e009      	b.n	8003906 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80038f2:	f7fe f8d7 	bl	8001aa4 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003900:	d901      	bls.n	8003906 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e007      	b.n	8003916 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003906:	4b06      	ldr	r3, [pc, #24]	@ (8003920 <HAL_PWREx_ConfigSupply+0x70>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800390e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003912:	d1ee      	bne.n	80038f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	58024800 	.word	0x58024800

08003924 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08c      	sub	sp, #48	@ 0x30
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d102      	bne.n	8003938 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	f000 bc1f 	b.w	8004176 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80b3 	beq.w	8003aac <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003946:	4b95      	ldr	r3, [pc, #596]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800394e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003950:	4b92      	ldr	r3, [pc, #584]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003954:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003958:	2b10      	cmp	r3, #16
 800395a:	d007      	beq.n	800396c <HAL_RCC_OscConfig+0x48>
 800395c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800395e:	2b18      	cmp	r3, #24
 8003960:	d112      	bne.n	8003988 <HAL_RCC_OscConfig+0x64>
 8003962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d10d      	bne.n	8003988 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396c:	4b8b      	ldr	r3, [pc, #556]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 8098 	beq.w	8003aaa <HAL_RCC_OscConfig+0x186>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f040 8093 	bne.w	8003aaa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e3f6      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003990:	d106      	bne.n	80039a0 <HAL_RCC_OscConfig+0x7c>
 8003992:	4b82      	ldr	r3, [pc, #520]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a81      	ldr	r2, [pc, #516]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e058      	b.n	8003a52 <HAL_RCC_OscConfig+0x12e>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d112      	bne.n	80039ce <HAL_RCC_OscConfig+0xaa>
 80039a8:	4b7c      	ldr	r3, [pc, #496]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a7b      	ldr	r2, [pc, #492]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 80039ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	4b79      	ldr	r3, [pc, #484]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a78      	ldr	r2, [pc, #480]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 80039ba:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	4b76      	ldr	r3, [pc, #472]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a75      	ldr	r2, [pc, #468]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 80039c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	e041      	b.n	8003a52 <HAL_RCC_OscConfig+0x12e>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039d6:	d112      	bne.n	80039fe <HAL_RCC_OscConfig+0xda>
 80039d8:	4b70      	ldr	r3, [pc, #448]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a6f      	ldr	r2, [pc, #444]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 80039de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	4b6d      	ldr	r3, [pc, #436]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a6c      	ldr	r2, [pc, #432]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 80039ea:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	4b6a      	ldr	r3, [pc, #424]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a69      	ldr	r2, [pc, #420]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 80039f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	e029      	b.n	8003a52 <HAL_RCC_OscConfig+0x12e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003a06:	d112      	bne.n	8003a2e <HAL_RCC_OscConfig+0x10a>
 8003a08:	4b64      	ldr	r3, [pc, #400]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a63      	ldr	r2, [pc, #396]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003a0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	4b61      	ldr	r3, [pc, #388]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a60      	ldr	r2, [pc, #384]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003a1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	4b5e      	ldr	r3, [pc, #376]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a5d      	ldr	r2, [pc, #372]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003a26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	e011      	b.n	8003a52 <HAL_RCC_OscConfig+0x12e>
 8003a2e:	4b5b      	ldr	r3, [pc, #364]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a5a      	ldr	r2, [pc, #360]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003a34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	4b58      	ldr	r3, [pc, #352]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a57      	ldr	r2, [pc, #348]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003a40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	4b55      	ldr	r3, [pc, #340]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a54      	ldr	r2, [pc, #336]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003a4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d013      	beq.n	8003a82 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5a:	f7fe f823 	bl	8001aa4 <HAL_GetTick>
 8003a5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a62:	f7fe f81f 	bl	8001aa4 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b64      	cmp	r3, #100	@ 0x64
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e380      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a74:	4b49      	ldr	r3, [pc, #292]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x13e>
 8003a80:	e014      	b.n	8003aac <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7fe f80f 	bl	8001aa4 <HAL_GetTick>
 8003a86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a8a:	f7fe f80b 	bl	8001aa4 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b64      	cmp	r3, #100	@ 0x64
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e36c      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a9c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f0      	bne.n	8003a8a <HAL_RCC_OscConfig+0x166>
 8003aa8:	e000      	b.n	8003aac <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aaa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 808c 	beq.w	8003bd2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aba:	4b38      	ldr	r3, [pc, #224]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ac2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ac4:	4b35      	ldr	r3, [pc, #212]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x1bc>
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	2b18      	cmp	r3, #24
 8003ad4:	d137      	bne.n	8003b46 <HAL_RCC_OscConfig+0x222>
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d132      	bne.n	8003b46 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_OscConfig+0x1d4>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e33e      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003af8:	4b28      	ldr	r3, [pc, #160]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f023 0219 	bic.w	r2, r3, #25
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	4925      	ldr	r1, [pc, #148]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0a:	f7fd ffcb 	bl	8001aa4 <HAL_GetTick>
 8003b0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b12:	f7fd ffc7 	bl	8001aa4 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e328      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b24:	4b1d      	ldr	r3, [pc, #116]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b30:	4b1a      	ldr	r3, [pc, #104]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	061b      	lsls	r3, r3, #24
 8003b3e:	4917      	ldr	r1, [pc, #92]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b44:	e045      	b.n	8003bd2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d028      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b4e:	4b13      	ldr	r3, [pc, #76]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 0219 	bic.w	r2, r3, #25
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	4910      	ldr	r1, [pc, #64]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fd ffa0 	bl	8001aa4 <HAL_GetTick>
 8003b64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b68:	f7fd ff9c 	bl	8001aa4 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e2fd      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b7a:	4b08      	ldr	r3, [pc, #32]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b86:	4b05      	ldr	r3, [pc, #20]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	061b      	lsls	r3, r3, #24
 8003b94:	4901      	ldr	r1, [pc, #4]	@ (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	604b      	str	r3, [r1, #4]
 8003b9a:	e01a      	b.n	8003bd2 <HAL_RCC_OscConfig+0x2ae>
 8003b9c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ba0:	4b97      	ldr	r3, [pc, #604]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a96      	ldr	r2, [pc, #600]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003ba6:	f023 0301 	bic.w	r3, r3, #1
 8003baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fd ff7a 	bl	8001aa4 <HAL_GetTick>
 8003bb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb4:	f7fd ff76 	bl	8001aa4 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e2d7      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bc6:	4b8e      	ldr	r3, [pc, #568]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d06a      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bde:	4b88      	ldr	r3, [pc, #544]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003be6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003be8:	4b85      	ldr	r3, [pc, #532]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d007      	beq.n	8003c04 <HAL_RCC_OscConfig+0x2e0>
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2b18      	cmp	r3, #24
 8003bf8:	d11b      	bne.n	8003c32 <HAL_RCC_OscConfig+0x30e>
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d116      	bne.n	8003c32 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c04:	4b7e      	ldr	r3, [pc, #504]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_OscConfig+0x2f8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	2b80      	cmp	r3, #128	@ 0x80
 8003c16:	d001      	beq.n	8003c1c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e2ac      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c1c:	4b78      	ldr	r3, [pc, #480]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	061b      	lsls	r3, r3, #24
 8003c2a:	4975      	ldr	r1, [pc, #468]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c30:	e040      	b.n	8003cb4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d023      	beq.n	8003c82 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c3a:	4b71      	ldr	r3, [pc, #452]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a70      	ldr	r2, [pc, #448]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fd ff2d 	bl	8001aa4 <HAL_GetTick>
 8003c4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c4e:	f7fd ff29 	bl	8001aa4 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e28a      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c60:	4b67      	ldr	r3, [pc, #412]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c6c:	4b64      	ldr	r3, [pc, #400]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	061b      	lsls	r3, r3, #24
 8003c7a:	4961      	ldr	r1, [pc, #388]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60cb      	str	r3, [r1, #12]
 8003c80:	e018      	b.n	8003cb4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c82:	4b5f      	ldr	r3, [pc, #380]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a5e      	ldr	r2, [pc, #376]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003c88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fd ff09 	bl	8001aa4 <HAL_GetTick>
 8003c92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c96:	f7fd ff05 	bl	8001aa4 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e266      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ca8:	4b55      	ldr	r3, [pc, #340]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d036      	beq.n	8003d2e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d019      	beq.n	8003cfc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc8:	4b4d      	ldr	r3, [pc, #308]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ccc:	4a4c      	ldr	r2, [pc, #304]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7fd fee6 	bl	8001aa4 <HAL_GetTick>
 8003cd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cdc:	f7fd fee2 	bl	8001aa4 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e243      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cee:	4b44      	ldr	r3, [pc, #272]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x3b8>
 8003cfa:	e018      	b.n	8003d2e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cfc:	4b40      	ldr	r3, [pc, #256]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003cfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d00:	4a3f      	ldr	r2, [pc, #252]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003d02:	f023 0301 	bic.w	r3, r3, #1
 8003d06:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7fd fecc 	bl	8001aa4 <HAL_GetTick>
 8003d0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d10:	f7fd fec8 	bl	8001aa4 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e229      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d22:	4b37      	ldr	r3, [pc, #220]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003d24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d036      	beq.n	8003da8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d019      	beq.n	8003d76 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d42:	4b2f      	ldr	r3, [pc, #188]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a2e      	ldr	r2, [pc, #184]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003d48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d4e:	f7fd fea9 	bl	8001aa4 <HAL_GetTick>
 8003d52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d56:	f7fd fea5 	bl	8001aa4 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e206      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d68:	4b25      	ldr	r3, [pc, #148]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x432>
 8003d74:	e018      	b.n	8003da8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d76:	4b22      	ldr	r3, [pc, #136]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a21      	ldr	r2, [pc, #132]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003d7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d82:	f7fd fe8f 	bl	8001aa4 <HAL_GetTick>
 8003d86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d8a:	f7fd fe8b 	bl	8001aa4 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e1ec      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d9c:	4b18      	ldr	r3, [pc, #96]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f0      	bne.n	8003d8a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80af 	beq.w	8003f14 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003db6:	4b13      	ldr	r3, [pc, #76]	@ (8003e04 <HAL_RCC_OscConfig+0x4e0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a12      	ldr	r2, [pc, #72]	@ (8003e04 <HAL_RCC_OscConfig+0x4e0>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dc2:	f7fd fe6f 	bl	8001aa4 <HAL_GetTick>
 8003dc6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dca:	f7fd fe6b 	bl	8001aa4 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b64      	cmp	r3, #100	@ 0x64
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e1cc      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ddc:	4b09      	ldr	r3, [pc, #36]	@ (8003e04 <HAL_RCC_OscConfig+0x4e0>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d10b      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4e4>
 8003df0:	4b03      	ldr	r3, [pc, #12]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df4:	4a02      	ldr	r2, [pc, #8]	@ (8003e00 <HAL_RCC_OscConfig+0x4dc>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dfc:	e05b      	b.n	8003eb6 <HAL_RCC_OscConfig+0x592>
 8003dfe:	bf00      	nop
 8003e00:	58024400 	.word	0x58024400
 8003e04:	58024800 	.word	0x58024800
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d112      	bne.n	8003e36 <HAL_RCC_OscConfig+0x512>
 8003e10:	4b9d      	ldr	r3, [pc, #628]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e14:	4a9c      	ldr	r2, [pc, #624]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e16:	f023 0301 	bic.w	r3, r3, #1
 8003e1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e1c:	4b9a      	ldr	r3, [pc, #616]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e20:	4a99      	ldr	r2, [pc, #612]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e28:	4b97      	ldr	r3, [pc, #604]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2c:	4a96      	ldr	r2, [pc, #600]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e2e:	f023 0304 	bic.w	r3, r3, #4
 8003e32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e34:	e03f      	b.n	8003eb6 <HAL_RCC_OscConfig+0x592>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b05      	cmp	r3, #5
 8003e3c:	d112      	bne.n	8003e64 <HAL_RCC_OscConfig+0x540>
 8003e3e:	4b92      	ldr	r3, [pc, #584]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e42:	4a91      	ldr	r2, [pc, #580]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e44:	f043 0304 	orr.w	r3, r3, #4
 8003e48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e4a:	4b8f      	ldr	r3, [pc, #572]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4e:	4a8e      	ldr	r2, [pc, #568]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e56:	4b8c      	ldr	r3, [pc, #560]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5a:	4a8b      	ldr	r2, [pc, #556]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e62:	e028      	b.n	8003eb6 <HAL_RCC_OscConfig+0x592>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b85      	cmp	r3, #133	@ 0x85
 8003e6a:	d112      	bne.n	8003e92 <HAL_RCC_OscConfig+0x56e>
 8003e6c:	4b86      	ldr	r3, [pc, #536]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e70:	4a85      	ldr	r2, [pc, #532]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e72:	f043 0304 	orr.w	r3, r3, #4
 8003e76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e78:	4b83      	ldr	r3, [pc, #524]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7c:	4a82      	ldr	r2, [pc, #520]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e84:	4b80      	ldr	r3, [pc, #512]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e88:	4a7f      	ldr	r2, [pc, #508]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e90:	e011      	b.n	8003eb6 <HAL_RCC_OscConfig+0x592>
 8003e92:	4b7d      	ldr	r3, [pc, #500]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e96:	4a7c      	ldr	r2, [pc, #496]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003e98:	f023 0301 	bic.w	r3, r3, #1
 8003e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e9e:	4b7a      	ldr	r3, [pc, #488]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea2:	4a79      	ldr	r2, [pc, #484]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003ea4:	f023 0304 	bic.w	r3, r3, #4
 8003ea8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eaa:	4b77      	ldr	r3, [pc, #476]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eae:	4a76      	ldr	r2, [pc, #472]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003eb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eb4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d015      	beq.n	8003eea <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebe:	f7fd fdf1 	bl	8001aa4 <HAL_GetTick>
 8003ec2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ec4:	e00a      	b.n	8003edc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fd fded 	bl	8001aa4 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e14c      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003edc:	4b6a      	ldr	r3, [pc, #424]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0ee      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x5a2>
 8003ee8:	e014      	b.n	8003f14 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eea:	f7fd fddb 	bl	8001aa4 <HAL_GetTick>
 8003eee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ef0:	e00a      	b.n	8003f08 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef2:	f7fd fdd7 	bl	8001aa4 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e136      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f08:	4b5f      	ldr	r3, [pc, #380]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1ee      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 812b 	beq.w	8004174 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f1e:	4b5a      	ldr	r3, [pc, #360]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f26:	2b18      	cmp	r3, #24
 8003f28:	f000 80bb 	beq.w	80040a2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	f040 8095 	bne.w	8004060 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f36:	4b54      	ldr	r3, [pc, #336]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a53      	ldr	r2, [pc, #332]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003f3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f42:	f7fd fdaf 	bl	8001aa4 <HAL_GetTick>
 8003f46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4a:	f7fd fdab 	bl	8001aa4 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e10c      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f5c:	4b4a      	ldr	r3, [pc, #296]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f68:	4b47      	ldr	r3, [pc, #284]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003f6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f6c:	4b47      	ldr	r3, [pc, #284]	@ (800408c <HAL_RCC_OscConfig+0x768>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f78:	0112      	lsls	r2, r2, #4
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	4942      	ldr	r1, [pc, #264]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f86:	3b01      	subs	r3, #1
 8003f88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f90:	3b01      	subs	r3, #1
 8003f92:	025b      	lsls	r3, r3, #9
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	041b      	lsls	r3, r3, #16
 8003fa0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003faa:	3b01      	subs	r3, #1
 8003fac:	061b      	lsls	r3, r3, #24
 8003fae:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003fb2:	4935      	ldr	r1, [pc, #212]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003fb8:	4b33      	ldr	r3, [pc, #204]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbc:	4a32      	ldr	r2, [pc, #200]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003fc4:	4b30      	ldr	r3, [pc, #192]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003fc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fc8:	4b31      	ldr	r3, [pc, #196]	@ (8004090 <HAL_RCC_OscConfig+0x76c>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003fd0:	00d2      	lsls	r2, r2, #3
 8003fd2:	492d      	ldr	r1, [pc, #180]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fdc:	f023 020c 	bic.w	r2, r3, #12
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe4:	4928      	ldr	r1, [pc, #160]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003fea:	4b27      	ldr	r3, [pc, #156]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fee:	f023 0202 	bic.w	r2, r3, #2
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff6:	4924      	ldr	r1, [pc, #144]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ffc:	4b22      	ldr	r3, [pc, #136]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8003ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004000:	4a21      	ldr	r2, [pc, #132]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8004002:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004006:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004008:	4b1f      	ldr	r3, [pc, #124]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	4a1e      	ldr	r2, [pc, #120]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 800400e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004012:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004014:	4b1c      	ldr	r3, [pc, #112]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8004016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004018:	4a1b      	ldr	r2, [pc, #108]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 800401a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800401e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004020:	4b19      	ldr	r3, [pc, #100]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8004022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004024:	4a18      	ldr	r2, [pc, #96]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800402c:	4b16      	ldr	r3, [pc, #88]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a15      	ldr	r2, [pc, #84]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8004032:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fd fd34 	bl	8001aa4 <HAL_GetTick>
 800403c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004040:	f7fd fd30 	bl	8001aa4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e091      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004052:	4b0d      	ldr	r3, [pc, #52]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0x71c>
 800405e:	e089      	b.n	8004174 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004060:	4b09      	ldr	r3, [pc, #36]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a08      	ldr	r2, [pc, #32]	@ (8004088 <HAL_RCC_OscConfig+0x764>)
 8004066:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800406a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fd fd1a 	bl	8001aa4 <HAL_GetTick>
 8004070:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004072:	e00f      	b.n	8004094 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004074:	f7fd fd16 	bl	8001aa4 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d908      	bls.n	8004094 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e077      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
 8004086:	bf00      	nop
 8004088:	58024400 	.word	0x58024400
 800408c:	fffffc0c 	.word	0xfffffc0c
 8004090:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004094:	4b3a      	ldr	r3, [pc, #232]	@ (8004180 <HAL_RCC_OscConfig+0x85c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e9      	bne.n	8004074 <HAL_RCC_OscConfig+0x750>
 80040a0:	e068      	b.n	8004174 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80040a2:	4b37      	ldr	r3, [pc, #220]	@ (8004180 <HAL_RCC_OscConfig+0x85c>)
 80040a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80040a8:	4b35      	ldr	r3, [pc, #212]	@ (8004180 <HAL_RCC_OscConfig+0x85c>)
 80040aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ac:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d031      	beq.n	800411a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f003 0203 	and.w	r2, r3, #3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d12a      	bne.n	800411a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	091b      	lsrs	r3, r3, #4
 80040c8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d122      	bne.n	800411a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040de:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d11a      	bne.n	800411a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	0a5b      	lsrs	r3, r3, #9
 80040e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d111      	bne.n	800411a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	0c1b      	lsrs	r3, r3, #16
 80040fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004102:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004104:	429a      	cmp	r2, r3
 8004106:	d108      	bne.n	800411a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	0e1b      	lsrs	r3, r3, #24
 800410c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004114:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004116:	429a      	cmp	r2, r3
 8004118:	d001      	beq.n	800411e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e02b      	b.n	8004176 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800411e:	4b18      	ldr	r3, [pc, #96]	@ (8004180 <HAL_RCC_OscConfig+0x85c>)
 8004120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004122:	08db      	lsrs	r3, r3, #3
 8004124:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004128:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	429a      	cmp	r2, r3
 8004132:	d01f      	beq.n	8004174 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004134:	4b12      	ldr	r3, [pc, #72]	@ (8004180 <HAL_RCC_OscConfig+0x85c>)
 8004136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004138:	4a11      	ldr	r2, [pc, #68]	@ (8004180 <HAL_RCC_OscConfig+0x85c>)
 800413a:	f023 0301 	bic.w	r3, r3, #1
 800413e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004140:	f7fd fcb0 	bl	8001aa4 <HAL_GetTick>
 8004144:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004146:	bf00      	nop
 8004148:	f7fd fcac 	bl	8001aa4 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004150:	4293      	cmp	r3, r2
 8004152:	d0f9      	beq.n	8004148 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004154:	4b0a      	ldr	r3, [pc, #40]	@ (8004180 <HAL_RCC_OscConfig+0x85c>)
 8004156:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004158:	4b0a      	ldr	r3, [pc, #40]	@ (8004184 <HAL_RCC_OscConfig+0x860>)
 800415a:	4013      	ands	r3, r2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004160:	00d2      	lsls	r2, r2, #3
 8004162:	4907      	ldr	r1, [pc, #28]	@ (8004180 <HAL_RCC_OscConfig+0x85c>)
 8004164:	4313      	orrs	r3, r2
 8004166:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004168:	4b05      	ldr	r3, [pc, #20]	@ (8004180 <HAL_RCC_OscConfig+0x85c>)
 800416a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416c:	4a04      	ldr	r2, [pc, #16]	@ (8004180 <HAL_RCC_OscConfig+0x85c>)
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3730      	adds	r7, #48	@ 0x30
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	58024400 	.word	0x58024400
 8004184:	ffff0007 	.word	0xffff0007

08004188 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e19c      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800419c:	4b8a      	ldr	r3, [pc, #552]	@ (80043c8 <HAL_RCC_ClockConfig+0x240>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d910      	bls.n	80041cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041aa:	4b87      	ldr	r3, [pc, #540]	@ (80043c8 <HAL_RCC_ClockConfig+0x240>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f023 020f 	bic.w	r2, r3, #15
 80041b2:	4985      	ldr	r1, [pc, #532]	@ (80043c8 <HAL_RCC_ClockConfig+0x240>)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ba:	4b83      	ldr	r3, [pc, #524]	@ (80043c8 <HAL_RCC_ClockConfig+0x240>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e184      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d010      	beq.n	80041fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	4b7b      	ldr	r3, [pc, #492]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d908      	bls.n	80041fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041e8:	4b78      	ldr	r3, [pc, #480]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	4975      	ldr	r1, [pc, #468]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d010      	beq.n	8004228 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695a      	ldr	r2, [r3, #20]
 800420a:	4b70      	ldr	r3, [pc, #448]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004212:	429a      	cmp	r2, r3
 8004214:	d908      	bls.n	8004228 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004216:	4b6d      	ldr	r3, [pc, #436]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	496a      	ldr	r1, [pc, #424]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004224:	4313      	orrs	r3, r2
 8004226:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	2b00      	cmp	r3, #0
 8004232:	d010      	beq.n	8004256 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699a      	ldr	r2, [r3, #24]
 8004238:	4b64      	ldr	r3, [pc, #400]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004240:	429a      	cmp	r2, r3
 8004242:	d908      	bls.n	8004256 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004244:	4b61      	ldr	r3, [pc, #388]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	495e      	ldr	r1, [pc, #376]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004252:	4313      	orrs	r3, r2
 8004254:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b00      	cmp	r3, #0
 8004260:	d010      	beq.n	8004284 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69da      	ldr	r2, [r3, #28]
 8004266:	4b59      	ldr	r3, [pc, #356]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800426e:	429a      	cmp	r2, r3
 8004270:	d908      	bls.n	8004284 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004272:	4b56      	ldr	r3, [pc, #344]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	4953      	ldr	r1, [pc, #332]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004280:	4313      	orrs	r3, r2
 8004282:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d010      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	4b4d      	ldr	r3, [pc, #308]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	429a      	cmp	r2, r3
 800429e:	d908      	bls.n	80042b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a0:	4b4a      	ldr	r3, [pc, #296]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f023 020f 	bic.w	r2, r3, #15
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4947      	ldr	r1, [pc, #284]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d055      	beq.n	800436a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80042be:	4b43      	ldr	r3, [pc, #268]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	4940      	ldr	r1, [pc, #256]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d107      	bne.n	80042e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042d8:	4b3c      	ldr	r3, [pc, #240]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d121      	bne.n	8004328 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0f6      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d107      	bne.n	8004300 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042f0:	4b36      	ldr	r3, [pc, #216]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d115      	bne.n	8004328 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0ea      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d107      	bne.n	8004318 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004308:	4b30      	ldr	r3, [pc, #192]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004310:	2b00      	cmp	r3, #0
 8004312:	d109      	bne.n	8004328 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e0de      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004318:	4b2c      	ldr	r3, [pc, #176]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0d6      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004328:	4b28      	ldr	r3, [pc, #160]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f023 0207 	bic.w	r2, r3, #7
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	4925      	ldr	r1, [pc, #148]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004336:	4313      	orrs	r3, r2
 8004338:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800433a:	f7fd fbb3 	bl	8001aa4 <HAL_GetTick>
 800433e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004340:	e00a      	b.n	8004358 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004342:	f7fd fbaf 	bl	8001aa4 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004350:	4293      	cmp	r3, r2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e0be      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004358:	4b1c      	ldr	r3, [pc, #112]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	429a      	cmp	r2, r3
 8004368:	d1eb      	bne.n	8004342 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d010      	beq.n	8004398 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	4b14      	ldr	r3, [pc, #80]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	429a      	cmp	r2, r3
 8004384:	d208      	bcs.n	8004398 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004386:	4b11      	ldr	r3, [pc, #68]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	f023 020f 	bic.w	r2, r3, #15
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	490e      	ldr	r1, [pc, #56]	@ (80043cc <HAL_RCC_ClockConfig+0x244>)
 8004394:	4313      	orrs	r3, r2
 8004396:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004398:	4b0b      	ldr	r3, [pc, #44]	@ (80043c8 <HAL_RCC_ClockConfig+0x240>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d214      	bcs.n	80043d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a6:	4b08      	ldr	r3, [pc, #32]	@ (80043c8 <HAL_RCC_ClockConfig+0x240>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 020f 	bic.w	r2, r3, #15
 80043ae:	4906      	ldr	r1, [pc, #24]	@ (80043c8 <HAL_RCC_ClockConfig+0x240>)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b6:	4b04      	ldr	r3, [pc, #16]	@ (80043c8 <HAL_RCC_ClockConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d005      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e086      	b.n	80044d6 <HAL_RCC_ClockConfig+0x34e>
 80043c8:	52002000 	.word	0x52002000
 80043cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d010      	beq.n	80043fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	4b3f      	ldr	r3, [pc, #252]	@ (80044e0 <HAL_RCC_ClockConfig+0x358>)
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d208      	bcs.n	80043fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043ec:	4b3c      	ldr	r3, [pc, #240]	@ (80044e0 <HAL_RCC_ClockConfig+0x358>)
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	4939      	ldr	r1, [pc, #228]	@ (80044e0 <HAL_RCC_ClockConfig+0x358>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d010      	beq.n	800442c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695a      	ldr	r2, [r3, #20]
 800440e:	4b34      	ldr	r3, [pc, #208]	@ (80044e0 <HAL_RCC_ClockConfig+0x358>)
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004416:	429a      	cmp	r2, r3
 8004418:	d208      	bcs.n	800442c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800441a:	4b31      	ldr	r3, [pc, #196]	@ (80044e0 <HAL_RCC_ClockConfig+0x358>)
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	492e      	ldr	r1, [pc, #184]	@ (80044e0 <HAL_RCC_ClockConfig+0x358>)
 8004428:	4313      	orrs	r3, r2
 800442a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0310 	and.w	r3, r3, #16
 8004434:	2b00      	cmp	r3, #0
 8004436:	d010      	beq.n	800445a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699a      	ldr	r2, [r3, #24]
 800443c:	4b28      	ldr	r3, [pc, #160]	@ (80044e0 <HAL_RCC_ClockConfig+0x358>)
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004444:	429a      	cmp	r2, r3
 8004446:	d208      	bcs.n	800445a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004448:	4b25      	ldr	r3, [pc, #148]	@ (80044e0 <HAL_RCC_ClockConfig+0x358>)
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	4922      	ldr	r1, [pc, #136]	@ (80044e0 <HAL_RCC_ClockConfig+0x358>)
 8004456:	4313      	orrs	r3, r2
 8004458:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b00      	cmp	r3, #0
 8004464:	d010      	beq.n	8004488 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69da      	ldr	r2, [r3, #28]
 800446a:	4b1d      	ldr	r3, [pc, #116]	@ (80044e0 <HAL_RCC_ClockConfig+0x358>)
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004472:	429a      	cmp	r2, r3
 8004474:	d208      	bcs.n	8004488 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004476:	4b1a      	ldr	r3, [pc, #104]	@ (80044e0 <HAL_RCC_ClockConfig+0x358>)
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	4917      	ldr	r1, [pc, #92]	@ (80044e0 <HAL_RCC_ClockConfig+0x358>)
 8004484:	4313      	orrs	r3, r2
 8004486:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004488:	f000 f834 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 800448c:	4602      	mov	r2, r0
 800448e:	4b14      	ldr	r3, [pc, #80]	@ (80044e0 <HAL_RCC_ClockConfig+0x358>)
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	0a1b      	lsrs	r3, r3, #8
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	4912      	ldr	r1, [pc, #72]	@ (80044e4 <HAL_RCC_ClockConfig+0x35c>)
 800449a:	5ccb      	ldrb	r3, [r1, r3]
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
 80044a4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80044a6:	4b0e      	ldr	r3, [pc, #56]	@ (80044e0 <HAL_RCC_ClockConfig+0x358>)
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	4a0d      	ldr	r2, [pc, #52]	@ (80044e4 <HAL_RCC_ClockConfig+0x35c>)
 80044b0:	5cd3      	ldrb	r3, [r2, r3]
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
 80044bc:	4a0a      	ldr	r2, [pc, #40]	@ (80044e8 <HAL_RCC_ClockConfig+0x360>)
 80044be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044c0:	4a0a      	ldr	r2, [pc, #40]	@ (80044ec <HAL_RCC_ClockConfig+0x364>)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80044c6:	4b0a      	ldr	r3, [pc, #40]	@ (80044f0 <HAL_RCC_ClockConfig+0x368>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fd faa0 	bl	8001a10 <HAL_InitTick>
 80044d0:	4603      	mov	r3, r0
 80044d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	58024400 	.word	0x58024400
 80044e4:	080082d8 	.word	0x080082d8
 80044e8:	24000004 	.word	0x24000004
 80044ec:	24000000 	.word	0x24000000
 80044f0:	24000008 	.word	0x24000008

080044f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b089      	sub	sp, #36	@ 0x24
 80044f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044fa:	4bb3      	ldr	r3, [pc, #716]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004502:	2b18      	cmp	r3, #24
 8004504:	f200 8155 	bhi.w	80047b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004508:	a201      	add	r2, pc, #4	@ (adr r2, 8004510 <HAL_RCC_GetSysClockFreq+0x1c>)
 800450a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450e:	bf00      	nop
 8004510:	08004575 	.word	0x08004575
 8004514:	080047b3 	.word	0x080047b3
 8004518:	080047b3 	.word	0x080047b3
 800451c:	080047b3 	.word	0x080047b3
 8004520:	080047b3 	.word	0x080047b3
 8004524:	080047b3 	.word	0x080047b3
 8004528:	080047b3 	.word	0x080047b3
 800452c:	080047b3 	.word	0x080047b3
 8004530:	0800459b 	.word	0x0800459b
 8004534:	080047b3 	.word	0x080047b3
 8004538:	080047b3 	.word	0x080047b3
 800453c:	080047b3 	.word	0x080047b3
 8004540:	080047b3 	.word	0x080047b3
 8004544:	080047b3 	.word	0x080047b3
 8004548:	080047b3 	.word	0x080047b3
 800454c:	080047b3 	.word	0x080047b3
 8004550:	080045a1 	.word	0x080045a1
 8004554:	080047b3 	.word	0x080047b3
 8004558:	080047b3 	.word	0x080047b3
 800455c:	080047b3 	.word	0x080047b3
 8004560:	080047b3 	.word	0x080047b3
 8004564:	080047b3 	.word	0x080047b3
 8004568:	080047b3 	.word	0x080047b3
 800456c:	080047b3 	.word	0x080047b3
 8004570:	080045a7 	.word	0x080045a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004574:	4b94      	ldr	r3, [pc, #592]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	d009      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004580:	4b91      	ldr	r3, [pc, #580]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	08db      	lsrs	r3, r3, #3
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	4a90      	ldr	r2, [pc, #576]	@ (80047cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
 8004590:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004592:	e111      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004594:	4b8d      	ldr	r3, [pc, #564]	@ (80047cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004596:	61bb      	str	r3, [r7, #24]
      break;
 8004598:	e10e      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800459a:	4b8d      	ldr	r3, [pc, #564]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800459c:	61bb      	str	r3, [r7, #24]
      break;
 800459e:	e10b      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80045a0:	4b8c      	ldr	r3, [pc, #560]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80045a2:	61bb      	str	r3, [r7, #24]
      break;
 80045a4:	e108      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045a6:	4b88      	ldr	r3, [pc, #544]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80045b0:	4b85      	ldr	r3, [pc, #532]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b4:	091b      	lsrs	r3, r3, #4
 80045b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80045bc:	4b82      	ldr	r3, [pc, #520]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80045c6:	4b80      	ldr	r3, [pc, #512]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ca:	08db      	lsrs	r3, r3, #3
 80045cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80e1 	beq.w	80047ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	f000 8083 	beq.w	80046f8 <HAL_RCC_GetSysClockFreq+0x204>
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	f200 80a1 	bhi.w	800473c <HAL_RCC_GetSysClockFreq+0x248>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0x114>
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d056      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004606:	e099      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004608:	4b6f      	ldr	r3, [pc, #444]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b00      	cmp	r3, #0
 8004612:	d02d      	beq.n	8004670 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004614:	4b6c      	ldr	r3, [pc, #432]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	08db      	lsrs	r3, r3, #3
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	4a6b      	ldr	r2, [pc, #428]	@ (80047cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
 8004624:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	ee07 3a90 	vmov	s15, r3
 800462c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463e:	4b62      	ldr	r3, [pc, #392]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004652:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80047d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800465a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800466e:	e087      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80047dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800467e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004682:	4b51      	ldr	r3, [pc, #324]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004692:	ed97 6a02 	vldr	s12, [r7, #8]
 8004696:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80047d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800469a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800469e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046b2:	e065      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80047e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c6:	4b40      	ldr	r3, [pc, #256]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80047d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046f6:	e043      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80047e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800470a:	4b2f      	ldr	r3, [pc, #188]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800470c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471a:	ed97 6a02 	vldr	s12, [r7, #8]
 800471e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80047d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800472a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800472e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004736:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800473a:	e021      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004746:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80047e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800474a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800474e:	4b1e      	ldr	r3, [pc, #120]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004762:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80047d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800477e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004780:	4b11      	ldr	r3, [pc, #68]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004784:	0a5b      	lsrs	r3, r3, #9
 8004786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800478a:	3301      	adds	r3, #1
 800478c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	ee07 3a90 	vmov	s15, r3
 8004794:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004798:	edd7 6a07 	vldr	s13, [r7, #28]
 800479c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a4:	ee17 3a90 	vmov	r3, s15
 80047a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80047aa:	e005      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	61bb      	str	r3, [r7, #24]
      break;
 80047b0:	e002      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80047b2:	4b07      	ldr	r3, [pc, #28]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047b4:	61bb      	str	r3, [r7, #24]
      break;
 80047b6:	bf00      	nop
  }

  return sysclockfreq;
 80047b8:	69bb      	ldr	r3, [r7, #24]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3724      	adds	r7, #36	@ 0x24
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	58024400 	.word	0x58024400
 80047cc:	03d09000 	.word	0x03d09000
 80047d0:	003d0900 	.word	0x003d0900
 80047d4:	016e3600 	.word	0x016e3600
 80047d8:	46000000 	.word	0x46000000
 80047dc:	4c742400 	.word	0x4c742400
 80047e0:	4a742400 	.word	0x4a742400
 80047e4:	4bb71b00 	.word	0x4bb71b00

080047e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80047ee:	f7ff fe81 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 80047f2:	4602      	mov	r2, r0
 80047f4:	4b10      	ldr	r3, [pc, #64]	@ (8004838 <HAL_RCC_GetHCLKFreq+0x50>)
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	0a1b      	lsrs	r3, r3, #8
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	490f      	ldr	r1, [pc, #60]	@ (800483c <HAL_RCC_GetHCLKFreq+0x54>)
 8004800:	5ccb      	ldrb	r3, [r1, r3]
 8004802:	f003 031f 	and.w	r3, r3, #31
 8004806:	fa22 f303 	lsr.w	r3, r2, r3
 800480a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800480c:	4b0a      	ldr	r3, [pc, #40]	@ (8004838 <HAL_RCC_GetHCLKFreq+0x50>)
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	4a09      	ldr	r2, [pc, #36]	@ (800483c <HAL_RCC_GetHCLKFreq+0x54>)
 8004816:	5cd3      	ldrb	r3, [r2, r3]
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	fa22 f303 	lsr.w	r3, r2, r3
 8004822:	4a07      	ldr	r2, [pc, #28]	@ (8004840 <HAL_RCC_GetHCLKFreq+0x58>)
 8004824:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004826:	4a07      	ldr	r2, [pc, #28]	@ (8004844 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800482c:	4b04      	ldr	r3, [pc, #16]	@ (8004840 <HAL_RCC_GetHCLKFreq+0x58>)
 800482e:	681b      	ldr	r3, [r3, #0]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	58024400 	.word	0x58024400
 800483c:	080082d8 	.word	0x080082d8
 8004840:	24000004 	.word	0x24000004
 8004844:	24000000 	.word	0x24000000

08004848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800484c:	f7ff ffcc 	bl	80047e8 <HAL_RCC_GetHCLKFreq>
 8004850:	4602      	mov	r2, r0
 8004852:	4b06      	ldr	r3, [pc, #24]	@ (800486c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	4904      	ldr	r1, [pc, #16]	@ (8004870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800485e:	5ccb      	ldrb	r3, [r1, r3]
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	58024400 	.word	0x58024400
 8004870:	080082d8 	.word	0x080082d8

08004874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004878:	f7ff ffb6 	bl	80047e8 <HAL_RCC_GetHCLKFreq>
 800487c:	4602      	mov	r2, r0
 800487e:	4b06      	ldr	r3, [pc, #24]	@ (8004898 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	0a1b      	lsrs	r3, r3, #8
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	4904      	ldr	r1, [pc, #16]	@ (800489c <HAL_RCC_GetPCLK2Freq+0x28>)
 800488a:	5ccb      	ldrb	r3, [r1, r3]
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004894:	4618      	mov	r0, r3
 8004896:	bd80      	pop	{r7, pc}
 8004898:	58024400 	.word	0x58024400
 800489c:	080082d8 	.word	0x080082d8

080048a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048a4:	b0c8      	sub	sp, #288	@ 0x120
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048ac:	2300      	movs	r3, #0
 80048ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048b2:	2300      	movs	r3, #0
 80048b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80048c4:	2500      	movs	r5, #0
 80048c6:	ea54 0305 	orrs.w	r3, r4, r5
 80048ca:	d049      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80048cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048d6:	d02f      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80048d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048dc:	d828      	bhi.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048e2:	d01a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80048e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048e8:	d822      	bhi.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80048ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048f2:	d007      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048f4:	e01c      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f6:	4ba7      	ldr	r3, [pc, #668]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fa:	4aa6      	ldr	r2, [pc, #664]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004900:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004902:	e01a      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004908:	3308      	adds	r3, #8
 800490a:	2102      	movs	r1, #2
 800490c:	4618      	mov	r0, r3
 800490e:	f001 fc43 	bl	8006198 <RCCEx_PLL2_Config>
 8004912:	4603      	mov	r3, r0
 8004914:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004918:	e00f      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800491a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800491e:	3328      	adds	r3, #40	@ 0x28
 8004920:	2102      	movs	r1, #2
 8004922:	4618      	mov	r0, r3
 8004924:	f001 fcea 	bl	80062fc <RCCEx_PLL3_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800492e:	e004      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004936:	e000      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800493a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10a      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004942:	4b94      	ldr	r3, [pc, #592]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004946:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800494a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800494e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004950:	4a90      	ldr	r2, [pc, #576]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004952:	430b      	orrs	r3, r1
 8004954:	6513      	str	r3, [r2, #80]	@ 0x50
 8004956:	e003      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004958:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800495c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004968:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800496c:	f04f 0900 	mov.w	r9, #0
 8004970:	ea58 0309 	orrs.w	r3, r8, r9
 8004974:	d047      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004976:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800497a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800497c:	2b04      	cmp	r3, #4
 800497e:	d82a      	bhi.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004980:	a201      	add	r2, pc, #4	@ (adr r2, 8004988 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004986:	bf00      	nop
 8004988:	0800499d 	.word	0x0800499d
 800498c:	080049ab 	.word	0x080049ab
 8004990:	080049c1 	.word	0x080049c1
 8004994:	080049df 	.word	0x080049df
 8004998:	080049df 	.word	0x080049df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800499c:	4b7d      	ldr	r3, [pc, #500]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800499e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a0:	4a7c      	ldr	r2, [pc, #496]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049a8:	e01a      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049ae:	3308      	adds	r3, #8
 80049b0:	2100      	movs	r1, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f001 fbf0 	bl	8006198 <RCCEx_PLL2_Config>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049be:	e00f      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049c4:	3328      	adds	r3, #40	@ 0x28
 80049c6:	2100      	movs	r1, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 fc97 	bl	80062fc <RCCEx_PLL3_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049d4:	e004      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80049dc:	e000      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80049de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ec:	f023 0107 	bic.w	r1, r3, #7
 80049f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f6:	4a67      	ldr	r2, [pc, #412]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049f8:	430b      	orrs	r3, r1
 80049fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80049fc:	e003      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a02:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004a12:	f04f 0b00 	mov.w	fp, #0
 8004a16:	ea5a 030b 	orrs.w	r3, sl, fp
 8004a1a:	d054      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a22:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004a26:	d036      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004a28:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004a2c:	d82f      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004a2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a32:	d032      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004a34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a38:	d829      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004a3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a3c:	d02f      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004a3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a40:	d825      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004a42:	2b80      	cmp	r3, #128	@ 0x80
 8004a44:	d018      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004a46:	2b80      	cmp	r3, #128	@ 0x80
 8004a48:	d821      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004a4e:	2b40      	cmp	r3, #64	@ 0x40
 8004a50:	d007      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004a52:	e01c      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a54:	4b4f      	ldr	r3, [pc, #316]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a58:	4a4e      	ldr	r2, [pc, #312]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004a60:	e01e      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a66:	3308      	adds	r3, #8
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f001 fb94 	bl	8006198 <RCCEx_PLL2_Config>
 8004a70:	4603      	mov	r3, r0
 8004a72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004a76:	e013      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a7c:	3328      	adds	r3, #40	@ 0x28
 8004a7e:	2100      	movs	r1, #0
 8004a80:	4618      	mov	r0, r3
 8004a82:	f001 fc3b 	bl	80062fc <RCCEx_PLL3_Config>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a94:	e004      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004a96:	bf00      	nop
 8004a98:	e002      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004a9a:	bf00      	nop
 8004a9c:	e000      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aa0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004aa8:	4b3a      	ldr	r3, [pc, #232]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aac:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab6:	4a37      	ldr	r2, [pc, #220]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6513      	str	r3, [r2, #80]	@ 0x50
 8004abc:	e003      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ac2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004ad2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004adc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	d05c      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aec:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004af0:	d03b      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004af2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004af6:	d834      	bhi.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004afc:	d037      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b02:	d82e      	bhi.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004b04:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b08:	d033      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004b0a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b0e:	d828      	bhi.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004b10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b14:	d01a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b1a:	d822      	bhi.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b24:	d007      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004b26:	e01c      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b28:	4b1a      	ldr	r3, [pc, #104]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2c:	4a19      	ldr	r2, [pc, #100]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004b34:	e01e      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b3a:	3308      	adds	r3, #8
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f001 fb2a 	bl	8006198 <RCCEx_PLL2_Config>
 8004b44:	4603      	mov	r3, r0
 8004b46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004b4a:	e013      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b50:	3328      	adds	r3, #40	@ 0x28
 8004b52:	2100      	movs	r1, #0
 8004b54:	4618      	mov	r0, r3
 8004b56:	f001 fbd1 	bl	80062fc <RCCEx_PLL3_Config>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004b60:	e008      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b68:	e004      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004b6a:	bf00      	nop
 8004b6c:	e002      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004b6e:	bf00      	nop
 8004b70:	e000      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10d      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004b7c:	4b05      	ldr	r3, [pc, #20]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b80:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b8a:	4a02      	ldr	r2, [pc, #8]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b90:	e006      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004b92:	bf00      	nop
 8004b94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004bac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004bb6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	d03a      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bc6:	2b30      	cmp	r3, #48	@ 0x30
 8004bc8:	d01f      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004bca:	2b30      	cmp	r3, #48	@ 0x30
 8004bcc:	d819      	bhi.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	d00c      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	d815      	bhi.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d019      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004bda:	2b10      	cmp	r3, #16
 8004bdc:	d111      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bde:	4bae      	ldr	r3, [pc, #696]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be2:	4aad      	ldr	r2, [pc, #692]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004be8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004bea:	e011      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	2102      	movs	r1, #2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f001 facf 	bl	8006198 <RCCEx_PLL2_Config>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004c00:	e006      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c08:	e002      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004c0a:	bf00      	nop
 8004c0c:	e000      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004c0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10a      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004c18:	4b9f      	ldr	r3, [pc, #636]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c1c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c26:	4a9c      	ldr	r2, [pc, #624]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c2c:	e003      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004c42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004c46:	2300      	movs	r3, #0
 8004c48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004c4c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4313      	orrs	r3, r2
 8004c54:	d051      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c60:	d035      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004c62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c66:	d82e      	bhi.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004c68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c6c:	d031      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004c6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c72:	d828      	bhi.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004c74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c78:	d01a      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004c7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c7e:	d822      	bhi.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004c84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c88:	d007      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004c8a:	e01c      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c8c:	4b82      	ldr	r3, [pc, #520]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c90:	4a81      	ldr	r2, [pc, #516]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c98:	e01c      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c9e:	3308      	adds	r3, #8
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f001 fa78 	bl	8006198 <RCCEx_PLL2_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004cae:	e011      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cb4:	3328      	adds	r3, #40	@ 0x28
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f001 fb1f 	bl	80062fc <RCCEx_PLL3_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004cc4:	e006      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004ccc:	e002      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004cce:	bf00      	nop
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10a      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004cdc:	4b6e      	ldr	r3, [pc, #440]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ce0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ce8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cea:	4a6b      	ldr	r2, [pc, #428]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cec:	430b      	orrs	r3, r1
 8004cee:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cf0:	e003      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cf6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d02:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004d06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004d10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004d14:	460b      	mov	r3, r1
 8004d16:	4313      	orrs	r3, r2
 8004d18:	d053      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d24:	d033      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004d26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d2a:	d82c      	bhi.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004d2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d30:	d02f      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004d32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d36:	d826      	bhi.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004d38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d3c:	d02b      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d42:	d820      	bhi.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004d44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d48:	d012      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004d4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d4e:	d81a      	bhi.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d022      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d58:	d115      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d5e:	3308      	adds	r3, #8
 8004d60:	2101      	movs	r1, #1
 8004d62:	4618      	mov	r0, r3
 8004d64:	f001 fa18 	bl	8006198 <RCCEx_PLL2_Config>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d6e:	e015      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d74:	3328      	adds	r3, #40	@ 0x28
 8004d76:	2101      	movs	r1, #1
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f001 fabf 	bl	80062fc <RCCEx_PLL3_Config>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d84:	e00a      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d8c:	e006      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004d8e:	bf00      	nop
 8004d90:	e004      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004d92:	bf00      	nop
 8004d94:	e002      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004d96:	bf00      	nop
 8004d98:	e000      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004da4:	4b3c      	ldr	r3, [pc, #240]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004da8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004db0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004db2:	4a39      	ldr	r2, [pc, #228]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004db4:	430b      	orrs	r3, r1
 8004db6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004db8:	e003      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004dbe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dca:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004dce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004dd8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4313      	orrs	r3, r2
 8004de0:	d060      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004de6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004dea:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004dee:	d039      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004df0:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004df4:	d832      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dfa:	d035      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e00:	d82c      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e06:	d031      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e0c:	d826      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004e0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e12:	d02d      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004e14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e18:	d820      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004e1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e1e:	d012      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004e20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e24:	d81a      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d024      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004e2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e2e:	d115      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e34:	3308      	adds	r3, #8
 8004e36:	2101      	movs	r1, #1
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f001 f9ad 	bl	8006198 <RCCEx_PLL2_Config>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e44:	e017      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e4a:	3328      	adds	r3, #40	@ 0x28
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f001 fa54 	bl	80062fc <RCCEx_PLL3_Config>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e5a:	e00c      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004e62:	e008      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e64:	bf00      	nop
 8004e66:	e006      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e68:	bf00      	nop
 8004e6a:	e004      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e6c:	bf00      	nop
 8004e6e:	e002      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e70:	bf00      	nop
 8004e72:	e000      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10e      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e7e:	4b06      	ldr	r3, [pc, #24]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e82:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e8e:	4a02      	ldr	r2, [pc, #8]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e90:	430b      	orrs	r3, r1
 8004e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e94:	e006      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004e96:	bf00      	nop
 8004e98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ea0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004eba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	d037      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ec8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004eca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ece:	d00e      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004ed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ed4:	d816      	bhi.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d018      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004eda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ede:	d111      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ee0:	4bc4      	ldr	r3, [pc, #784]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee4:	4ac3      	ldr	r2, [pc, #780]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ee6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004eec:	e00f      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f001 f94e 	bl	8006198 <RCCEx_PLL2_Config>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f02:	e004      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f0a:	e000      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10a      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f16:	4bb7      	ldr	r3, [pc, #732]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f1a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f24:	4ab3      	ldr	r2, [pc, #716]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f26:	430b      	orrs	r3, r1
 8004f28:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f2a:	e003      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f30:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004f40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f44:	2300      	movs	r3, #0
 8004f46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004f4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4313      	orrs	r3, r2
 8004f52:	d039      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d81c      	bhi.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f64:	08004fa1 	.word	0x08004fa1
 8004f68:	08004f75 	.word	0x08004f75
 8004f6c:	08004f83 	.word	0x08004f83
 8004f70:	08004fa1 	.word	0x08004fa1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f74:	4b9f      	ldr	r3, [pc, #636]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f78:	4a9e      	ldr	r2, [pc, #632]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f80:	e00f      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f86:	3308      	adds	r3, #8
 8004f88:	2102      	movs	r1, #2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f001 f904 	bl	8006198 <RCCEx_PLL2_Config>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f96:	e004      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fa2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10a      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004faa:	4b92      	ldr	r3, [pc, #584]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fae:	f023 0103 	bic.w	r1, r3, #3
 8004fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb8:	4a8e      	ldr	r2, [pc, #568]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004fbe:	e003      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fc4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004fd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004fde:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f000 8099 	beq.w	800511c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fea:	4b83      	ldr	r3, [pc, #524]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a82      	ldr	r2, [pc, #520]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ff4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ff6:	f7fc fd55 	bl	8001aa4 <HAL_GetTick>
 8004ffa:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ffe:	e00b      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005000:	f7fc fd50 	bl	8001aa4 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b64      	cmp	r3, #100	@ 0x64
 800500e:	d903      	bls.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005016:	e005      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005018:	4b77      	ldr	r3, [pc, #476]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0ed      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005024:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005028:	2b00      	cmp	r3, #0
 800502a:	d173      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800502c:	4b71      	ldr	r3, [pc, #452]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800502e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005030:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005034:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005038:	4053      	eors	r3, r2
 800503a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800503e:	2b00      	cmp	r3, #0
 8005040:	d015      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005042:	4b6c      	ldr	r3, [pc, #432]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005046:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800504a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800504e:	4b69      	ldr	r3, [pc, #420]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005052:	4a68      	ldr	r2, [pc, #416]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005058:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800505a:	4b66      	ldr	r3, [pc, #408]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505e:	4a65      	ldr	r2, [pc, #404]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005060:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005064:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005066:	4a63      	ldr	r2, [pc, #396]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800506c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800506e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005072:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005076:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800507a:	d118      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507c:	f7fc fd12 	bl	8001aa4 <HAL_GetTick>
 8005080:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005084:	e00d      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005086:	f7fc fd0d 	bl	8001aa4 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005090:	1ad2      	subs	r2, r2, r3
 8005092:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005096:	429a      	cmp	r2, r3
 8005098:	d903      	bls.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80050a0:	e005      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050a2:	4b54      	ldr	r3, [pc, #336]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0eb      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80050ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d129      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050c6:	d10e      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80050c8:	4b4a      	ldr	r3, [pc, #296]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80050d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050d8:	091a      	lsrs	r2, r3, #4
 80050da:	4b48      	ldr	r3, [pc, #288]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80050dc:	4013      	ands	r3, r2
 80050de:	4a45      	ldr	r2, [pc, #276]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050e0:	430b      	orrs	r3, r1
 80050e2:	6113      	str	r3, [r2, #16]
 80050e4:	e005      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80050e6:	4b43      	ldr	r3, [pc, #268]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	4a42      	ldr	r2, [pc, #264]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80050f0:	6113      	str	r3, [r2, #16]
 80050f2:	4b40      	ldr	r3, [pc, #256]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050f4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80050f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005102:	4a3c      	ldr	r2, [pc, #240]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005104:	430b      	orrs	r3, r1
 8005106:	6713      	str	r3, [r2, #112]	@ 0x70
 8005108:	e008      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800510a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800510e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005112:	e003      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005114:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005118:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800511c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	f002 0301 	and.w	r3, r2, #1
 8005128:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800512c:	2300      	movs	r3, #0
 800512e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005132:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005136:	460b      	mov	r3, r1
 8005138:	4313      	orrs	r3, r2
 800513a:	f000 8090 	beq.w	800525e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800513e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005142:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005146:	2b28      	cmp	r3, #40	@ 0x28
 8005148:	d870      	bhi.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800514a:	a201      	add	r2, pc, #4	@ (adr r2, 8005150 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005150:	08005235 	.word	0x08005235
 8005154:	0800522d 	.word	0x0800522d
 8005158:	0800522d 	.word	0x0800522d
 800515c:	0800522d 	.word	0x0800522d
 8005160:	0800522d 	.word	0x0800522d
 8005164:	0800522d 	.word	0x0800522d
 8005168:	0800522d 	.word	0x0800522d
 800516c:	0800522d 	.word	0x0800522d
 8005170:	08005201 	.word	0x08005201
 8005174:	0800522d 	.word	0x0800522d
 8005178:	0800522d 	.word	0x0800522d
 800517c:	0800522d 	.word	0x0800522d
 8005180:	0800522d 	.word	0x0800522d
 8005184:	0800522d 	.word	0x0800522d
 8005188:	0800522d 	.word	0x0800522d
 800518c:	0800522d 	.word	0x0800522d
 8005190:	08005217 	.word	0x08005217
 8005194:	0800522d 	.word	0x0800522d
 8005198:	0800522d 	.word	0x0800522d
 800519c:	0800522d 	.word	0x0800522d
 80051a0:	0800522d 	.word	0x0800522d
 80051a4:	0800522d 	.word	0x0800522d
 80051a8:	0800522d 	.word	0x0800522d
 80051ac:	0800522d 	.word	0x0800522d
 80051b0:	08005235 	.word	0x08005235
 80051b4:	0800522d 	.word	0x0800522d
 80051b8:	0800522d 	.word	0x0800522d
 80051bc:	0800522d 	.word	0x0800522d
 80051c0:	0800522d 	.word	0x0800522d
 80051c4:	0800522d 	.word	0x0800522d
 80051c8:	0800522d 	.word	0x0800522d
 80051cc:	0800522d 	.word	0x0800522d
 80051d0:	08005235 	.word	0x08005235
 80051d4:	0800522d 	.word	0x0800522d
 80051d8:	0800522d 	.word	0x0800522d
 80051dc:	0800522d 	.word	0x0800522d
 80051e0:	0800522d 	.word	0x0800522d
 80051e4:	0800522d 	.word	0x0800522d
 80051e8:	0800522d 	.word	0x0800522d
 80051ec:	0800522d 	.word	0x0800522d
 80051f0:	08005235 	.word	0x08005235
 80051f4:	58024400 	.word	0x58024400
 80051f8:	58024800 	.word	0x58024800
 80051fc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005200:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005204:	3308      	adds	r3, #8
 8005206:	2101      	movs	r1, #1
 8005208:	4618      	mov	r0, r3
 800520a:	f000 ffc5 	bl	8006198 <RCCEx_PLL2_Config>
 800520e:	4603      	mov	r3, r0
 8005210:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005214:	e00f      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005216:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800521a:	3328      	adds	r3, #40	@ 0x28
 800521c:	2101      	movs	r1, #1
 800521e:	4618      	mov	r0, r3
 8005220:	f001 f86c 	bl	80062fc <RCCEx_PLL3_Config>
 8005224:	4603      	mov	r3, r0
 8005226:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800522a:	e004      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005232:	e000      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005236:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10b      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800523e:	4bc0      	ldr	r3, [pc, #768]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005242:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800524a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800524e:	4abc      	ldr	r2, [pc, #752]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005250:	430b      	orrs	r3, r1
 8005252:	6553      	str	r3, [r2, #84]	@ 0x54
 8005254:	e003      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005256:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800525a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800525e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005266:	f002 0302 	and.w	r3, r2, #2
 800526a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800526e:	2300      	movs	r3, #0
 8005270:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005274:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005278:	460b      	mov	r3, r1
 800527a:	4313      	orrs	r3, r2
 800527c:	d043      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800527e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005286:	2b05      	cmp	r3, #5
 8005288:	d824      	bhi.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800528a:	a201      	add	r2, pc, #4	@ (adr r2, 8005290 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800528c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005290:	080052dd 	.word	0x080052dd
 8005294:	080052a9 	.word	0x080052a9
 8005298:	080052bf 	.word	0x080052bf
 800529c:	080052dd 	.word	0x080052dd
 80052a0:	080052dd 	.word	0x080052dd
 80052a4:	080052dd 	.word	0x080052dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052ac:	3308      	adds	r3, #8
 80052ae:	2101      	movs	r1, #1
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 ff71 	bl	8006198 <RCCEx_PLL2_Config>
 80052b6:	4603      	mov	r3, r0
 80052b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80052bc:	e00f      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052c2:	3328      	adds	r3, #40	@ 0x28
 80052c4:	2101      	movs	r1, #1
 80052c6:	4618      	mov	r0, r3
 80052c8:	f001 f818 	bl	80062fc <RCCEx_PLL3_Config>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80052d2:	e004      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80052da:	e000      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80052dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10b      	bne.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052e6:	4b96      	ldr	r3, [pc, #600]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80052e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ea:	f023 0107 	bic.w	r1, r3, #7
 80052ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052f6:	4a92      	ldr	r2, [pc, #584]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80052f8:	430b      	orrs	r3, r1
 80052fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80052fc:	e003      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005302:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	f002 0304 	and.w	r3, r2, #4
 8005312:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005316:	2300      	movs	r3, #0
 8005318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800531c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005320:	460b      	mov	r3, r1
 8005322:	4313      	orrs	r3, r2
 8005324:	d043      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005326:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800532a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800532e:	2b05      	cmp	r3, #5
 8005330:	d824      	bhi.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005332:	a201      	add	r2, pc, #4	@ (adr r2, 8005338 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005338:	08005385 	.word	0x08005385
 800533c:	08005351 	.word	0x08005351
 8005340:	08005367 	.word	0x08005367
 8005344:	08005385 	.word	0x08005385
 8005348:	08005385 	.word	0x08005385
 800534c:	08005385 	.word	0x08005385
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005354:	3308      	adds	r3, #8
 8005356:	2101      	movs	r1, #1
 8005358:	4618      	mov	r0, r3
 800535a:	f000 ff1d 	bl	8006198 <RCCEx_PLL2_Config>
 800535e:	4603      	mov	r3, r0
 8005360:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005364:	e00f      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800536a:	3328      	adds	r3, #40	@ 0x28
 800536c:	2101      	movs	r1, #1
 800536e:	4618      	mov	r0, r3
 8005370:	f000 ffc4 	bl	80062fc <RCCEx_PLL3_Config>
 8005374:	4603      	mov	r3, r0
 8005376:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800537a:	e004      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005382:	e000      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005386:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10b      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800538e:	4b6c      	ldr	r3, [pc, #432]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005392:	f023 0107 	bic.w	r1, r3, #7
 8005396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800539a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800539e:	4a68      	ldr	r2, [pc, #416]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80053a0:	430b      	orrs	r3, r1
 80053a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80053a4:	e003      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b6:	f002 0320 	and.w	r3, r2, #32
 80053ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053be:	2300      	movs	r3, #0
 80053c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053c8:	460b      	mov	r3, r1
 80053ca:	4313      	orrs	r3, r2
 80053cc:	d055      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80053ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053da:	d033      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80053dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053e0:	d82c      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80053e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053e6:	d02f      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80053e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ec:	d826      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80053ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053f2:	d02b      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80053f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053f8:	d820      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80053fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053fe:	d012      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005400:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005404:	d81a      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005406:	2b00      	cmp	r3, #0
 8005408:	d022      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800540a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800540e:	d115      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005414:	3308      	adds	r3, #8
 8005416:	2100      	movs	r1, #0
 8005418:	4618      	mov	r0, r3
 800541a:	f000 febd 	bl	8006198 <RCCEx_PLL2_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005424:	e015      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005426:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800542a:	3328      	adds	r3, #40	@ 0x28
 800542c:	2102      	movs	r1, #2
 800542e:	4618      	mov	r0, r3
 8005430:	f000 ff64 	bl	80062fc <RCCEx_PLL3_Config>
 8005434:	4603      	mov	r3, r0
 8005436:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800543a:	e00a      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005442:	e006      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005444:	bf00      	nop
 8005446:	e004      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005448:	bf00      	nop
 800544a:	e002      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800544c:	bf00      	nop
 800544e:	e000      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005452:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10b      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800545a:	4b39      	ldr	r3, [pc, #228]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800545c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800545e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005466:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800546a:	4a35      	ldr	r2, [pc, #212]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800546c:	430b      	orrs	r3, r1
 800546e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005470:	e003      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005472:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005476:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800547a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005482:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005486:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800548a:	2300      	movs	r3, #0
 800548c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005490:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005494:	460b      	mov	r3, r1
 8005496:	4313      	orrs	r3, r2
 8005498:	d058      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800549a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800549e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80054a6:	d033      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80054a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80054ac:	d82c      	bhi.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80054ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b2:	d02f      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80054b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b8:	d826      	bhi.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80054ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054be:	d02b      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80054c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054c4:	d820      	bhi.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80054c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054ca:	d012      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80054cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054d0:	d81a      	bhi.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d022      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80054d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054da:	d115      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054e0:	3308      	adds	r3, #8
 80054e2:	2100      	movs	r1, #0
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fe57 	bl	8006198 <RCCEx_PLL2_Config>
 80054ea:	4603      	mov	r3, r0
 80054ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80054f0:	e015      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054f6:	3328      	adds	r3, #40	@ 0x28
 80054f8:	2102      	movs	r1, #2
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 fefe 	bl	80062fc <RCCEx_PLL3_Config>
 8005500:	4603      	mov	r3, r0
 8005502:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005506:	e00a      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800550e:	e006      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005510:	bf00      	nop
 8005512:	e004      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005514:	bf00      	nop
 8005516:	e002      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005518:	bf00      	nop
 800551a:	e000      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800551c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800551e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10e      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005526:	4b06      	ldr	r3, [pc, #24]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800552a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800552e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005532:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005536:	4a02      	ldr	r2, [pc, #8]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005538:	430b      	orrs	r3, r1
 800553a:	6593      	str	r3, [r2, #88]	@ 0x58
 800553c:	e006      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800553e:	bf00      	nop
 8005540:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005544:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005548:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800554c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800555c:	2300      	movs	r3, #0
 800555e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005562:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005566:	460b      	mov	r3, r1
 8005568:	4313      	orrs	r3, r2
 800556a:	d055      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800556c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005570:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005574:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005578:	d033      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800557a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800557e:	d82c      	bhi.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005580:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005584:	d02f      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005586:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800558a:	d826      	bhi.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800558c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005590:	d02b      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005592:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005596:	d820      	bhi.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005598:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800559c:	d012      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800559e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055a2:	d81a      	bhi.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d022      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80055a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055ac:	d115      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055b2:	3308      	adds	r3, #8
 80055b4:	2100      	movs	r1, #0
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fdee 	bl	8006198 <RCCEx_PLL2_Config>
 80055bc:	4603      	mov	r3, r0
 80055be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80055c2:	e015      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055c8:	3328      	adds	r3, #40	@ 0x28
 80055ca:	2102      	movs	r1, #2
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 fe95 	bl	80062fc <RCCEx_PLL3_Config>
 80055d2:	4603      	mov	r3, r0
 80055d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80055d8:	e00a      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80055e0:	e006      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80055e2:	bf00      	nop
 80055e4:	e004      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80055e6:	bf00      	nop
 80055e8:	e002      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80055ea:	bf00      	nop
 80055ec:	e000      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80055ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10b      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80055f8:	4ba1      	ldr	r3, [pc, #644]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005600:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005604:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005608:	4a9d      	ldr	r2, [pc, #628]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800560a:	430b      	orrs	r3, r1
 800560c:	6593      	str	r3, [r2, #88]	@ 0x58
 800560e:	e003      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005610:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005614:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005618:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800561c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005620:	f002 0308 	and.w	r3, r2, #8
 8005624:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005628:	2300      	movs	r3, #0
 800562a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800562e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005632:	460b      	mov	r3, r1
 8005634:	4313      	orrs	r3, r2
 8005636:	d01e      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800563c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005644:	d10c      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005646:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800564a:	3328      	adds	r3, #40	@ 0x28
 800564c:	2102      	movs	r1, #2
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fe54 	bl	80062fc <RCCEx_PLL3_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005660:	4b87      	ldr	r3, [pc, #540]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005664:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800566c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005670:	4a83      	ldr	r2, [pc, #524]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005672:	430b      	orrs	r3, r1
 8005674:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567e:	f002 0310 	and.w	r3, r2, #16
 8005682:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005686:	2300      	movs	r3, #0
 8005688:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800568c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005690:	460b      	mov	r3, r1
 8005692:	4313      	orrs	r3, r2
 8005694:	d01e      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005696:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800569a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800569e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056a2:	d10c      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056a8:	3328      	adds	r3, #40	@ 0x28
 80056aa:	2102      	movs	r1, #2
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 fe25 	bl	80062fc <RCCEx_PLL3_Config>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056be:	4b70      	ldr	r3, [pc, #448]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80056c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056ce:	4a6c      	ldr	r2, [pc, #432]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056d0:	430b      	orrs	r3, r1
 80056d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80056e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056e4:	2300      	movs	r3, #0
 80056e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80056ee:	460b      	mov	r3, r1
 80056f0:	4313      	orrs	r3, r2
 80056f2:	d03e      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80056f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005700:	d022      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8005702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005706:	d81b      	bhi.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800570c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005710:	d00b      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8005712:	e015      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005714:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005718:	3308      	adds	r3, #8
 800571a:	2100      	movs	r1, #0
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fd3b 	bl	8006198 <RCCEx_PLL2_Config>
 8005722:	4603      	mov	r3, r0
 8005724:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005728:	e00f      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800572a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800572e:	3328      	adds	r3, #40	@ 0x28
 8005730:	2102      	movs	r1, #2
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fde2 	bl	80062fc <RCCEx_PLL3_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800573e:	e004      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005746:	e000      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800574a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10b      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005752:	4b4b      	ldr	r3, [pc, #300]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005756:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800575a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800575e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005762:	4a47      	ldr	r2, [pc, #284]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005764:	430b      	orrs	r3, r1
 8005766:	6593      	str	r3, [r2, #88]	@ 0x58
 8005768:	e003      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800576e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005772:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800577e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005780:	2300      	movs	r3, #0
 8005782:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005784:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005788:	460b      	mov	r3, r1
 800578a:	4313      	orrs	r3, r2
 800578c:	d03b      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800578e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005796:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800579a:	d01f      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800579c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057a0:	d818      	bhi.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80057a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057a6:	d003      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80057a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057ac:	d007      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80057ae:	e011      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057b0:	4b33      	ldr	r3, [pc, #204]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b4:	4a32      	ldr	r2, [pc, #200]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80057bc:	e00f      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057c2:	3328      	adds	r3, #40	@ 0x28
 80057c4:	2101      	movs	r1, #1
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fd98 	bl	80062fc <RCCEx_PLL3_Config>
 80057cc:	4603      	mov	r3, r0
 80057ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80057d2:	e004      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80057da:	e000      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80057dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10b      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057e6:	4b26      	ldr	r3, [pc, #152]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80057ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057f6:	4a22      	ldr	r2, [pc, #136]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057f8:	430b      	orrs	r3, r1
 80057fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80057fc:	e003      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005802:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005806:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005812:	673b      	str	r3, [r7, #112]	@ 0x70
 8005814:	2300      	movs	r3, #0
 8005816:	677b      	str	r3, [r7, #116]	@ 0x74
 8005818:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800581c:	460b      	mov	r3, r1
 800581e:	4313      	orrs	r3, r2
 8005820:	d034      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005822:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800582c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005830:	d007      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005832:	e011      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005834:	4b12      	ldr	r3, [pc, #72]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005838:	4a11      	ldr	r2, [pc, #68]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800583a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800583e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005840:	e00e      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005842:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005846:	3308      	adds	r3, #8
 8005848:	2102      	movs	r1, #2
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fca4 	bl	8006198 <RCCEx_PLL2_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005856:	e003      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800585e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005860:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10d      	bne.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005868:	4b05      	ldr	r3, [pc, #20]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800586a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800586c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005870:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005876:	4a02      	ldr	r2, [pc, #8]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005878:	430b      	orrs	r3, r1
 800587a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800587c:	e006      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800587e:	bf00      	nop
 8005880:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005884:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005888:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800588c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005894:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005898:	66bb      	str	r3, [r7, #104]	@ 0x68
 800589a:	2300      	movs	r3, #0
 800589c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800589e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80058a2:	460b      	mov	r3, r1
 80058a4:	4313      	orrs	r3, r2
 80058a6:	d00c      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058ac:	3328      	adds	r3, #40	@ 0x28
 80058ae:	2102      	movs	r1, #2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fd23 	bl	80062fc <RCCEx_PLL3_Config>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80058c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80058ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80058d0:	2300      	movs	r3, #0
 80058d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80058d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80058d8:	460b      	mov	r3, r1
 80058da:	4313      	orrs	r3, r2
 80058dc:	d038      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80058de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058ea:	d018      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80058ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058f0:	d811      	bhi.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80058f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058f6:	d014      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80058f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058fc:	d80b      	bhi.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d011      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005906:	d106      	bne.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005908:	4bc3      	ldr	r3, [pc, #780]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800590a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590c:	4ac2      	ldr	r2, [pc, #776]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800590e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005912:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005914:	e008      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800591c:	e004      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800591e:	bf00      	nop
 8005920:	e002      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005922:	bf00      	nop
 8005924:	e000      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005926:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005928:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10b      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005930:	4bb9      	ldr	r3, [pc, #740]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005934:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005938:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800593c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005940:	4ab5      	ldr	r2, [pc, #724]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005942:	430b      	orrs	r3, r1
 8005944:	6553      	str	r3, [r2, #84]	@ 0x54
 8005946:	e003      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005948:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800594c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005950:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800595c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800595e:	2300      	movs	r3, #0
 8005960:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005962:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005966:	460b      	mov	r3, r1
 8005968:	4313      	orrs	r3, r2
 800596a:	d009      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800596c:	4baa      	ldr	r3, [pc, #680]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800596e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005970:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005974:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005978:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800597a:	4aa7      	ldr	r2, [pc, #668]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800597c:	430b      	orrs	r3, r1
 800597e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005980:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005988:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800598c:	653b      	str	r3, [r7, #80]	@ 0x50
 800598e:	2300      	movs	r3, #0
 8005990:	657b      	str	r3, [r7, #84]	@ 0x54
 8005992:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005996:	460b      	mov	r3, r1
 8005998:	4313      	orrs	r3, r2
 800599a:	d009      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800599c:	4b9e      	ldr	r3, [pc, #632]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800599e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80059a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059aa:	4a9b      	ldr	r2, [pc, #620]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059ac:	430b      	orrs	r3, r1
 80059ae:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80059b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80059bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059be:	2300      	movs	r3, #0
 80059c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059c2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80059c6:	460b      	mov	r3, r1
 80059c8:	4313      	orrs	r3, r2
 80059ca:	d009      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80059cc:	4b92      	ldr	r3, [pc, #584]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80059d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059da:	4a8f      	ldr	r2, [pc, #572]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059dc:	430b      	orrs	r3, r1
 80059de:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80059e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80059ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80059ee:	2300      	movs	r3, #0
 80059f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80059f2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80059f6:	460b      	mov	r3, r1
 80059f8:	4313      	orrs	r3, r2
 80059fa:	d00e      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059fc:	4b86      	ldr	r3, [pc, #536]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	4a85      	ldr	r2, [pc, #532]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a06:	6113      	str	r3, [r2, #16]
 8005a08:	4b83      	ldr	r3, [pc, #524]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a0a:	6919      	ldr	r1, [r3, #16]
 8005a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a14:	4a80      	ldr	r2, [pc, #512]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a16:	430b      	orrs	r3, r1
 8005a18:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005a26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a28:	2300      	movs	r3, #0
 8005a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a2c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005a30:	460b      	mov	r3, r1
 8005a32:	4313      	orrs	r3, r2
 8005a34:	d009      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a36:	4b78      	ldr	r3, [pc, #480]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a3a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a44:	4a74      	ldr	r2, [pc, #464]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a46:	430b      	orrs	r3, r1
 8005a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005a56:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a58:	2300      	movs	r3, #0
 8005a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a5c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005a60:	460b      	mov	r3, r1
 8005a62:	4313      	orrs	r3, r2
 8005a64:	d00a      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a66:	4b6c      	ldr	r3, [pc, #432]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a6a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a76:	4a68      	ldr	r2, [pc, #416]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a84:	2100      	movs	r1, #0
 8005a86:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a8e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005a92:	460b      	mov	r3, r1
 8005a94:	4313      	orrs	r3, r2
 8005a96:	d011      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 fb79 	bl	8006198 <RCCEx_PLL2_Config>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005aac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ab8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	6239      	str	r1, [r7, #32]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ace:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	d011      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005adc:	3308      	adds	r3, #8
 8005ade:	2101      	movs	r1, #1
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fb59 	bl	8006198 <RCCEx_PLL2_Config>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005aec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005af8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	2100      	movs	r1, #0
 8005b06:	61b9      	str	r1, [r7, #24]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	61fb      	str	r3, [r7, #28]
 8005b0e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b12:	460b      	mov	r3, r1
 8005b14:	4313      	orrs	r3, r2
 8005b16:	d011      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	2102      	movs	r1, #2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fb39 	bl	8006198 <RCCEx_PLL2_Config>
 8005b26:	4603      	mov	r3, r0
 8005b28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005b2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b38:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	2100      	movs	r1, #0
 8005b46:	6139      	str	r1, [r7, #16]
 8005b48:	f003 0308 	and.w	r3, r3, #8
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005b52:	460b      	mov	r3, r1
 8005b54:	4313      	orrs	r3, r2
 8005b56:	d011      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b5c:	3328      	adds	r3, #40	@ 0x28
 8005b5e:	2100      	movs	r1, #0
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fbcb 	bl	80062fc <RCCEx_PLL3_Config>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8005b6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	2100      	movs	r1, #0
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	f003 0310 	and.w	r3, r3, #16
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b92:	460b      	mov	r3, r1
 8005b94:	4313      	orrs	r3, r2
 8005b96:	d011      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b9c:	3328      	adds	r3, #40	@ 0x28
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 fbab 	bl	80062fc <RCCEx_PLL3_Config>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005bac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bb8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	6039      	str	r1, [r7, #0]
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	607b      	str	r3, [r7, #4]
 8005bce:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	d011      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bdc:	3328      	adds	r3, #40	@ 0x28
 8005bde:	2102      	movs	r1, #2
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fb8b 	bl	80062fc <RCCEx_PLL3_Config>
 8005be6:	4603      	mov	r3, r0
 8005be8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005bec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bf8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005bfc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	e000      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005c10:	46bd      	mov	sp, r7
 8005c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c16:	bf00      	nop
 8005c18:	58024400 	.word	0x58024400

08005c1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005c20:	f7fe fde2 	bl	80047e8 <HAL_RCC_GetHCLKFreq>
 8005c24:	4602      	mov	r2, r0
 8005c26:	4b06      	ldr	r3, [pc, #24]	@ (8005c40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	091b      	lsrs	r3, r3, #4
 8005c2c:	f003 0307 	and.w	r3, r3, #7
 8005c30:	4904      	ldr	r1, [pc, #16]	@ (8005c44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c32:	5ccb      	ldrb	r3, [r1, r3]
 8005c34:	f003 031f 	and.w	r3, r3, #31
 8005c38:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	58024400 	.word	0x58024400
 8005c44:	080082d8 	.word	0x080082d8

08005c48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b089      	sub	sp, #36	@ 0x24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c50:	4ba1      	ldr	r3, [pc, #644]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c54:	f003 0303 	and.w	r3, r3, #3
 8005c58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005c5a:	4b9f      	ldr	r3, [pc, #636]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5e:	0b1b      	lsrs	r3, r3, #12
 8005c60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c66:	4b9c      	ldr	r3, [pc, #624]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6a:	091b      	lsrs	r3, r3, #4
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c72:	4b99      	ldr	r3, [pc, #612]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c76:	08db      	lsrs	r3, r3, #3
 8005c78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 8111 	beq.w	8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	f000 8083 	beq.w	8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	f200 80a1 	bhi.w	8005de8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d056      	beq.n	8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005cb2:	e099      	b.n	8005de8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cb4:	4b88      	ldr	r3, [pc, #544]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d02d      	beq.n	8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cc0:	4b85      	ldr	r3, [pc, #532]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	08db      	lsrs	r3, r3, #3
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	4a84      	ldr	r2, [pc, #528]	@ (8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	ee07 3a90 	vmov	s15, r3
 8005cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cea:	4b7b      	ldr	r3, [pc, #492]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cfe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d1a:	e087      	b.n	8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d26:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d42:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d5e:	e065      	b.n	8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d72:	4b59      	ldr	r3, [pc, #356]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d86:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005da2:	e043      	b.n	8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005eec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db6:	4b48      	ldr	r3, [pc, #288]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005de6:	e021      	b.n	8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dfa:	4b37      	ldr	r3, [pc, #220]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e02:	ee07 3a90 	vmov	s15, r3
 8005e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e0e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e30:	0a5b      	lsrs	r3, r3, #9
 8005e32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e52:	ee17 2a90 	vmov	r2, s15
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5e:	0c1b      	lsrs	r3, r3, #16
 8005e60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e64:	ee07 3a90 	vmov	s15, r3
 8005e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e74:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e80:	ee17 2a90 	vmov	r2, s15
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005e88:	4b13      	ldr	r3, [pc, #76]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8c:	0e1b      	lsrs	r3, r3, #24
 8005e8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e92:	ee07 3a90 	vmov	s15, r3
 8005e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ea2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eae:	ee17 2a90 	vmov	r2, s15
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005eb6:	e008      	b.n	8005eca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	609a      	str	r2, [r3, #8]
}
 8005eca:	bf00      	nop
 8005ecc:	3724      	adds	r7, #36	@ 0x24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	58024400 	.word	0x58024400
 8005edc:	03d09000 	.word	0x03d09000
 8005ee0:	46000000 	.word	0x46000000
 8005ee4:	4c742400 	.word	0x4c742400
 8005ee8:	4a742400 	.word	0x4a742400
 8005eec:	4bb71b00 	.word	0x4bb71b00

08005ef0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b089      	sub	sp, #36	@ 0x24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ef8:	4ba1      	ldr	r3, [pc, #644]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efc:	f003 0303 	and.w	r3, r3, #3
 8005f00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005f02:	4b9f      	ldr	r3, [pc, #636]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f06:	0d1b      	lsrs	r3, r3, #20
 8005f08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f0e:	4b9c      	ldr	r3, [pc, #624]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f12:	0a1b      	lsrs	r3, r3, #8
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005f1a:	4b99      	ldr	r3, [pc, #612]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1e:	08db      	lsrs	r3, r3, #3
 8005f20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 8111 	beq.w	8006160 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	f000 8083 	beq.w	800604c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	f200 80a1 	bhi.w	8006090 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d056      	beq.n	8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005f5a:	e099      	b.n	8006090 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f5c:	4b88      	ldr	r3, [pc, #544]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d02d      	beq.n	8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f68:	4b85      	ldr	r3, [pc, #532]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	08db      	lsrs	r3, r3, #3
 8005f6e:	f003 0303 	and.w	r3, r3, #3
 8005f72:	4a84      	ldr	r2, [pc, #528]	@ (8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f74:	fa22 f303 	lsr.w	r3, r2, r3
 8005f78:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	ee07 3a90 	vmov	s15, r3
 8005f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f92:	4b7b      	ldr	r3, [pc, #492]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fa6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005fc2:	e087      	b.n	80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800618c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006006:	e065      	b.n	80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006012:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800601a:	4b59      	ldr	r3, [pc, #356]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800601c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602a:	ed97 6a03 	vldr	s12, [r7, #12]
 800602e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800603a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800603e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800604a:	e043      	b.n	80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006056:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800605a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605e:	4b48      	ldr	r3, [pc, #288]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006072:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800607a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800608e:	e021      	b.n	80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	ee07 3a90 	vmov	s15, r3
 8006096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800609e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060a2:	4b37      	ldr	r3, [pc, #220]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060aa:	ee07 3a90 	vmov	s15, r3
 80060ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80060d4:	4b2a      	ldr	r3, [pc, #168]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d8:	0a5b      	lsrs	r3, r3, #9
 80060da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80060f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060fa:	ee17 2a90 	vmov	r2, s15
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006102:	4b1f      	ldr	r3, [pc, #124]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006106:	0c1b      	lsrs	r3, r3, #16
 8006108:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800610c:	ee07 3a90 	vmov	s15, r3
 8006110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006114:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006118:	ee37 7a87 	vadd.f32	s14, s15, s14
 800611c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006128:	ee17 2a90 	vmov	r2, s15
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006130:	4b13      	ldr	r3, [pc, #76]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006134:	0e1b      	lsrs	r3, r3, #24
 8006136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006142:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006146:	ee37 7a87 	vadd.f32	s14, s15, s14
 800614a:	edd7 6a07 	vldr	s13, [r7, #28]
 800614e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006156:	ee17 2a90 	vmov	r2, s15
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800615e:	e008      	b.n	8006172 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	609a      	str	r2, [r3, #8]
}
 8006172:	bf00      	nop
 8006174:	3724      	adds	r7, #36	@ 0x24
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	58024400 	.word	0x58024400
 8006184:	03d09000 	.word	0x03d09000
 8006188:	46000000 	.word	0x46000000
 800618c:	4c742400 	.word	0x4c742400
 8006190:	4a742400 	.word	0x4a742400
 8006194:	4bb71b00 	.word	0x4bb71b00

08006198 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061a6:	4b53      	ldr	r3, [pc, #332]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80061a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d101      	bne.n	80061b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e099      	b.n	80062ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80061b6:	4b4f      	ldr	r3, [pc, #316]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a4e      	ldr	r2, [pc, #312]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80061bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80061c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061c2:	f7fb fc6f 	bl	8001aa4 <HAL_GetTick>
 80061c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061c8:	e008      	b.n	80061dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80061ca:	f7fb fc6b 	bl	8001aa4 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d901      	bls.n	80061dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e086      	b.n	80062ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061dc:	4b45      	ldr	r3, [pc, #276]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1f0      	bne.n	80061ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80061e8:	4b42      	ldr	r3, [pc, #264]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80061ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	031b      	lsls	r3, r3, #12
 80061f6:	493f      	ldr	r1, [pc, #252]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	3b01      	subs	r3, #1
 8006202:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	3b01      	subs	r3, #1
 800620c:	025b      	lsls	r3, r3, #9
 800620e:	b29b      	uxth	r3, r3
 8006210:	431a      	orrs	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	3b01      	subs	r3, #1
 8006218:	041b      	lsls	r3, r3, #16
 800621a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	3b01      	subs	r3, #1
 8006226:	061b      	lsls	r3, r3, #24
 8006228:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800622c:	4931      	ldr	r1, [pc, #196]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 800622e:	4313      	orrs	r3, r2
 8006230:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006232:	4b30      	ldr	r3, [pc, #192]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 8006234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006236:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	492d      	ldr	r1, [pc, #180]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 8006240:	4313      	orrs	r3, r2
 8006242:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006244:	4b2b      	ldr	r3, [pc, #172]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 8006246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006248:	f023 0220 	bic.w	r2, r3, #32
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	4928      	ldr	r1, [pc, #160]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 8006252:	4313      	orrs	r3, r2
 8006254:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006256:	4b27      	ldr	r3, [pc, #156]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 8006258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625a:	4a26      	ldr	r2, [pc, #152]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 800625c:	f023 0310 	bic.w	r3, r3, #16
 8006260:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006262:	4b24      	ldr	r3, [pc, #144]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 8006264:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006266:	4b24      	ldr	r3, [pc, #144]	@ (80062f8 <RCCEx_PLL2_Config+0x160>)
 8006268:	4013      	ands	r3, r2
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	69d2      	ldr	r2, [r2, #28]
 800626e:	00d2      	lsls	r2, r2, #3
 8006270:	4920      	ldr	r1, [pc, #128]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 8006272:	4313      	orrs	r3, r2
 8006274:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006276:	4b1f      	ldr	r3, [pc, #124]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 8006278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627a:	4a1e      	ldr	r2, [pc, #120]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 800627c:	f043 0310 	orr.w	r3, r3, #16
 8006280:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d106      	bne.n	8006296 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006288:	4b1a      	ldr	r3, [pc, #104]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 800628a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628c:	4a19      	ldr	r2, [pc, #100]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 800628e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006292:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006294:	e00f      	b.n	80062b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d106      	bne.n	80062aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800629c:	4b15      	ldr	r3, [pc, #84]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 800629e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a0:	4a14      	ldr	r2, [pc, #80]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80062a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062a8:	e005      	b.n	80062b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80062aa:	4b12      	ldr	r3, [pc, #72]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80062ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ae:	4a11      	ldr	r2, [pc, #68]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80062b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80062b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80062b6:	4b0f      	ldr	r3, [pc, #60]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a0e      	ldr	r2, [pc, #56]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80062bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80062c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c2:	f7fb fbef 	bl	8001aa4 <HAL_GetTick>
 80062c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062c8:	e008      	b.n	80062dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80062ca:	f7fb fbeb 	bl	8001aa4 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d901      	bls.n	80062dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e006      	b.n	80062ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062dc:	4b05      	ldr	r3, [pc, #20]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d0f0      	beq.n	80062ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	58024400 	.word	0x58024400
 80062f8:	ffff0007 	.word	0xffff0007

080062fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800630a:	4b53      	ldr	r3, [pc, #332]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 800630c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	2b03      	cmp	r3, #3
 8006314:	d101      	bne.n	800631a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e099      	b.n	800644e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800631a:	4b4f      	ldr	r3, [pc, #316]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a4e      	ldr	r2, [pc, #312]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006320:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006326:	f7fb fbbd 	bl	8001aa4 <HAL_GetTick>
 800632a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800632c:	e008      	b.n	8006340 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800632e:	f7fb fbb9 	bl	8001aa4 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e086      	b.n	800644e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006340:	4b45      	ldr	r3, [pc, #276]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1f0      	bne.n	800632e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800634c:	4b42      	ldr	r3, [pc, #264]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 800634e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006350:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	051b      	lsls	r3, r3, #20
 800635a:	493f      	ldr	r1, [pc, #252]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 800635c:	4313      	orrs	r3, r2
 800635e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	3b01      	subs	r3, #1
 8006366:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	3b01      	subs	r3, #1
 8006370:	025b      	lsls	r3, r3, #9
 8006372:	b29b      	uxth	r3, r3
 8006374:	431a      	orrs	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	3b01      	subs	r3, #1
 800637c:	041b      	lsls	r3, r3, #16
 800637e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	3b01      	subs	r3, #1
 800638a:	061b      	lsls	r3, r3, #24
 800638c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006390:	4931      	ldr	r1, [pc, #196]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006392:	4313      	orrs	r3, r2
 8006394:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006396:	4b30      	ldr	r3, [pc, #192]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	492d      	ldr	r1, [pc, #180]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80063a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	4928      	ldr	r1, [pc, #160]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80063ba:	4b27      	ldr	r3, [pc, #156]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063be:	4a26      	ldr	r2, [pc, #152]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80063c6:	4b24      	ldr	r3, [pc, #144]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063ca:	4b24      	ldr	r3, [pc, #144]	@ (800645c <RCCEx_PLL3_Config+0x160>)
 80063cc:	4013      	ands	r3, r2
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	69d2      	ldr	r2, [r2, #28]
 80063d2:	00d2      	lsls	r2, r2, #3
 80063d4:	4920      	ldr	r1, [pc, #128]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80063da:	4b1f      	ldr	r3, [pc, #124]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063de:	4a1e      	ldr	r2, [pc, #120]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d106      	bne.n	80063fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80063ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f0:	4a19      	ldr	r2, [pc, #100]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80063f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063f8:	e00f      	b.n	800641a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d106      	bne.n	800640e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006400:	4b15      	ldr	r3, [pc, #84]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006404:	4a14      	ldr	r2, [pc, #80]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006406:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800640a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800640c:	e005      	b.n	800641a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800640e:	4b12      	ldr	r3, [pc, #72]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006412:	4a11      	ldr	r2, [pc, #68]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006414:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006418:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800641a:	4b0f      	ldr	r3, [pc, #60]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a0e      	ldr	r2, [pc, #56]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006426:	f7fb fb3d 	bl	8001aa4 <HAL_GetTick>
 800642a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800642c:	e008      	b.n	8006440 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800642e:	f7fb fb39 	bl	8001aa4 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d901      	bls.n	8006440 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e006      	b.n	800644e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006440:	4b05      	ldr	r3, [pc, #20]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d0f0      	beq.n	800642e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	58024400 	.word	0x58024400
 800645c:	ffff0007 	.word	0xffff0007

08006460 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e042      	b.n	80064f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006478:	2b00      	cmp	r3, #0
 800647a:	d106      	bne.n	800648a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7fb f9e1 	bl	800184c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2224      	movs	r2, #36	@ 0x24
 800648e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0201 	bic.w	r2, r2, #1
 80064a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d002      	beq.n	80064b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 ff22 	bl	80072f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f8b3 	bl	800661c <UART_SetConfig>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d101      	bne.n	80064c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e01b      	b.n	80064f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f042 0201 	orr.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 ffa1 	bl	8007438 <UART_CheckIdleState>
 80064f6:	4603      	mov	r3, r0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b08a      	sub	sp, #40	@ 0x28
 8006504:	af02      	add	r7, sp, #8
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	603b      	str	r3, [r7, #0]
 800650c:	4613      	mov	r3, r2
 800650e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006516:	2b20      	cmp	r3, #32
 8006518:	d17b      	bne.n	8006612 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_UART_Transmit+0x26>
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e074      	b.n	8006614 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2221      	movs	r2, #33	@ 0x21
 8006536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800653a:	f7fb fab3 	bl	8001aa4 <HAL_GetTick>
 800653e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	88fa      	ldrh	r2, [r7, #6]
 8006544:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	88fa      	ldrh	r2, [r7, #6]
 800654c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006558:	d108      	bne.n	800656c <HAL_UART_Transmit+0x6c>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d104      	bne.n	800656c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006562:	2300      	movs	r3, #0
 8006564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	e003      	b.n	8006574 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006570:	2300      	movs	r3, #0
 8006572:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006574:	e030      	b.n	80065d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2200      	movs	r2, #0
 800657e:	2180      	movs	r1, #128	@ 0x80
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f001 f803 	bl	800758c <UART_WaitOnFlagUntilTimeout>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d005      	beq.n	8006598 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e03d      	b.n	8006614 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10b      	bne.n	80065b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	3302      	adds	r3, #2
 80065b2:	61bb      	str	r3, [r7, #24]
 80065b4:	e007      	b.n	80065c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	3301      	adds	r3, #1
 80065c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065de:	b29b      	uxth	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1c8      	bne.n	8006576 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2200      	movs	r2, #0
 80065ec:	2140      	movs	r1, #64	@ 0x40
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 ffcc 	bl	800758c <UART_WaitOnFlagUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d005      	beq.n	8006606 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e006      	b.n	8006614 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2220      	movs	r2, #32
 800660a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	e000      	b.n	8006614 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006612:	2302      	movs	r3, #2
  }
}
 8006614:	4618      	mov	r0, r3
 8006616:	3720      	adds	r7, #32
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800661c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006620:	b092      	sub	sp, #72	@ 0x48
 8006622:	af00      	add	r7, sp, #0
 8006624:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	431a      	orrs	r2, r3
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	431a      	orrs	r2, r3
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	4313      	orrs	r3, r2
 8006642:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	4bbe      	ldr	r3, [pc, #760]	@ (8006944 <UART_SetConfig+0x328>)
 800664c:	4013      	ands	r3, r2
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	6812      	ldr	r2, [r2, #0]
 8006652:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006654:	430b      	orrs	r3, r1
 8006656:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	68da      	ldr	r2, [r3, #12]
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4ab3      	ldr	r2, [pc, #716]	@ (8006948 <UART_SetConfig+0x32c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d004      	beq.n	8006688 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006684:	4313      	orrs	r3, r2
 8006686:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689a      	ldr	r2, [r3, #8]
 800668e:	4baf      	ldr	r3, [pc, #700]	@ (800694c <UART_SetConfig+0x330>)
 8006690:	4013      	ands	r3, r2
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	6812      	ldr	r2, [r2, #0]
 8006696:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006698:	430b      	orrs	r3, r1
 800669a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a2:	f023 010f 	bic.w	r1, r3, #15
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4aa6      	ldr	r2, [pc, #664]	@ (8006950 <UART_SetConfig+0x334>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d177      	bne.n	80067ac <UART_SetConfig+0x190>
 80066bc:	4ba5      	ldr	r3, [pc, #660]	@ (8006954 <UART_SetConfig+0x338>)
 80066be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066c4:	2b28      	cmp	r3, #40	@ 0x28
 80066c6:	d86d      	bhi.n	80067a4 <UART_SetConfig+0x188>
 80066c8:	a201      	add	r2, pc, #4	@ (adr r2, 80066d0 <UART_SetConfig+0xb4>)
 80066ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ce:	bf00      	nop
 80066d0:	08006775 	.word	0x08006775
 80066d4:	080067a5 	.word	0x080067a5
 80066d8:	080067a5 	.word	0x080067a5
 80066dc:	080067a5 	.word	0x080067a5
 80066e0:	080067a5 	.word	0x080067a5
 80066e4:	080067a5 	.word	0x080067a5
 80066e8:	080067a5 	.word	0x080067a5
 80066ec:	080067a5 	.word	0x080067a5
 80066f0:	0800677d 	.word	0x0800677d
 80066f4:	080067a5 	.word	0x080067a5
 80066f8:	080067a5 	.word	0x080067a5
 80066fc:	080067a5 	.word	0x080067a5
 8006700:	080067a5 	.word	0x080067a5
 8006704:	080067a5 	.word	0x080067a5
 8006708:	080067a5 	.word	0x080067a5
 800670c:	080067a5 	.word	0x080067a5
 8006710:	08006785 	.word	0x08006785
 8006714:	080067a5 	.word	0x080067a5
 8006718:	080067a5 	.word	0x080067a5
 800671c:	080067a5 	.word	0x080067a5
 8006720:	080067a5 	.word	0x080067a5
 8006724:	080067a5 	.word	0x080067a5
 8006728:	080067a5 	.word	0x080067a5
 800672c:	080067a5 	.word	0x080067a5
 8006730:	0800678d 	.word	0x0800678d
 8006734:	080067a5 	.word	0x080067a5
 8006738:	080067a5 	.word	0x080067a5
 800673c:	080067a5 	.word	0x080067a5
 8006740:	080067a5 	.word	0x080067a5
 8006744:	080067a5 	.word	0x080067a5
 8006748:	080067a5 	.word	0x080067a5
 800674c:	080067a5 	.word	0x080067a5
 8006750:	08006795 	.word	0x08006795
 8006754:	080067a5 	.word	0x080067a5
 8006758:	080067a5 	.word	0x080067a5
 800675c:	080067a5 	.word	0x080067a5
 8006760:	080067a5 	.word	0x080067a5
 8006764:	080067a5 	.word	0x080067a5
 8006768:	080067a5 	.word	0x080067a5
 800676c:	080067a5 	.word	0x080067a5
 8006770:	0800679d 	.word	0x0800679d
 8006774:	2301      	movs	r3, #1
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677a:	e326      	b.n	8006dca <UART_SetConfig+0x7ae>
 800677c:	2304      	movs	r3, #4
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006782:	e322      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006784:	2308      	movs	r3, #8
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800678a:	e31e      	b.n	8006dca <UART_SetConfig+0x7ae>
 800678c:	2310      	movs	r3, #16
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006792:	e31a      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006794:	2320      	movs	r3, #32
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679a:	e316      	b.n	8006dca <UART_SetConfig+0x7ae>
 800679c:	2340      	movs	r3, #64	@ 0x40
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a2:	e312      	b.n	8006dca <UART_SetConfig+0x7ae>
 80067a4:	2380      	movs	r3, #128	@ 0x80
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067aa:	e30e      	b.n	8006dca <UART_SetConfig+0x7ae>
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a69      	ldr	r2, [pc, #420]	@ (8006958 <UART_SetConfig+0x33c>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d130      	bne.n	8006818 <UART_SetConfig+0x1fc>
 80067b6:	4b67      	ldr	r3, [pc, #412]	@ (8006954 <UART_SetConfig+0x338>)
 80067b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	2b05      	cmp	r3, #5
 80067c0:	d826      	bhi.n	8006810 <UART_SetConfig+0x1f4>
 80067c2:	a201      	add	r2, pc, #4	@ (adr r2, 80067c8 <UART_SetConfig+0x1ac>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067e1 	.word	0x080067e1
 80067cc:	080067e9 	.word	0x080067e9
 80067d0:	080067f1 	.word	0x080067f1
 80067d4:	080067f9 	.word	0x080067f9
 80067d8:	08006801 	.word	0x08006801
 80067dc:	08006809 	.word	0x08006809
 80067e0:	2300      	movs	r3, #0
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067e6:	e2f0      	b.n	8006dca <UART_SetConfig+0x7ae>
 80067e8:	2304      	movs	r3, #4
 80067ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ee:	e2ec      	b.n	8006dca <UART_SetConfig+0x7ae>
 80067f0:	2308      	movs	r3, #8
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067f6:	e2e8      	b.n	8006dca <UART_SetConfig+0x7ae>
 80067f8:	2310      	movs	r3, #16
 80067fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067fe:	e2e4      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006800:	2320      	movs	r3, #32
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006806:	e2e0      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006808:	2340      	movs	r3, #64	@ 0x40
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680e:	e2dc      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006810:	2380      	movs	r3, #128	@ 0x80
 8006812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006816:	e2d8      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a4f      	ldr	r2, [pc, #316]	@ (800695c <UART_SetConfig+0x340>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d130      	bne.n	8006884 <UART_SetConfig+0x268>
 8006822:	4b4c      	ldr	r3, [pc, #304]	@ (8006954 <UART_SetConfig+0x338>)
 8006824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	2b05      	cmp	r3, #5
 800682c:	d826      	bhi.n	800687c <UART_SetConfig+0x260>
 800682e:	a201      	add	r2, pc, #4	@ (adr r2, 8006834 <UART_SetConfig+0x218>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	0800684d 	.word	0x0800684d
 8006838:	08006855 	.word	0x08006855
 800683c:	0800685d 	.word	0x0800685d
 8006840:	08006865 	.word	0x08006865
 8006844:	0800686d 	.word	0x0800686d
 8006848:	08006875 	.word	0x08006875
 800684c:	2300      	movs	r3, #0
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006852:	e2ba      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006854:	2304      	movs	r3, #4
 8006856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800685a:	e2b6      	b.n	8006dca <UART_SetConfig+0x7ae>
 800685c:	2308      	movs	r3, #8
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006862:	e2b2      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006864:	2310      	movs	r3, #16
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800686a:	e2ae      	b.n	8006dca <UART_SetConfig+0x7ae>
 800686c:	2320      	movs	r3, #32
 800686e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006872:	e2aa      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006874:	2340      	movs	r3, #64	@ 0x40
 8006876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800687a:	e2a6      	b.n	8006dca <UART_SetConfig+0x7ae>
 800687c:	2380      	movs	r3, #128	@ 0x80
 800687e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006882:	e2a2      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a35      	ldr	r2, [pc, #212]	@ (8006960 <UART_SetConfig+0x344>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d130      	bne.n	80068f0 <UART_SetConfig+0x2d4>
 800688e:	4b31      	ldr	r3, [pc, #196]	@ (8006954 <UART_SetConfig+0x338>)
 8006890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	2b05      	cmp	r3, #5
 8006898:	d826      	bhi.n	80068e8 <UART_SetConfig+0x2cc>
 800689a:	a201      	add	r2, pc, #4	@ (adr r2, 80068a0 <UART_SetConfig+0x284>)
 800689c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a0:	080068b9 	.word	0x080068b9
 80068a4:	080068c1 	.word	0x080068c1
 80068a8:	080068c9 	.word	0x080068c9
 80068ac:	080068d1 	.word	0x080068d1
 80068b0:	080068d9 	.word	0x080068d9
 80068b4:	080068e1 	.word	0x080068e1
 80068b8:	2300      	movs	r3, #0
 80068ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068be:	e284      	b.n	8006dca <UART_SetConfig+0x7ae>
 80068c0:	2304      	movs	r3, #4
 80068c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068c6:	e280      	b.n	8006dca <UART_SetConfig+0x7ae>
 80068c8:	2308      	movs	r3, #8
 80068ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ce:	e27c      	b.n	8006dca <UART_SetConfig+0x7ae>
 80068d0:	2310      	movs	r3, #16
 80068d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068d6:	e278      	b.n	8006dca <UART_SetConfig+0x7ae>
 80068d8:	2320      	movs	r3, #32
 80068da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068de:	e274      	b.n	8006dca <UART_SetConfig+0x7ae>
 80068e0:	2340      	movs	r3, #64	@ 0x40
 80068e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068e6:	e270      	b.n	8006dca <UART_SetConfig+0x7ae>
 80068e8:	2380      	movs	r3, #128	@ 0x80
 80068ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ee:	e26c      	b.n	8006dca <UART_SetConfig+0x7ae>
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006964 <UART_SetConfig+0x348>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d142      	bne.n	8006980 <UART_SetConfig+0x364>
 80068fa:	4b16      	ldr	r3, [pc, #88]	@ (8006954 <UART_SetConfig+0x338>)
 80068fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068fe:	f003 0307 	and.w	r3, r3, #7
 8006902:	2b05      	cmp	r3, #5
 8006904:	d838      	bhi.n	8006978 <UART_SetConfig+0x35c>
 8006906:	a201      	add	r2, pc, #4	@ (adr r2, 800690c <UART_SetConfig+0x2f0>)
 8006908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690c:	08006925 	.word	0x08006925
 8006910:	0800692d 	.word	0x0800692d
 8006914:	08006935 	.word	0x08006935
 8006918:	0800693d 	.word	0x0800693d
 800691c:	08006969 	.word	0x08006969
 8006920:	08006971 	.word	0x08006971
 8006924:	2300      	movs	r3, #0
 8006926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800692a:	e24e      	b.n	8006dca <UART_SetConfig+0x7ae>
 800692c:	2304      	movs	r3, #4
 800692e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006932:	e24a      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006934:	2308      	movs	r3, #8
 8006936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693a:	e246      	b.n	8006dca <UART_SetConfig+0x7ae>
 800693c:	2310      	movs	r3, #16
 800693e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006942:	e242      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006944:	cfff69f3 	.word	0xcfff69f3
 8006948:	58000c00 	.word	0x58000c00
 800694c:	11fff4ff 	.word	0x11fff4ff
 8006950:	40011000 	.word	0x40011000
 8006954:	58024400 	.word	0x58024400
 8006958:	40004400 	.word	0x40004400
 800695c:	40004800 	.word	0x40004800
 8006960:	40004c00 	.word	0x40004c00
 8006964:	40005000 	.word	0x40005000
 8006968:	2320      	movs	r3, #32
 800696a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800696e:	e22c      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006970:	2340      	movs	r3, #64	@ 0x40
 8006972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006976:	e228      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006978:	2380      	movs	r3, #128	@ 0x80
 800697a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800697e:	e224      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4ab1      	ldr	r2, [pc, #708]	@ (8006c4c <UART_SetConfig+0x630>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d176      	bne.n	8006a78 <UART_SetConfig+0x45c>
 800698a:	4bb1      	ldr	r3, [pc, #708]	@ (8006c50 <UART_SetConfig+0x634>)
 800698c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800698e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006992:	2b28      	cmp	r3, #40	@ 0x28
 8006994:	d86c      	bhi.n	8006a70 <UART_SetConfig+0x454>
 8006996:	a201      	add	r2, pc, #4	@ (adr r2, 800699c <UART_SetConfig+0x380>)
 8006998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699c:	08006a41 	.word	0x08006a41
 80069a0:	08006a71 	.word	0x08006a71
 80069a4:	08006a71 	.word	0x08006a71
 80069a8:	08006a71 	.word	0x08006a71
 80069ac:	08006a71 	.word	0x08006a71
 80069b0:	08006a71 	.word	0x08006a71
 80069b4:	08006a71 	.word	0x08006a71
 80069b8:	08006a71 	.word	0x08006a71
 80069bc:	08006a49 	.word	0x08006a49
 80069c0:	08006a71 	.word	0x08006a71
 80069c4:	08006a71 	.word	0x08006a71
 80069c8:	08006a71 	.word	0x08006a71
 80069cc:	08006a71 	.word	0x08006a71
 80069d0:	08006a71 	.word	0x08006a71
 80069d4:	08006a71 	.word	0x08006a71
 80069d8:	08006a71 	.word	0x08006a71
 80069dc:	08006a51 	.word	0x08006a51
 80069e0:	08006a71 	.word	0x08006a71
 80069e4:	08006a71 	.word	0x08006a71
 80069e8:	08006a71 	.word	0x08006a71
 80069ec:	08006a71 	.word	0x08006a71
 80069f0:	08006a71 	.word	0x08006a71
 80069f4:	08006a71 	.word	0x08006a71
 80069f8:	08006a71 	.word	0x08006a71
 80069fc:	08006a59 	.word	0x08006a59
 8006a00:	08006a71 	.word	0x08006a71
 8006a04:	08006a71 	.word	0x08006a71
 8006a08:	08006a71 	.word	0x08006a71
 8006a0c:	08006a71 	.word	0x08006a71
 8006a10:	08006a71 	.word	0x08006a71
 8006a14:	08006a71 	.word	0x08006a71
 8006a18:	08006a71 	.word	0x08006a71
 8006a1c:	08006a61 	.word	0x08006a61
 8006a20:	08006a71 	.word	0x08006a71
 8006a24:	08006a71 	.word	0x08006a71
 8006a28:	08006a71 	.word	0x08006a71
 8006a2c:	08006a71 	.word	0x08006a71
 8006a30:	08006a71 	.word	0x08006a71
 8006a34:	08006a71 	.word	0x08006a71
 8006a38:	08006a71 	.word	0x08006a71
 8006a3c:	08006a69 	.word	0x08006a69
 8006a40:	2301      	movs	r3, #1
 8006a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a46:	e1c0      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006a48:	2304      	movs	r3, #4
 8006a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a4e:	e1bc      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006a50:	2308      	movs	r3, #8
 8006a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a56:	e1b8      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006a58:	2310      	movs	r3, #16
 8006a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a5e:	e1b4      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006a60:	2320      	movs	r3, #32
 8006a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a66:	e1b0      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006a68:	2340      	movs	r3, #64	@ 0x40
 8006a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6e:	e1ac      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006a70:	2380      	movs	r3, #128	@ 0x80
 8006a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a76:	e1a8      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a75      	ldr	r2, [pc, #468]	@ (8006c54 <UART_SetConfig+0x638>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d130      	bne.n	8006ae4 <UART_SetConfig+0x4c8>
 8006a82:	4b73      	ldr	r3, [pc, #460]	@ (8006c50 <UART_SetConfig+0x634>)
 8006a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	2b05      	cmp	r3, #5
 8006a8c:	d826      	bhi.n	8006adc <UART_SetConfig+0x4c0>
 8006a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a94 <UART_SetConfig+0x478>)
 8006a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a94:	08006aad 	.word	0x08006aad
 8006a98:	08006ab5 	.word	0x08006ab5
 8006a9c:	08006abd 	.word	0x08006abd
 8006aa0:	08006ac5 	.word	0x08006ac5
 8006aa4:	08006acd 	.word	0x08006acd
 8006aa8:	08006ad5 	.word	0x08006ad5
 8006aac:	2300      	movs	r3, #0
 8006aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ab2:	e18a      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006ab4:	2304      	movs	r3, #4
 8006ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aba:	e186      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006abc:	2308      	movs	r3, #8
 8006abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ac2:	e182      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aca:	e17e      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006acc:	2320      	movs	r3, #32
 8006ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ad2:	e17a      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006ad4:	2340      	movs	r3, #64	@ 0x40
 8006ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ada:	e176      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006adc:	2380      	movs	r3, #128	@ 0x80
 8006ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ae2:	e172      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a5b      	ldr	r2, [pc, #364]	@ (8006c58 <UART_SetConfig+0x63c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d130      	bne.n	8006b50 <UART_SetConfig+0x534>
 8006aee:	4b58      	ldr	r3, [pc, #352]	@ (8006c50 <UART_SetConfig+0x634>)
 8006af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	2b05      	cmp	r3, #5
 8006af8:	d826      	bhi.n	8006b48 <UART_SetConfig+0x52c>
 8006afa:	a201      	add	r2, pc, #4	@ (adr r2, 8006b00 <UART_SetConfig+0x4e4>)
 8006afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b00:	08006b19 	.word	0x08006b19
 8006b04:	08006b21 	.word	0x08006b21
 8006b08:	08006b29 	.word	0x08006b29
 8006b0c:	08006b31 	.word	0x08006b31
 8006b10:	08006b39 	.word	0x08006b39
 8006b14:	08006b41 	.word	0x08006b41
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b1e:	e154      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006b20:	2304      	movs	r3, #4
 8006b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b26:	e150      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006b28:	2308      	movs	r3, #8
 8006b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b2e:	e14c      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006b30:	2310      	movs	r3, #16
 8006b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b36:	e148      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006b38:	2320      	movs	r3, #32
 8006b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b3e:	e144      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006b40:	2340      	movs	r3, #64	@ 0x40
 8006b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b46:	e140      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006b48:	2380      	movs	r3, #128	@ 0x80
 8006b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b4e:	e13c      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a41      	ldr	r2, [pc, #260]	@ (8006c5c <UART_SetConfig+0x640>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	f040 8082 	bne.w	8006c60 <UART_SetConfig+0x644>
 8006b5c:	4b3c      	ldr	r3, [pc, #240]	@ (8006c50 <UART_SetConfig+0x634>)
 8006b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b64:	2b28      	cmp	r3, #40	@ 0x28
 8006b66:	d86d      	bhi.n	8006c44 <UART_SetConfig+0x628>
 8006b68:	a201      	add	r2, pc, #4	@ (adr r2, 8006b70 <UART_SetConfig+0x554>)
 8006b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6e:	bf00      	nop
 8006b70:	08006c15 	.word	0x08006c15
 8006b74:	08006c45 	.word	0x08006c45
 8006b78:	08006c45 	.word	0x08006c45
 8006b7c:	08006c45 	.word	0x08006c45
 8006b80:	08006c45 	.word	0x08006c45
 8006b84:	08006c45 	.word	0x08006c45
 8006b88:	08006c45 	.word	0x08006c45
 8006b8c:	08006c45 	.word	0x08006c45
 8006b90:	08006c1d 	.word	0x08006c1d
 8006b94:	08006c45 	.word	0x08006c45
 8006b98:	08006c45 	.word	0x08006c45
 8006b9c:	08006c45 	.word	0x08006c45
 8006ba0:	08006c45 	.word	0x08006c45
 8006ba4:	08006c45 	.word	0x08006c45
 8006ba8:	08006c45 	.word	0x08006c45
 8006bac:	08006c45 	.word	0x08006c45
 8006bb0:	08006c25 	.word	0x08006c25
 8006bb4:	08006c45 	.word	0x08006c45
 8006bb8:	08006c45 	.word	0x08006c45
 8006bbc:	08006c45 	.word	0x08006c45
 8006bc0:	08006c45 	.word	0x08006c45
 8006bc4:	08006c45 	.word	0x08006c45
 8006bc8:	08006c45 	.word	0x08006c45
 8006bcc:	08006c45 	.word	0x08006c45
 8006bd0:	08006c2d 	.word	0x08006c2d
 8006bd4:	08006c45 	.word	0x08006c45
 8006bd8:	08006c45 	.word	0x08006c45
 8006bdc:	08006c45 	.word	0x08006c45
 8006be0:	08006c45 	.word	0x08006c45
 8006be4:	08006c45 	.word	0x08006c45
 8006be8:	08006c45 	.word	0x08006c45
 8006bec:	08006c45 	.word	0x08006c45
 8006bf0:	08006c35 	.word	0x08006c35
 8006bf4:	08006c45 	.word	0x08006c45
 8006bf8:	08006c45 	.word	0x08006c45
 8006bfc:	08006c45 	.word	0x08006c45
 8006c00:	08006c45 	.word	0x08006c45
 8006c04:	08006c45 	.word	0x08006c45
 8006c08:	08006c45 	.word	0x08006c45
 8006c0c:	08006c45 	.word	0x08006c45
 8006c10:	08006c3d 	.word	0x08006c3d
 8006c14:	2301      	movs	r3, #1
 8006c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c1a:	e0d6      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006c1c:	2304      	movs	r3, #4
 8006c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c22:	e0d2      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006c24:	2308      	movs	r3, #8
 8006c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c2a:	e0ce      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006c2c:	2310      	movs	r3, #16
 8006c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c32:	e0ca      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006c34:	2320      	movs	r3, #32
 8006c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c3a:	e0c6      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006c3c:	2340      	movs	r3, #64	@ 0x40
 8006c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c42:	e0c2      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006c44:	2380      	movs	r3, #128	@ 0x80
 8006c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c4a:	e0be      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006c4c:	40011400 	.word	0x40011400
 8006c50:	58024400 	.word	0x58024400
 8006c54:	40007800 	.word	0x40007800
 8006c58:	40007c00 	.word	0x40007c00
 8006c5c:	40011800 	.word	0x40011800
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4aad      	ldr	r2, [pc, #692]	@ (8006f1c <UART_SetConfig+0x900>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d176      	bne.n	8006d58 <UART_SetConfig+0x73c>
 8006c6a:	4bad      	ldr	r3, [pc, #692]	@ (8006f20 <UART_SetConfig+0x904>)
 8006c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c72:	2b28      	cmp	r3, #40	@ 0x28
 8006c74:	d86c      	bhi.n	8006d50 <UART_SetConfig+0x734>
 8006c76:	a201      	add	r2, pc, #4	@ (adr r2, 8006c7c <UART_SetConfig+0x660>)
 8006c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7c:	08006d21 	.word	0x08006d21
 8006c80:	08006d51 	.word	0x08006d51
 8006c84:	08006d51 	.word	0x08006d51
 8006c88:	08006d51 	.word	0x08006d51
 8006c8c:	08006d51 	.word	0x08006d51
 8006c90:	08006d51 	.word	0x08006d51
 8006c94:	08006d51 	.word	0x08006d51
 8006c98:	08006d51 	.word	0x08006d51
 8006c9c:	08006d29 	.word	0x08006d29
 8006ca0:	08006d51 	.word	0x08006d51
 8006ca4:	08006d51 	.word	0x08006d51
 8006ca8:	08006d51 	.word	0x08006d51
 8006cac:	08006d51 	.word	0x08006d51
 8006cb0:	08006d51 	.word	0x08006d51
 8006cb4:	08006d51 	.word	0x08006d51
 8006cb8:	08006d51 	.word	0x08006d51
 8006cbc:	08006d31 	.word	0x08006d31
 8006cc0:	08006d51 	.word	0x08006d51
 8006cc4:	08006d51 	.word	0x08006d51
 8006cc8:	08006d51 	.word	0x08006d51
 8006ccc:	08006d51 	.word	0x08006d51
 8006cd0:	08006d51 	.word	0x08006d51
 8006cd4:	08006d51 	.word	0x08006d51
 8006cd8:	08006d51 	.word	0x08006d51
 8006cdc:	08006d39 	.word	0x08006d39
 8006ce0:	08006d51 	.word	0x08006d51
 8006ce4:	08006d51 	.word	0x08006d51
 8006ce8:	08006d51 	.word	0x08006d51
 8006cec:	08006d51 	.word	0x08006d51
 8006cf0:	08006d51 	.word	0x08006d51
 8006cf4:	08006d51 	.word	0x08006d51
 8006cf8:	08006d51 	.word	0x08006d51
 8006cfc:	08006d41 	.word	0x08006d41
 8006d00:	08006d51 	.word	0x08006d51
 8006d04:	08006d51 	.word	0x08006d51
 8006d08:	08006d51 	.word	0x08006d51
 8006d0c:	08006d51 	.word	0x08006d51
 8006d10:	08006d51 	.word	0x08006d51
 8006d14:	08006d51 	.word	0x08006d51
 8006d18:	08006d51 	.word	0x08006d51
 8006d1c:	08006d49 	.word	0x08006d49
 8006d20:	2301      	movs	r3, #1
 8006d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d26:	e050      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006d28:	2304      	movs	r3, #4
 8006d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d2e:	e04c      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006d30:	2308      	movs	r3, #8
 8006d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d36:	e048      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006d38:	2310      	movs	r3, #16
 8006d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d3e:	e044      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006d40:	2320      	movs	r3, #32
 8006d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d46:	e040      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006d48:	2340      	movs	r3, #64	@ 0x40
 8006d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d4e:	e03c      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006d50:	2380      	movs	r3, #128	@ 0x80
 8006d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d56:	e038      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a71      	ldr	r2, [pc, #452]	@ (8006f24 <UART_SetConfig+0x908>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d130      	bne.n	8006dc4 <UART_SetConfig+0x7a8>
 8006d62:	4b6f      	ldr	r3, [pc, #444]	@ (8006f20 <UART_SetConfig+0x904>)
 8006d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	2b05      	cmp	r3, #5
 8006d6c:	d826      	bhi.n	8006dbc <UART_SetConfig+0x7a0>
 8006d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d74 <UART_SetConfig+0x758>)
 8006d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d74:	08006d8d 	.word	0x08006d8d
 8006d78:	08006d95 	.word	0x08006d95
 8006d7c:	08006d9d 	.word	0x08006d9d
 8006d80:	08006da5 	.word	0x08006da5
 8006d84:	08006dad 	.word	0x08006dad
 8006d88:	08006db5 	.word	0x08006db5
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d92:	e01a      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006d94:	2304      	movs	r3, #4
 8006d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d9a:	e016      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006d9c:	2308      	movs	r3, #8
 8006d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006da2:	e012      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006da4:	2310      	movs	r3, #16
 8006da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006daa:	e00e      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006dac:	2320      	movs	r3, #32
 8006dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006db2:	e00a      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006db4:	2340      	movs	r3, #64	@ 0x40
 8006db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dba:	e006      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006dbc:	2380      	movs	r3, #128	@ 0x80
 8006dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dc2:	e002      	b.n	8006dca <UART_SetConfig+0x7ae>
 8006dc4:	2380      	movs	r3, #128	@ 0x80
 8006dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a55      	ldr	r2, [pc, #340]	@ (8006f24 <UART_SetConfig+0x908>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	f040 80f8 	bne.w	8006fc6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006dd6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	dc46      	bgt.n	8006e6c <UART_SetConfig+0x850>
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	db75      	blt.n	8006ece <UART_SetConfig+0x8b2>
 8006de2:	3b02      	subs	r3, #2
 8006de4:	2b1e      	cmp	r3, #30
 8006de6:	d872      	bhi.n	8006ece <UART_SetConfig+0x8b2>
 8006de8:	a201      	add	r2, pc, #4	@ (adr r2, 8006df0 <UART_SetConfig+0x7d4>)
 8006dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dee:	bf00      	nop
 8006df0:	08006e73 	.word	0x08006e73
 8006df4:	08006ecf 	.word	0x08006ecf
 8006df8:	08006e7b 	.word	0x08006e7b
 8006dfc:	08006ecf 	.word	0x08006ecf
 8006e00:	08006ecf 	.word	0x08006ecf
 8006e04:	08006ecf 	.word	0x08006ecf
 8006e08:	08006e8b 	.word	0x08006e8b
 8006e0c:	08006ecf 	.word	0x08006ecf
 8006e10:	08006ecf 	.word	0x08006ecf
 8006e14:	08006ecf 	.word	0x08006ecf
 8006e18:	08006ecf 	.word	0x08006ecf
 8006e1c:	08006ecf 	.word	0x08006ecf
 8006e20:	08006ecf 	.word	0x08006ecf
 8006e24:	08006ecf 	.word	0x08006ecf
 8006e28:	08006e9b 	.word	0x08006e9b
 8006e2c:	08006ecf 	.word	0x08006ecf
 8006e30:	08006ecf 	.word	0x08006ecf
 8006e34:	08006ecf 	.word	0x08006ecf
 8006e38:	08006ecf 	.word	0x08006ecf
 8006e3c:	08006ecf 	.word	0x08006ecf
 8006e40:	08006ecf 	.word	0x08006ecf
 8006e44:	08006ecf 	.word	0x08006ecf
 8006e48:	08006ecf 	.word	0x08006ecf
 8006e4c:	08006ecf 	.word	0x08006ecf
 8006e50:	08006ecf 	.word	0x08006ecf
 8006e54:	08006ecf 	.word	0x08006ecf
 8006e58:	08006ecf 	.word	0x08006ecf
 8006e5c:	08006ecf 	.word	0x08006ecf
 8006e60:	08006ecf 	.word	0x08006ecf
 8006e64:	08006ecf 	.word	0x08006ecf
 8006e68:	08006ec1 	.word	0x08006ec1
 8006e6c:	2b40      	cmp	r3, #64	@ 0x40
 8006e6e:	d02a      	beq.n	8006ec6 <UART_SetConfig+0x8aa>
 8006e70:	e02d      	b.n	8006ece <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006e72:	f7fe fed3 	bl	8005c1c <HAL_RCCEx_GetD3PCLK1Freq>
 8006e76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e78:	e02f      	b.n	8006eda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fe fee2 	bl	8005c48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e88:	e027      	b.n	8006eda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e8a:	f107 0318 	add.w	r3, r7, #24
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7ff f82e 	bl	8005ef0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e98:	e01f      	b.n	8006eda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e9a:	4b21      	ldr	r3, [pc, #132]	@ (8006f20 <UART_SetConfig+0x904>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0320 	and.w	r3, r3, #32
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d009      	beq.n	8006eba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8006f20 <UART_SetConfig+0x904>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	08db      	lsrs	r3, r3, #3
 8006eac:	f003 0303 	and.w	r3, r3, #3
 8006eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8006f28 <UART_SetConfig+0x90c>)
 8006eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006eb8:	e00f      	b.n	8006eda <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006eba:	4b1b      	ldr	r3, [pc, #108]	@ (8006f28 <UART_SetConfig+0x90c>)
 8006ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ebe:	e00c      	b.n	8006eda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8006f2c <UART_SetConfig+0x910>)
 8006ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ec4:	e009      	b.n	8006eda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ecc:	e005      	b.n	8006eda <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006ed8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 81ee 	beq.w	80072be <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee6:	4a12      	ldr	r2, [pc, #72]	@ (8006f30 <UART_SetConfig+0x914>)
 8006ee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eec:	461a      	mov	r2, r3
 8006eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ef0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ef4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	4613      	mov	r3, r2
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	4413      	add	r3, r2
 8006f00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d305      	bcc.n	8006f12 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d910      	bls.n	8006f34 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006f18:	e1d1      	b.n	80072be <UART_SetConfig+0xca2>
 8006f1a:	bf00      	nop
 8006f1c:	40011c00 	.word	0x40011c00
 8006f20:	58024400 	.word	0x58024400
 8006f24:	58000c00 	.word	0x58000c00
 8006f28:	03d09000 	.word	0x03d09000
 8006f2c:	003d0900 	.word	0x003d0900
 8006f30:	080082e8 	.word	0x080082e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f36:	2200      	movs	r2, #0
 8006f38:	60bb      	str	r3, [r7, #8]
 8006f3a:	60fa      	str	r2, [r7, #12]
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f40:	4ac0      	ldr	r2, [pc, #768]	@ (8007244 <UART_SetConfig+0xc28>)
 8006f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	2200      	movs	r2, #0
 8006f4a:	603b      	str	r3, [r7, #0]
 8006f4c:	607a      	str	r2, [r7, #4]
 8006f4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f56:	f7f9 f9c9 	bl	80002ec <__aeabi_uldivmod>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4610      	mov	r0, r2
 8006f60:	4619      	mov	r1, r3
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	020b      	lsls	r3, r1, #8
 8006f6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f70:	0202      	lsls	r2, r0, #8
 8006f72:	6979      	ldr	r1, [r7, #20]
 8006f74:	6849      	ldr	r1, [r1, #4]
 8006f76:	0849      	lsrs	r1, r1, #1
 8006f78:	2000      	movs	r0, #0
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	4605      	mov	r5, r0
 8006f7e:	eb12 0804 	adds.w	r8, r2, r4
 8006f82:	eb43 0905 	adc.w	r9, r3, r5
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	469a      	mov	sl, r3
 8006f8e:	4693      	mov	fp, r2
 8006f90:	4652      	mov	r2, sl
 8006f92:	465b      	mov	r3, fp
 8006f94:	4640      	mov	r0, r8
 8006f96:	4649      	mov	r1, r9
 8006f98:	f7f9 f9a8 	bl	80002ec <__aeabi_uldivmod>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006faa:	d308      	bcc.n	8006fbe <UART_SetConfig+0x9a2>
 8006fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fb2:	d204      	bcs.n	8006fbe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fba:	60da      	str	r2, [r3, #12]
 8006fbc:	e17f      	b.n	80072be <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006fc4:	e17b      	b.n	80072be <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fce:	f040 80bd 	bne.w	800714c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006fd2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006fd6:	2b20      	cmp	r3, #32
 8006fd8:	dc48      	bgt.n	800706c <UART_SetConfig+0xa50>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	db7b      	blt.n	80070d6 <UART_SetConfig+0xaba>
 8006fde:	2b20      	cmp	r3, #32
 8006fe0:	d879      	bhi.n	80070d6 <UART_SetConfig+0xaba>
 8006fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fe8 <UART_SetConfig+0x9cc>)
 8006fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe8:	08007073 	.word	0x08007073
 8006fec:	0800707b 	.word	0x0800707b
 8006ff0:	080070d7 	.word	0x080070d7
 8006ff4:	080070d7 	.word	0x080070d7
 8006ff8:	08007083 	.word	0x08007083
 8006ffc:	080070d7 	.word	0x080070d7
 8007000:	080070d7 	.word	0x080070d7
 8007004:	080070d7 	.word	0x080070d7
 8007008:	08007093 	.word	0x08007093
 800700c:	080070d7 	.word	0x080070d7
 8007010:	080070d7 	.word	0x080070d7
 8007014:	080070d7 	.word	0x080070d7
 8007018:	080070d7 	.word	0x080070d7
 800701c:	080070d7 	.word	0x080070d7
 8007020:	080070d7 	.word	0x080070d7
 8007024:	080070d7 	.word	0x080070d7
 8007028:	080070a3 	.word	0x080070a3
 800702c:	080070d7 	.word	0x080070d7
 8007030:	080070d7 	.word	0x080070d7
 8007034:	080070d7 	.word	0x080070d7
 8007038:	080070d7 	.word	0x080070d7
 800703c:	080070d7 	.word	0x080070d7
 8007040:	080070d7 	.word	0x080070d7
 8007044:	080070d7 	.word	0x080070d7
 8007048:	080070d7 	.word	0x080070d7
 800704c:	080070d7 	.word	0x080070d7
 8007050:	080070d7 	.word	0x080070d7
 8007054:	080070d7 	.word	0x080070d7
 8007058:	080070d7 	.word	0x080070d7
 800705c:	080070d7 	.word	0x080070d7
 8007060:	080070d7 	.word	0x080070d7
 8007064:	080070d7 	.word	0x080070d7
 8007068:	080070c9 	.word	0x080070c9
 800706c:	2b40      	cmp	r3, #64	@ 0x40
 800706e:	d02e      	beq.n	80070ce <UART_SetConfig+0xab2>
 8007070:	e031      	b.n	80070d6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007072:	f7fd fbe9 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 8007076:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007078:	e033      	b.n	80070e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800707a:	f7fd fbfb 	bl	8004874 <HAL_RCC_GetPCLK2Freq>
 800707e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007080:	e02f      	b.n	80070e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe fdde 	bl	8005c48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800708c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007090:	e027      	b.n	80070e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007092:	f107 0318 	add.w	r3, r7, #24
 8007096:	4618      	mov	r0, r3
 8007098:	f7fe ff2a 	bl	8005ef0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070a0:	e01f      	b.n	80070e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070a2:	4b69      	ldr	r3, [pc, #420]	@ (8007248 <UART_SetConfig+0xc2c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d009      	beq.n	80070c2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070ae:	4b66      	ldr	r3, [pc, #408]	@ (8007248 <UART_SetConfig+0xc2c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	08db      	lsrs	r3, r3, #3
 80070b4:	f003 0303 	and.w	r3, r3, #3
 80070b8:	4a64      	ldr	r2, [pc, #400]	@ (800724c <UART_SetConfig+0xc30>)
 80070ba:	fa22 f303 	lsr.w	r3, r2, r3
 80070be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070c0:	e00f      	b.n	80070e2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80070c2:	4b62      	ldr	r3, [pc, #392]	@ (800724c <UART_SetConfig+0xc30>)
 80070c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070c6:	e00c      	b.n	80070e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80070c8:	4b61      	ldr	r3, [pc, #388]	@ (8007250 <UART_SetConfig+0xc34>)
 80070ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070cc:	e009      	b.n	80070e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070d4:	e005      	b.n	80070e2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80070e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 80ea 	beq.w	80072be <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ee:	4a55      	ldr	r2, [pc, #340]	@ (8007244 <UART_SetConfig+0xc28>)
 80070f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070f4:	461a      	mov	r2, r3
 80070f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80070fc:	005a      	lsls	r2, r3, #1
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	085b      	lsrs	r3, r3, #1
 8007104:	441a      	add	r2, r3
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	fbb2 f3f3 	udiv	r3, r2, r3
 800710e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007112:	2b0f      	cmp	r3, #15
 8007114:	d916      	bls.n	8007144 <UART_SetConfig+0xb28>
 8007116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800711c:	d212      	bcs.n	8007144 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800711e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007120:	b29b      	uxth	r3, r3
 8007122:	f023 030f 	bic.w	r3, r3, #15
 8007126:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712a:	085b      	lsrs	r3, r3, #1
 800712c:	b29b      	uxth	r3, r3
 800712e:	f003 0307 	and.w	r3, r3, #7
 8007132:	b29a      	uxth	r2, r3
 8007134:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007136:	4313      	orrs	r3, r2
 8007138:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007140:	60da      	str	r2, [r3, #12]
 8007142:	e0bc      	b.n	80072be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800714a:	e0b8      	b.n	80072be <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800714c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007150:	2b20      	cmp	r3, #32
 8007152:	dc4b      	bgt.n	80071ec <UART_SetConfig+0xbd0>
 8007154:	2b00      	cmp	r3, #0
 8007156:	f2c0 8087 	blt.w	8007268 <UART_SetConfig+0xc4c>
 800715a:	2b20      	cmp	r3, #32
 800715c:	f200 8084 	bhi.w	8007268 <UART_SetConfig+0xc4c>
 8007160:	a201      	add	r2, pc, #4	@ (adr r2, 8007168 <UART_SetConfig+0xb4c>)
 8007162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007166:	bf00      	nop
 8007168:	080071f3 	.word	0x080071f3
 800716c:	080071fb 	.word	0x080071fb
 8007170:	08007269 	.word	0x08007269
 8007174:	08007269 	.word	0x08007269
 8007178:	08007203 	.word	0x08007203
 800717c:	08007269 	.word	0x08007269
 8007180:	08007269 	.word	0x08007269
 8007184:	08007269 	.word	0x08007269
 8007188:	08007213 	.word	0x08007213
 800718c:	08007269 	.word	0x08007269
 8007190:	08007269 	.word	0x08007269
 8007194:	08007269 	.word	0x08007269
 8007198:	08007269 	.word	0x08007269
 800719c:	08007269 	.word	0x08007269
 80071a0:	08007269 	.word	0x08007269
 80071a4:	08007269 	.word	0x08007269
 80071a8:	08007223 	.word	0x08007223
 80071ac:	08007269 	.word	0x08007269
 80071b0:	08007269 	.word	0x08007269
 80071b4:	08007269 	.word	0x08007269
 80071b8:	08007269 	.word	0x08007269
 80071bc:	08007269 	.word	0x08007269
 80071c0:	08007269 	.word	0x08007269
 80071c4:	08007269 	.word	0x08007269
 80071c8:	08007269 	.word	0x08007269
 80071cc:	08007269 	.word	0x08007269
 80071d0:	08007269 	.word	0x08007269
 80071d4:	08007269 	.word	0x08007269
 80071d8:	08007269 	.word	0x08007269
 80071dc:	08007269 	.word	0x08007269
 80071e0:	08007269 	.word	0x08007269
 80071e4:	08007269 	.word	0x08007269
 80071e8:	0800725b 	.word	0x0800725b
 80071ec:	2b40      	cmp	r3, #64	@ 0x40
 80071ee:	d037      	beq.n	8007260 <UART_SetConfig+0xc44>
 80071f0:	e03a      	b.n	8007268 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071f2:	f7fd fb29 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 80071f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071f8:	e03c      	b.n	8007274 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071fa:	f7fd fb3b 	bl	8004874 <HAL_RCC_GetPCLK2Freq>
 80071fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007200:	e038      	b.n	8007274 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007206:	4618      	mov	r0, r3
 8007208:	f7fe fd1e 	bl	8005c48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800720c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007210:	e030      	b.n	8007274 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007212:	f107 0318 	add.w	r3, r7, #24
 8007216:	4618      	mov	r0, r3
 8007218:	f7fe fe6a 	bl	8005ef0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007220:	e028      	b.n	8007274 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007222:	4b09      	ldr	r3, [pc, #36]	@ (8007248 <UART_SetConfig+0xc2c>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b00      	cmp	r3, #0
 800722c:	d012      	beq.n	8007254 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800722e:	4b06      	ldr	r3, [pc, #24]	@ (8007248 <UART_SetConfig+0xc2c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	08db      	lsrs	r3, r3, #3
 8007234:	f003 0303 	and.w	r3, r3, #3
 8007238:	4a04      	ldr	r2, [pc, #16]	@ (800724c <UART_SetConfig+0xc30>)
 800723a:	fa22 f303 	lsr.w	r3, r2, r3
 800723e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007240:	e018      	b.n	8007274 <UART_SetConfig+0xc58>
 8007242:	bf00      	nop
 8007244:	080082e8 	.word	0x080082e8
 8007248:	58024400 	.word	0x58024400
 800724c:	03d09000 	.word	0x03d09000
 8007250:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007254:	4b24      	ldr	r3, [pc, #144]	@ (80072e8 <UART_SetConfig+0xccc>)
 8007256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007258:	e00c      	b.n	8007274 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800725a:	4b24      	ldr	r3, [pc, #144]	@ (80072ec <UART_SetConfig+0xcd0>)
 800725c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800725e:	e009      	b.n	8007274 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007260:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007266:	e005      	b.n	8007274 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007272:	bf00      	nop
    }

    if (pclk != 0U)
 8007274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007276:	2b00      	cmp	r3, #0
 8007278:	d021      	beq.n	80072be <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727e:	4a1c      	ldr	r2, [pc, #112]	@ (80072f0 <UART_SetConfig+0xcd4>)
 8007280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007284:	461a      	mov	r2, r3
 8007286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007288:	fbb3 f2f2 	udiv	r2, r3, r2
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	085b      	lsrs	r3, r3, #1
 8007292:	441a      	add	r2, r3
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	fbb2 f3f3 	udiv	r3, r2, r3
 800729c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800729e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a0:	2b0f      	cmp	r3, #15
 80072a2:	d909      	bls.n	80072b8 <UART_SetConfig+0xc9c>
 80072a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072aa:	d205      	bcs.n	80072b8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	60da      	str	r2, [r3, #12]
 80072b6:	e002      	b.n	80072be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2200      	movs	r2, #0
 80072d2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2200      	movs	r2, #0
 80072d8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80072da:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3748      	adds	r7, #72	@ 0x48
 80072e2:	46bd      	mov	sp, r7
 80072e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072e8:	03d09000 	.word	0x03d09000
 80072ec:	003d0900 	.word	0x003d0900
 80072f0:	080082e8 	.word	0x080082e8

080072f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007300:	f003 0308 	and.w	r3, r3, #8
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00a      	beq.n	800731e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	430a      	orrs	r2, r1
 800731c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	430a      	orrs	r2, r1
 800733e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00a      	beq.n	8007362 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007366:	f003 0304 	and.w	r3, r3, #4
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00a      	beq.n	8007384 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007388:	f003 0310 	and.w	r3, r3, #16
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00a      	beq.n	80073a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073aa:	f003 0320 	and.w	r3, r3, #32
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d01a      	beq.n	800740a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073f2:	d10a      	bne.n	800740a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	430a      	orrs	r2, r1
 8007408:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800740e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00a      	beq.n	800742c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	430a      	orrs	r2, r1
 800742a:	605a      	str	r2, [r3, #4]
  }
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b098      	sub	sp, #96	@ 0x60
 800743c:	af02      	add	r7, sp, #8
 800743e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007448:	f7fa fb2c 	bl	8001aa4 <HAL_GetTick>
 800744c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0308 	and.w	r3, r3, #8
 8007458:	2b08      	cmp	r3, #8
 800745a:	d12f      	bne.n	80074bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800745c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007464:	2200      	movs	r2, #0
 8007466:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f88e 	bl	800758c <UART_WaitOnFlagUntilTimeout>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d022      	beq.n	80074bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747e:	e853 3f00 	ldrex	r3, [r3]
 8007482:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800748a:	653b      	str	r3, [r7, #80]	@ 0x50
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	461a      	mov	r2, r3
 8007492:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007494:	647b      	str	r3, [r7, #68]	@ 0x44
 8007496:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007498:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800749a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800749c:	e841 2300 	strex	r3, r2, [r1]
 80074a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1e6      	bne.n	8007476 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e063      	b.n	8007584 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0304 	and.w	r3, r3, #4
 80074c6:	2b04      	cmp	r3, #4
 80074c8:	d149      	bne.n	800755e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074d2:	2200      	movs	r2, #0
 80074d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f857 	bl	800758c <UART_WaitOnFlagUntilTimeout>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d03c      	beq.n	800755e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	623b      	str	r3, [r7, #32]
   return(result);
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007502:	633b      	str	r3, [r7, #48]	@ 0x30
 8007504:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e6      	bne.n	80074e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3308      	adds	r3, #8
 800751c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	e853 3f00 	ldrex	r3, [r3]
 8007524:	60fb      	str	r3, [r7, #12]
   return(result);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f023 0301 	bic.w	r3, r3, #1
 800752c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3308      	adds	r3, #8
 8007534:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007536:	61fa      	str	r2, [r7, #28]
 8007538:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753a:	69b9      	ldr	r1, [r7, #24]
 800753c:	69fa      	ldr	r2, [r7, #28]
 800753e:	e841 2300 	strex	r3, r2, [r1]
 8007542:	617b      	str	r3, [r7, #20]
   return(result);
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1e5      	bne.n	8007516 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2220      	movs	r2, #32
 800754e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e012      	b.n	8007584 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2220      	movs	r2, #32
 8007562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2220      	movs	r2, #32
 800756a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3758      	adds	r7, #88	@ 0x58
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	603b      	str	r3, [r7, #0]
 8007598:	4613      	mov	r3, r2
 800759a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800759c:	e04f      	b.n	800763e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a4:	d04b      	beq.n	800763e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075a6:	f7fa fa7d 	bl	8001aa4 <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d302      	bcc.n	80075bc <UART_WaitOnFlagUntilTimeout+0x30>
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e04e      	b.n	800765e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0304 	and.w	r3, r3, #4
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d037      	beq.n	800763e <UART_WaitOnFlagUntilTimeout+0xb2>
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b80      	cmp	r3, #128	@ 0x80
 80075d2:	d034      	beq.n	800763e <UART_WaitOnFlagUntilTimeout+0xb2>
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	2b40      	cmp	r3, #64	@ 0x40
 80075d8:	d031      	beq.n	800763e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	f003 0308 	and.w	r3, r3, #8
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d110      	bne.n	800760a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2208      	movs	r2, #8
 80075ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 f839 	bl	8007668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2208      	movs	r2, #8
 80075fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e029      	b.n	800765e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007614:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007618:	d111      	bne.n	800763e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007622:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 f81f 	bl	8007668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2220      	movs	r2, #32
 800762e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e00f      	b.n	800765e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69da      	ldr	r2, [r3, #28]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	4013      	ands	r3, r2
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	429a      	cmp	r2, r3
 800764c:	bf0c      	ite	eq
 800764e:	2301      	moveq	r3, #1
 8007650:	2300      	movne	r3, #0
 8007652:	b2db      	uxtb	r3, r3
 8007654:	461a      	mov	r2, r3
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	429a      	cmp	r2, r3
 800765a:	d0a0      	beq.n	800759e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
	...

08007668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007668:	b480      	push	{r7}
 800766a:	b095      	sub	sp, #84	@ 0x54
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800767e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007680:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007684:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800768e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007690:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007694:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800769c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e6      	bne.n	8007670 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3308      	adds	r3, #8
 80076a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80076b2:	69fa      	ldr	r2, [r7, #28]
 80076b4:	4b1e      	ldr	r3, [pc, #120]	@ (8007730 <UART_EndRxTransfer+0xc8>)
 80076b6:	4013      	ands	r3, r2
 80076b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3308      	adds	r3, #8
 80076c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e5      	bne.n	80076a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d118      	bne.n	8007710 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	e853 3f00 	ldrex	r3, [r3]
 80076ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	f023 0310 	bic.w	r3, r3, #16
 80076f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	461a      	mov	r2, r3
 80076fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076fc:	61bb      	str	r3, [r7, #24]
 80076fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007700:	6979      	ldr	r1, [r7, #20]
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	e841 2300 	strex	r3, r2, [r1]
 8007708:	613b      	str	r3, [r7, #16]
   return(result);
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e6      	bne.n	80076de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2220      	movs	r2, #32
 8007714:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007724:	bf00      	nop
 8007726:	3754      	adds	r7, #84	@ 0x54
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	effffffe 	.word	0xeffffffe

08007734 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007742:	2b01      	cmp	r3, #1
 8007744:	d101      	bne.n	800774a <HAL_UARTEx_DisableFifoMode+0x16>
 8007746:	2302      	movs	r3, #2
 8007748:	e027      	b.n	800779a <HAL_UARTEx_DisableFifoMode+0x66>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2224      	movs	r2, #36	@ 0x24
 8007756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f022 0201 	bic.w	r2, r2, #1
 8007770:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007778:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2220      	movs	r2, #32
 800778c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b084      	sub	sp, #16
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d101      	bne.n	80077be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077ba:	2302      	movs	r3, #2
 80077bc:	e02d      	b.n	800781a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2224      	movs	r2, #36	@ 0x24
 80077ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f022 0201 	bic.w	r2, r2, #1
 80077e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f850 	bl	80078a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2220      	movs	r2, #32
 800780c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b084      	sub	sp, #16
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007832:	2b01      	cmp	r3, #1
 8007834:	d101      	bne.n	800783a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007836:	2302      	movs	r3, #2
 8007838:	e02d      	b.n	8007896 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2224      	movs	r2, #36	@ 0x24
 8007846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0201 	bic.w	r2, r2, #1
 8007860:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f812 	bl	80078a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2220      	movs	r2, #32
 8007888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d108      	bne.n	80078c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078c0:	e031      	b.n	8007926 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078c2:	2310      	movs	r3, #16
 80078c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078c6:	2310      	movs	r3, #16
 80078c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	0e5b      	lsrs	r3, r3, #25
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	f003 0307 	and.w	r3, r3, #7
 80078d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	0f5b      	lsrs	r3, r3, #29
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	f003 0307 	and.w	r3, r3, #7
 80078e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
 80078ec:	7b3a      	ldrb	r2, [r7, #12]
 80078ee:	4911      	ldr	r1, [pc, #68]	@ (8007934 <UARTEx_SetNbDataToProcess+0x94>)
 80078f0:	5c8a      	ldrb	r2, [r1, r2]
 80078f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078f6:	7b3a      	ldrb	r2, [r7, #12]
 80078f8:	490f      	ldr	r1, [pc, #60]	@ (8007938 <UARTEx_SetNbDataToProcess+0x98>)
 80078fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007900:	b29a      	uxth	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007908:	7bfb      	ldrb	r3, [r7, #15]
 800790a:	7b7a      	ldrb	r2, [r7, #13]
 800790c:	4909      	ldr	r1, [pc, #36]	@ (8007934 <UARTEx_SetNbDataToProcess+0x94>)
 800790e:	5c8a      	ldrb	r2, [r1, r2]
 8007910:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007914:	7b7a      	ldrb	r2, [r7, #13]
 8007916:	4908      	ldr	r1, [pc, #32]	@ (8007938 <UARTEx_SetNbDataToProcess+0x98>)
 8007918:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800791a:	fb93 f3f2 	sdiv	r3, r3, r2
 800791e:	b29a      	uxth	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007926:	bf00      	nop
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	08008300 	.word	0x08008300
 8007938:	08008308 	.word	0x08008308

0800793c <std>:
 800793c:	2300      	movs	r3, #0
 800793e:	b510      	push	{r4, lr}
 8007940:	4604      	mov	r4, r0
 8007942:	e9c0 3300 	strd	r3, r3, [r0]
 8007946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800794a:	6083      	str	r3, [r0, #8]
 800794c:	8181      	strh	r1, [r0, #12]
 800794e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007950:	81c2      	strh	r2, [r0, #14]
 8007952:	6183      	str	r3, [r0, #24]
 8007954:	4619      	mov	r1, r3
 8007956:	2208      	movs	r2, #8
 8007958:	305c      	adds	r0, #92	@ 0x5c
 800795a:	f000 f9e7 	bl	8007d2c <memset>
 800795e:	4b0d      	ldr	r3, [pc, #52]	@ (8007994 <std+0x58>)
 8007960:	6263      	str	r3, [r4, #36]	@ 0x24
 8007962:	4b0d      	ldr	r3, [pc, #52]	@ (8007998 <std+0x5c>)
 8007964:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007966:	4b0d      	ldr	r3, [pc, #52]	@ (800799c <std+0x60>)
 8007968:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800796a:	4b0d      	ldr	r3, [pc, #52]	@ (80079a0 <std+0x64>)
 800796c:	6323      	str	r3, [r4, #48]	@ 0x30
 800796e:	4b0d      	ldr	r3, [pc, #52]	@ (80079a4 <std+0x68>)
 8007970:	6224      	str	r4, [r4, #32]
 8007972:	429c      	cmp	r4, r3
 8007974:	d006      	beq.n	8007984 <std+0x48>
 8007976:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800797a:	4294      	cmp	r4, r2
 800797c:	d002      	beq.n	8007984 <std+0x48>
 800797e:	33d0      	adds	r3, #208	@ 0xd0
 8007980:	429c      	cmp	r4, r3
 8007982:	d105      	bne.n	8007990 <std+0x54>
 8007984:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800798c:	f000 ba46 	b.w	8007e1c <__retarget_lock_init_recursive>
 8007990:	bd10      	pop	{r4, pc}
 8007992:	bf00      	nop
 8007994:	08007b7d 	.word	0x08007b7d
 8007998:	08007b9f 	.word	0x08007b9f
 800799c:	08007bd7 	.word	0x08007bd7
 80079a0:	08007bfb 	.word	0x08007bfb
 80079a4:	24000180 	.word	0x24000180

080079a8 <stdio_exit_handler>:
 80079a8:	4a02      	ldr	r2, [pc, #8]	@ (80079b4 <stdio_exit_handler+0xc>)
 80079aa:	4903      	ldr	r1, [pc, #12]	@ (80079b8 <stdio_exit_handler+0x10>)
 80079ac:	4803      	ldr	r0, [pc, #12]	@ (80079bc <stdio_exit_handler+0x14>)
 80079ae:	f000 b869 	b.w	8007a84 <_fwalk_sglue>
 80079b2:	bf00      	nop
 80079b4:	24000010 	.word	0x24000010
 80079b8:	0800811d 	.word	0x0800811d
 80079bc:	24000020 	.word	0x24000020

080079c0 <cleanup_stdio>:
 80079c0:	6841      	ldr	r1, [r0, #4]
 80079c2:	4b0c      	ldr	r3, [pc, #48]	@ (80079f4 <cleanup_stdio+0x34>)
 80079c4:	4299      	cmp	r1, r3
 80079c6:	b510      	push	{r4, lr}
 80079c8:	4604      	mov	r4, r0
 80079ca:	d001      	beq.n	80079d0 <cleanup_stdio+0x10>
 80079cc:	f000 fba6 	bl	800811c <_fflush_r>
 80079d0:	68a1      	ldr	r1, [r4, #8]
 80079d2:	4b09      	ldr	r3, [pc, #36]	@ (80079f8 <cleanup_stdio+0x38>)
 80079d4:	4299      	cmp	r1, r3
 80079d6:	d002      	beq.n	80079de <cleanup_stdio+0x1e>
 80079d8:	4620      	mov	r0, r4
 80079da:	f000 fb9f 	bl	800811c <_fflush_r>
 80079de:	68e1      	ldr	r1, [r4, #12]
 80079e0:	4b06      	ldr	r3, [pc, #24]	@ (80079fc <cleanup_stdio+0x3c>)
 80079e2:	4299      	cmp	r1, r3
 80079e4:	d004      	beq.n	80079f0 <cleanup_stdio+0x30>
 80079e6:	4620      	mov	r0, r4
 80079e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079ec:	f000 bb96 	b.w	800811c <_fflush_r>
 80079f0:	bd10      	pop	{r4, pc}
 80079f2:	bf00      	nop
 80079f4:	24000180 	.word	0x24000180
 80079f8:	240001e8 	.word	0x240001e8
 80079fc:	24000250 	.word	0x24000250

08007a00 <global_stdio_init.part.0>:
 8007a00:	b510      	push	{r4, lr}
 8007a02:	4b0b      	ldr	r3, [pc, #44]	@ (8007a30 <global_stdio_init.part.0+0x30>)
 8007a04:	4c0b      	ldr	r4, [pc, #44]	@ (8007a34 <global_stdio_init.part.0+0x34>)
 8007a06:	4a0c      	ldr	r2, [pc, #48]	@ (8007a38 <global_stdio_init.part.0+0x38>)
 8007a08:	601a      	str	r2, [r3, #0]
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	2104      	movs	r1, #4
 8007a10:	f7ff ff94 	bl	800793c <std>
 8007a14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a18:	2201      	movs	r2, #1
 8007a1a:	2109      	movs	r1, #9
 8007a1c:	f7ff ff8e 	bl	800793c <std>
 8007a20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a24:	2202      	movs	r2, #2
 8007a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a2a:	2112      	movs	r1, #18
 8007a2c:	f7ff bf86 	b.w	800793c <std>
 8007a30:	240002b8 	.word	0x240002b8
 8007a34:	24000180 	.word	0x24000180
 8007a38:	080079a9 	.word	0x080079a9

08007a3c <__sfp_lock_acquire>:
 8007a3c:	4801      	ldr	r0, [pc, #4]	@ (8007a44 <__sfp_lock_acquire+0x8>)
 8007a3e:	f000 b9ee 	b.w	8007e1e <__retarget_lock_acquire_recursive>
 8007a42:	bf00      	nop
 8007a44:	240002c1 	.word	0x240002c1

08007a48 <__sfp_lock_release>:
 8007a48:	4801      	ldr	r0, [pc, #4]	@ (8007a50 <__sfp_lock_release+0x8>)
 8007a4a:	f000 b9e9 	b.w	8007e20 <__retarget_lock_release_recursive>
 8007a4e:	bf00      	nop
 8007a50:	240002c1 	.word	0x240002c1

08007a54 <__sinit>:
 8007a54:	b510      	push	{r4, lr}
 8007a56:	4604      	mov	r4, r0
 8007a58:	f7ff fff0 	bl	8007a3c <__sfp_lock_acquire>
 8007a5c:	6a23      	ldr	r3, [r4, #32]
 8007a5e:	b11b      	cbz	r3, 8007a68 <__sinit+0x14>
 8007a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a64:	f7ff bff0 	b.w	8007a48 <__sfp_lock_release>
 8007a68:	4b04      	ldr	r3, [pc, #16]	@ (8007a7c <__sinit+0x28>)
 8007a6a:	6223      	str	r3, [r4, #32]
 8007a6c:	4b04      	ldr	r3, [pc, #16]	@ (8007a80 <__sinit+0x2c>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1f5      	bne.n	8007a60 <__sinit+0xc>
 8007a74:	f7ff ffc4 	bl	8007a00 <global_stdio_init.part.0>
 8007a78:	e7f2      	b.n	8007a60 <__sinit+0xc>
 8007a7a:	bf00      	nop
 8007a7c:	080079c1 	.word	0x080079c1
 8007a80:	240002b8 	.word	0x240002b8

08007a84 <_fwalk_sglue>:
 8007a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a88:	4607      	mov	r7, r0
 8007a8a:	4688      	mov	r8, r1
 8007a8c:	4614      	mov	r4, r2
 8007a8e:	2600      	movs	r6, #0
 8007a90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a94:	f1b9 0901 	subs.w	r9, r9, #1
 8007a98:	d505      	bpl.n	8007aa6 <_fwalk_sglue+0x22>
 8007a9a:	6824      	ldr	r4, [r4, #0]
 8007a9c:	2c00      	cmp	r4, #0
 8007a9e:	d1f7      	bne.n	8007a90 <_fwalk_sglue+0xc>
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aa6:	89ab      	ldrh	r3, [r5, #12]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d907      	bls.n	8007abc <_fwalk_sglue+0x38>
 8007aac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	d003      	beq.n	8007abc <_fwalk_sglue+0x38>
 8007ab4:	4629      	mov	r1, r5
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	47c0      	blx	r8
 8007aba:	4306      	orrs	r6, r0
 8007abc:	3568      	adds	r5, #104	@ 0x68
 8007abe:	e7e9      	b.n	8007a94 <_fwalk_sglue+0x10>

08007ac0 <_puts_r>:
 8007ac0:	6a03      	ldr	r3, [r0, #32]
 8007ac2:	b570      	push	{r4, r5, r6, lr}
 8007ac4:	6884      	ldr	r4, [r0, #8]
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	460e      	mov	r6, r1
 8007aca:	b90b      	cbnz	r3, 8007ad0 <_puts_r+0x10>
 8007acc:	f7ff ffc2 	bl	8007a54 <__sinit>
 8007ad0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ad2:	07db      	lsls	r3, r3, #31
 8007ad4:	d405      	bmi.n	8007ae2 <_puts_r+0x22>
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	0598      	lsls	r0, r3, #22
 8007ada:	d402      	bmi.n	8007ae2 <_puts_r+0x22>
 8007adc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ade:	f000 f99e 	bl	8007e1e <__retarget_lock_acquire_recursive>
 8007ae2:	89a3      	ldrh	r3, [r4, #12]
 8007ae4:	0719      	lsls	r1, r3, #28
 8007ae6:	d502      	bpl.n	8007aee <_puts_r+0x2e>
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d135      	bne.n	8007b5a <_puts_r+0x9a>
 8007aee:	4621      	mov	r1, r4
 8007af0:	4628      	mov	r0, r5
 8007af2:	f000 f8c5 	bl	8007c80 <__swsetup_r>
 8007af6:	b380      	cbz	r0, 8007b5a <_puts_r+0x9a>
 8007af8:	f04f 35ff 	mov.w	r5, #4294967295
 8007afc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007afe:	07da      	lsls	r2, r3, #31
 8007b00:	d405      	bmi.n	8007b0e <_puts_r+0x4e>
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	059b      	lsls	r3, r3, #22
 8007b06:	d402      	bmi.n	8007b0e <_puts_r+0x4e>
 8007b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b0a:	f000 f989 	bl	8007e20 <__retarget_lock_release_recursive>
 8007b0e:	4628      	mov	r0, r5
 8007b10:	bd70      	pop	{r4, r5, r6, pc}
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	da04      	bge.n	8007b20 <_puts_r+0x60>
 8007b16:	69a2      	ldr	r2, [r4, #24]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	dc17      	bgt.n	8007b4c <_puts_r+0x8c>
 8007b1c:	290a      	cmp	r1, #10
 8007b1e:	d015      	beq.n	8007b4c <_puts_r+0x8c>
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	6022      	str	r2, [r4, #0]
 8007b26:	7019      	strb	r1, [r3, #0]
 8007b28:	68a3      	ldr	r3, [r4, #8]
 8007b2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	60a3      	str	r3, [r4, #8]
 8007b32:	2900      	cmp	r1, #0
 8007b34:	d1ed      	bne.n	8007b12 <_puts_r+0x52>
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	da11      	bge.n	8007b5e <_puts_r+0x9e>
 8007b3a:	4622      	mov	r2, r4
 8007b3c:	210a      	movs	r1, #10
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f000 f85f 	bl	8007c02 <__swbuf_r>
 8007b44:	3001      	adds	r0, #1
 8007b46:	d0d7      	beq.n	8007af8 <_puts_r+0x38>
 8007b48:	250a      	movs	r5, #10
 8007b4a:	e7d7      	b.n	8007afc <_puts_r+0x3c>
 8007b4c:	4622      	mov	r2, r4
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f000 f857 	bl	8007c02 <__swbuf_r>
 8007b54:	3001      	adds	r0, #1
 8007b56:	d1e7      	bne.n	8007b28 <_puts_r+0x68>
 8007b58:	e7ce      	b.n	8007af8 <_puts_r+0x38>
 8007b5a:	3e01      	subs	r6, #1
 8007b5c:	e7e4      	b.n	8007b28 <_puts_r+0x68>
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	6022      	str	r2, [r4, #0]
 8007b64:	220a      	movs	r2, #10
 8007b66:	701a      	strb	r2, [r3, #0]
 8007b68:	e7ee      	b.n	8007b48 <_puts_r+0x88>
	...

08007b6c <puts>:
 8007b6c:	4b02      	ldr	r3, [pc, #8]	@ (8007b78 <puts+0xc>)
 8007b6e:	4601      	mov	r1, r0
 8007b70:	6818      	ldr	r0, [r3, #0]
 8007b72:	f7ff bfa5 	b.w	8007ac0 <_puts_r>
 8007b76:	bf00      	nop
 8007b78:	2400001c 	.word	0x2400001c

08007b7c <__sread>:
 8007b7c:	b510      	push	{r4, lr}
 8007b7e:	460c      	mov	r4, r1
 8007b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b84:	f000 f8fc 	bl	8007d80 <_read_r>
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	bfab      	itete	ge
 8007b8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8007b90:	181b      	addge	r3, r3, r0
 8007b92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b96:	bfac      	ite	ge
 8007b98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b9a:	81a3      	strhlt	r3, [r4, #12]
 8007b9c:	bd10      	pop	{r4, pc}

08007b9e <__swrite>:
 8007b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba2:	461f      	mov	r7, r3
 8007ba4:	898b      	ldrh	r3, [r1, #12]
 8007ba6:	05db      	lsls	r3, r3, #23
 8007ba8:	4605      	mov	r5, r0
 8007baa:	460c      	mov	r4, r1
 8007bac:	4616      	mov	r6, r2
 8007bae:	d505      	bpl.n	8007bbc <__swrite+0x1e>
 8007bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f000 f8d0 	bl	8007d5c <_lseek_r>
 8007bbc:	89a3      	ldrh	r3, [r4, #12]
 8007bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bc6:	81a3      	strh	r3, [r4, #12]
 8007bc8:	4632      	mov	r2, r6
 8007bca:	463b      	mov	r3, r7
 8007bcc:	4628      	mov	r0, r5
 8007bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd2:	f000 b8e7 	b.w	8007da4 <_write_r>

08007bd6 <__sseek>:
 8007bd6:	b510      	push	{r4, lr}
 8007bd8:	460c      	mov	r4, r1
 8007bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bde:	f000 f8bd 	bl	8007d5c <_lseek_r>
 8007be2:	1c43      	adds	r3, r0, #1
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	bf15      	itete	ne
 8007be8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007bea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007bee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007bf2:	81a3      	strheq	r3, [r4, #12]
 8007bf4:	bf18      	it	ne
 8007bf6:	81a3      	strhne	r3, [r4, #12]
 8007bf8:	bd10      	pop	{r4, pc}

08007bfa <__sclose>:
 8007bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bfe:	f000 b89d 	b.w	8007d3c <_close_r>

08007c02 <__swbuf_r>:
 8007c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c04:	460e      	mov	r6, r1
 8007c06:	4614      	mov	r4, r2
 8007c08:	4605      	mov	r5, r0
 8007c0a:	b118      	cbz	r0, 8007c14 <__swbuf_r+0x12>
 8007c0c:	6a03      	ldr	r3, [r0, #32]
 8007c0e:	b90b      	cbnz	r3, 8007c14 <__swbuf_r+0x12>
 8007c10:	f7ff ff20 	bl	8007a54 <__sinit>
 8007c14:	69a3      	ldr	r3, [r4, #24]
 8007c16:	60a3      	str	r3, [r4, #8]
 8007c18:	89a3      	ldrh	r3, [r4, #12]
 8007c1a:	071a      	lsls	r2, r3, #28
 8007c1c:	d501      	bpl.n	8007c22 <__swbuf_r+0x20>
 8007c1e:	6923      	ldr	r3, [r4, #16]
 8007c20:	b943      	cbnz	r3, 8007c34 <__swbuf_r+0x32>
 8007c22:	4621      	mov	r1, r4
 8007c24:	4628      	mov	r0, r5
 8007c26:	f000 f82b 	bl	8007c80 <__swsetup_r>
 8007c2a:	b118      	cbz	r0, 8007c34 <__swbuf_r+0x32>
 8007c2c:	f04f 37ff 	mov.w	r7, #4294967295
 8007c30:	4638      	mov	r0, r7
 8007c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c34:	6823      	ldr	r3, [r4, #0]
 8007c36:	6922      	ldr	r2, [r4, #16]
 8007c38:	1a98      	subs	r0, r3, r2
 8007c3a:	6963      	ldr	r3, [r4, #20]
 8007c3c:	b2f6      	uxtb	r6, r6
 8007c3e:	4283      	cmp	r3, r0
 8007c40:	4637      	mov	r7, r6
 8007c42:	dc05      	bgt.n	8007c50 <__swbuf_r+0x4e>
 8007c44:	4621      	mov	r1, r4
 8007c46:	4628      	mov	r0, r5
 8007c48:	f000 fa68 	bl	800811c <_fflush_r>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d1ed      	bne.n	8007c2c <__swbuf_r+0x2a>
 8007c50:	68a3      	ldr	r3, [r4, #8]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	60a3      	str	r3, [r4, #8]
 8007c56:	6823      	ldr	r3, [r4, #0]
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	6022      	str	r2, [r4, #0]
 8007c5c:	701e      	strb	r6, [r3, #0]
 8007c5e:	6962      	ldr	r2, [r4, #20]
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d004      	beq.n	8007c70 <__swbuf_r+0x6e>
 8007c66:	89a3      	ldrh	r3, [r4, #12]
 8007c68:	07db      	lsls	r3, r3, #31
 8007c6a:	d5e1      	bpl.n	8007c30 <__swbuf_r+0x2e>
 8007c6c:	2e0a      	cmp	r6, #10
 8007c6e:	d1df      	bne.n	8007c30 <__swbuf_r+0x2e>
 8007c70:	4621      	mov	r1, r4
 8007c72:	4628      	mov	r0, r5
 8007c74:	f000 fa52 	bl	800811c <_fflush_r>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d0d9      	beq.n	8007c30 <__swbuf_r+0x2e>
 8007c7c:	e7d6      	b.n	8007c2c <__swbuf_r+0x2a>
	...

08007c80 <__swsetup_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4b29      	ldr	r3, [pc, #164]	@ (8007d28 <__swsetup_r+0xa8>)
 8007c84:	4605      	mov	r5, r0
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	460c      	mov	r4, r1
 8007c8a:	b118      	cbz	r0, 8007c94 <__swsetup_r+0x14>
 8007c8c:	6a03      	ldr	r3, [r0, #32]
 8007c8e:	b90b      	cbnz	r3, 8007c94 <__swsetup_r+0x14>
 8007c90:	f7ff fee0 	bl	8007a54 <__sinit>
 8007c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c98:	0719      	lsls	r1, r3, #28
 8007c9a:	d422      	bmi.n	8007ce2 <__swsetup_r+0x62>
 8007c9c:	06da      	lsls	r2, r3, #27
 8007c9e:	d407      	bmi.n	8007cb0 <__swsetup_r+0x30>
 8007ca0:	2209      	movs	r2, #9
 8007ca2:	602a      	str	r2, [r5, #0]
 8007ca4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ca8:	81a3      	strh	r3, [r4, #12]
 8007caa:	f04f 30ff 	mov.w	r0, #4294967295
 8007cae:	e033      	b.n	8007d18 <__swsetup_r+0x98>
 8007cb0:	0758      	lsls	r0, r3, #29
 8007cb2:	d512      	bpl.n	8007cda <__swsetup_r+0x5a>
 8007cb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cb6:	b141      	cbz	r1, 8007cca <__swsetup_r+0x4a>
 8007cb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cbc:	4299      	cmp	r1, r3
 8007cbe:	d002      	beq.n	8007cc6 <__swsetup_r+0x46>
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	f000 f8af 	bl	8007e24 <_free_r>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cca:	89a3      	ldrh	r3, [r4, #12]
 8007ccc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007cd0:	81a3      	strh	r3, [r4, #12]
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	6063      	str	r3, [r4, #4]
 8007cd6:	6923      	ldr	r3, [r4, #16]
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	89a3      	ldrh	r3, [r4, #12]
 8007cdc:	f043 0308 	orr.w	r3, r3, #8
 8007ce0:	81a3      	strh	r3, [r4, #12]
 8007ce2:	6923      	ldr	r3, [r4, #16]
 8007ce4:	b94b      	cbnz	r3, 8007cfa <__swsetup_r+0x7a>
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cf0:	d003      	beq.n	8007cfa <__swsetup_r+0x7a>
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	f000 fa5f 	bl	80081b8 <__smakebuf_r>
 8007cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cfe:	f013 0201 	ands.w	r2, r3, #1
 8007d02:	d00a      	beq.n	8007d1a <__swsetup_r+0x9a>
 8007d04:	2200      	movs	r2, #0
 8007d06:	60a2      	str	r2, [r4, #8]
 8007d08:	6962      	ldr	r2, [r4, #20]
 8007d0a:	4252      	negs	r2, r2
 8007d0c:	61a2      	str	r2, [r4, #24]
 8007d0e:	6922      	ldr	r2, [r4, #16]
 8007d10:	b942      	cbnz	r2, 8007d24 <__swsetup_r+0xa4>
 8007d12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d16:	d1c5      	bne.n	8007ca4 <__swsetup_r+0x24>
 8007d18:	bd38      	pop	{r3, r4, r5, pc}
 8007d1a:	0799      	lsls	r1, r3, #30
 8007d1c:	bf58      	it	pl
 8007d1e:	6962      	ldrpl	r2, [r4, #20]
 8007d20:	60a2      	str	r2, [r4, #8]
 8007d22:	e7f4      	b.n	8007d0e <__swsetup_r+0x8e>
 8007d24:	2000      	movs	r0, #0
 8007d26:	e7f7      	b.n	8007d18 <__swsetup_r+0x98>
 8007d28:	2400001c 	.word	0x2400001c

08007d2c <memset>:
 8007d2c:	4402      	add	r2, r0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d100      	bne.n	8007d36 <memset+0xa>
 8007d34:	4770      	bx	lr
 8007d36:	f803 1b01 	strb.w	r1, [r3], #1
 8007d3a:	e7f9      	b.n	8007d30 <memset+0x4>

08007d3c <_close_r>:
 8007d3c:	b538      	push	{r3, r4, r5, lr}
 8007d3e:	4d06      	ldr	r5, [pc, #24]	@ (8007d58 <_close_r+0x1c>)
 8007d40:	2300      	movs	r3, #0
 8007d42:	4604      	mov	r4, r0
 8007d44:	4608      	mov	r0, r1
 8007d46:	602b      	str	r3, [r5, #0]
 8007d48:	f7f9 fc52 	bl	80015f0 <_close>
 8007d4c:	1c43      	adds	r3, r0, #1
 8007d4e:	d102      	bne.n	8007d56 <_close_r+0x1a>
 8007d50:	682b      	ldr	r3, [r5, #0]
 8007d52:	b103      	cbz	r3, 8007d56 <_close_r+0x1a>
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	bd38      	pop	{r3, r4, r5, pc}
 8007d58:	240002bc 	.word	0x240002bc

08007d5c <_lseek_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d07      	ldr	r5, [pc, #28]	@ (8007d7c <_lseek_r+0x20>)
 8007d60:	4604      	mov	r4, r0
 8007d62:	4608      	mov	r0, r1
 8007d64:	4611      	mov	r1, r2
 8007d66:	2200      	movs	r2, #0
 8007d68:	602a      	str	r2, [r5, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f7f9 fc67 	bl	800163e <_lseek>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d102      	bne.n	8007d7a <_lseek_r+0x1e>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b103      	cbz	r3, 8007d7a <_lseek_r+0x1e>
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	240002bc 	.word	0x240002bc

08007d80 <_read_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4d07      	ldr	r5, [pc, #28]	@ (8007da0 <_read_r+0x20>)
 8007d84:	4604      	mov	r4, r0
 8007d86:	4608      	mov	r0, r1
 8007d88:	4611      	mov	r1, r2
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	602a      	str	r2, [r5, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f7f9 fbf5 	bl	800157e <_read>
 8007d94:	1c43      	adds	r3, r0, #1
 8007d96:	d102      	bne.n	8007d9e <_read_r+0x1e>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	b103      	cbz	r3, 8007d9e <_read_r+0x1e>
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	240002bc 	.word	0x240002bc

08007da4 <_write_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4d07      	ldr	r5, [pc, #28]	@ (8007dc4 <_write_r+0x20>)
 8007da8:	4604      	mov	r4, r0
 8007daa:	4608      	mov	r0, r1
 8007dac:	4611      	mov	r1, r2
 8007dae:	2200      	movs	r2, #0
 8007db0:	602a      	str	r2, [r5, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	f7f9 fc00 	bl	80015b8 <_write>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_write_r+0x1e>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_write_r+0x1e>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	240002bc 	.word	0x240002bc

08007dc8 <__errno>:
 8007dc8:	4b01      	ldr	r3, [pc, #4]	@ (8007dd0 <__errno+0x8>)
 8007dca:	6818      	ldr	r0, [r3, #0]
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	2400001c 	.word	0x2400001c

08007dd4 <__libc_init_array>:
 8007dd4:	b570      	push	{r4, r5, r6, lr}
 8007dd6:	4d0d      	ldr	r5, [pc, #52]	@ (8007e0c <__libc_init_array+0x38>)
 8007dd8:	4c0d      	ldr	r4, [pc, #52]	@ (8007e10 <__libc_init_array+0x3c>)
 8007dda:	1b64      	subs	r4, r4, r5
 8007ddc:	10a4      	asrs	r4, r4, #2
 8007dde:	2600      	movs	r6, #0
 8007de0:	42a6      	cmp	r6, r4
 8007de2:	d109      	bne.n	8007df8 <__libc_init_array+0x24>
 8007de4:	4d0b      	ldr	r5, [pc, #44]	@ (8007e14 <__libc_init_array+0x40>)
 8007de6:	4c0c      	ldr	r4, [pc, #48]	@ (8007e18 <__libc_init_array+0x44>)
 8007de8:	f000 fa54 	bl	8008294 <_init>
 8007dec:	1b64      	subs	r4, r4, r5
 8007dee:	10a4      	asrs	r4, r4, #2
 8007df0:	2600      	movs	r6, #0
 8007df2:	42a6      	cmp	r6, r4
 8007df4:	d105      	bne.n	8007e02 <__libc_init_array+0x2e>
 8007df6:	bd70      	pop	{r4, r5, r6, pc}
 8007df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dfc:	4798      	blx	r3
 8007dfe:	3601      	adds	r6, #1
 8007e00:	e7ee      	b.n	8007de0 <__libc_init_array+0xc>
 8007e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e06:	4798      	blx	r3
 8007e08:	3601      	adds	r6, #1
 8007e0a:	e7f2      	b.n	8007df2 <__libc_init_array+0x1e>
 8007e0c:	08008318 	.word	0x08008318
 8007e10:	08008318 	.word	0x08008318
 8007e14:	08008318 	.word	0x08008318
 8007e18:	0800831c 	.word	0x0800831c

08007e1c <__retarget_lock_init_recursive>:
 8007e1c:	4770      	bx	lr

08007e1e <__retarget_lock_acquire_recursive>:
 8007e1e:	4770      	bx	lr

08007e20 <__retarget_lock_release_recursive>:
 8007e20:	4770      	bx	lr
	...

08007e24 <_free_r>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	4605      	mov	r5, r0
 8007e28:	2900      	cmp	r1, #0
 8007e2a:	d041      	beq.n	8007eb0 <_free_r+0x8c>
 8007e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e30:	1f0c      	subs	r4, r1, #4
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	bfb8      	it	lt
 8007e36:	18e4      	addlt	r4, r4, r3
 8007e38:	f000 f8e0 	bl	8007ffc <__malloc_lock>
 8007e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8007eb4 <_free_r+0x90>)
 8007e3e:	6813      	ldr	r3, [r2, #0]
 8007e40:	b933      	cbnz	r3, 8007e50 <_free_r+0x2c>
 8007e42:	6063      	str	r3, [r4, #4]
 8007e44:	6014      	str	r4, [r2, #0]
 8007e46:	4628      	mov	r0, r5
 8007e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e4c:	f000 b8dc 	b.w	8008008 <__malloc_unlock>
 8007e50:	42a3      	cmp	r3, r4
 8007e52:	d908      	bls.n	8007e66 <_free_r+0x42>
 8007e54:	6820      	ldr	r0, [r4, #0]
 8007e56:	1821      	adds	r1, r4, r0
 8007e58:	428b      	cmp	r3, r1
 8007e5a:	bf01      	itttt	eq
 8007e5c:	6819      	ldreq	r1, [r3, #0]
 8007e5e:	685b      	ldreq	r3, [r3, #4]
 8007e60:	1809      	addeq	r1, r1, r0
 8007e62:	6021      	streq	r1, [r4, #0]
 8007e64:	e7ed      	b.n	8007e42 <_free_r+0x1e>
 8007e66:	461a      	mov	r2, r3
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	b10b      	cbz	r3, 8007e70 <_free_r+0x4c>
 8007e6c:	42a3      	cmp	r3, r4
 8007e6e:	d9fa      	bls.n	8007e66 <_free_r+0x42>
 8007e70:	6811      	ldr	r1, [r2, #0]
 8007e72:	1850      	adds	r0, r2, r1
 8007e74:	42a0      	cmp	r0, r4
 8007e76:	d10b      	bne.n	8007e90 <_free_r+0x6c>
 8007e78:	6820      	ldr	r0, [r4, #0]
 8007e7a:	4401      	add	r1, r0
 8007e7c:	1850      	adds	r0, r2, r1
 8007e7e:	4283      	cmp	r3, r0
 8007e80:	6011      	str	r1, [r2, #0]
 8007e82:	d1e0      	bne.n	8007e46 <_free_r+0x22>
 8007e84:	6818      	ldr	r0, [r3, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	6053      	str	r3, [r2, #4]
 8007e8a:	4408      	add	r0, r1
 8007e8c:	6010      	str	r0, [r2, #0]
 8007e8e:	e7da      	b.n	8007e46 <_free_r+0x22>
 8007e90:	d902      	bls.n	8007e98 <_free_r+0x74>
 8007e92:	230c      	movs	r3, #12
 8007e94:	602b      	str	r3, [r5, #0]
 8007e96:	e7d6      	b.n	8007e46 <_free_r+0x22>
 8007e98:	6820      	ldr	r0, [r4, #0]
 8007e9a:	1821      	adds	r1, r4, r0
 8007e9c:	428b      	cmp	r3, r1
 8007e9e:	bf04      	itt	eq
 8007ea0:	6819      	ldreq	r1, [r3, #0]
 8007ea2:	685b      	ldreq	r3, [r3, #4]
 8007ea4:	6063      	str	r3, [r4, #4]
 8007ea6:	bf04      	itt	eq
 8007ea8:	1809      	addeq	r1, r1, r0
 8007eaa:	6021      	streq	r1, [r4, #0]
 8007eac:	6054      	str	r4, [r2, #4]
 8007eae:	e7ca      	b.n	8007e46 <_free_r+0x22>
 8007eb0:	bd38      	pop	{r3, r4, r5, pc}
 8007eb2:	bf00      	nop
 8007eb4:	240002c8 	.word	0x240002c8

08007eb8 <sbrk_aligned>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	4e0f      	ldr	r6, [pc, #60]	@ (8007ef8 <sbrk_aligned+0x40>)
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	6831      	ldr	r1, [r6, #0]
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	b911      	cbnz	r1, 8007eca <sbrk_aligned+0x12>
 8007ec4:	f000 f9d6 	bl	8008274 <_sbrk_r>
 8007ec8:	6030      	str	r0, [r6, #0]
 8007eca:	4621      	mov	r1, r4
 8007ecc:	4628      	mov	r0, r5
 8007ece:	f000 f9d1 	bl	8008274 <_sbrk_r>
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	d103      	bne.n	8007ede <sbrk_aligned+0x26>
 8007ed6:	f04f 34ff 	mov.w	r4, #4294967295
 8007eda:	4620      	mov	r0, r4
 8007edc:	bd70      	pop	{r4, r5, r6, pc}
 8007ede:	1cc4      	adds	r4, r0, #3
 8007ee0:	f024 0403 	bic.w	r4, r4, #3
 8007ee4:	42a0      	cmp	r0, r4
 8007ee6:	d0f8      	beq.n	8007eda <sbrk_aligned+0x22>
 8007ee8:	1a21      	subs	r1, r4, r0
 8007eea:	4628      	mov	r0, r5
 8007eec:	f000 f9c2 	bl	8008274 <_sbrk_r>
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	d1f2      	bne.n	8007eda <sbrk_aligned+0x22>
 8007ef4:	e7ef      	b.n	8007ed6 <sbrk_aligned+0x1e>
 8007ef6:	bf00      	nop
 8007ef8:	240002c4 	.word	0x240002c4

08007efc <_malloc_r>:
 8007efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f00:	1ccd      	adds	r5, r1, #3
 8007f02:	f025 0503 	bic.w	r5, r5, #3
 8007f06:	3508      	adds	r5, #8
 8007f08:	2d0c      	cmp	r5, #12
 8007f0a:	bf38      	it	cc
 8007f0c:	250c      	movcc	r5, #12
 8007f0e:	2d00      	cmp	r5, #0
 8007f10:	4606      	mov	r6, r0
 8007f12:	db01      	blt.n	8007f18 <_malloc_r+0x1c>
 8007f14:	42a9      	cmp	r1, r5
 8007f16:	d904      	bls.n	8007f22 <_malloc_r+0x26>
 8007f18:	230c      	movs	r3, #12
 8007f1a:	6033      	str	r3, [r6, #0]
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ff8 <_malloc_r+0xfc>
 8007f26:	f000 f869 	bl	8007ffc <__malloc_lock>
 8007f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f2e:	461c      	mov	r4, r3
 8007f30:	bb44      	cbnz	r4, 8007f84 <_malloc_r+0x88>
 8007f32:	4629      	mov	r1, r5
 8007f34:	4630      	mov	r0, r6
 8007f36:	f7ff ffbf 	bl	8007eb8 <sbrk_aligned>
 8007f3a:	1c43      	adds	r3, r0, #1
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	d158      	bne.n	8007ff2 <_malloc_r+0xf6>
 8007f40:	f8d8 4000 	ldr.w	r4, [r8]
 8007f44:	4627      	mov	r7, r4
 8007f46:	2f00      	cmp	r7, #0
 8007f48:	d143      	bne.n	8007fd2 <_malloc_r+0xd6>
 8007f4a:	2c00      	cmp	r4, #0
 8007f4c:	d04b      	beq.n	8007fe6 <_malloc_r+0xea>
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	4639      	mov	r1, r7
 8007f52:	4630      	mov	r0, r6
 8007f54:	eb04 0903 	add.w	r9, r4, r3
 8007f58:	f000 f98c 	bl	8008274 <_sbrk_r>
 8007f5c:	4581      	cmp	r9, r0
 8007f5e:	d142      	bne.n	8007fe6 <_malloc_r+0xea>
 8007f60:	6821      	ldr	r1, [r4, #0]
 8007f62:	1a6d      	subs	r5, r5, r1
 8007f64:	4629      	mov	r1, r5
 8007f66:	4630      	mov	r0, r6
 8007f68:	f7ff ffa6 	bl	8007eb8 <sbrk_aligned>
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	d03a      	beq.n	8007fe6 <_malloc_r+0xea>
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	442b      	add	r3, r5
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	f8d8 3000 	ldr.w	r3, [r8]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	bb62      	cbnz	r2, 8007fd8 <_malloc_r+0xdc>
 8007f7e:	f8c8 7000 	str.w	r7, [r8]
 8007f82:	e00f      	b.n	8007fa4 <_malloc_r+0xa8>
 8007f84:	6822      	ldr	r2, [r4, #0]
 8007f86:	1b52      	subs	r2, r2, r5
 8007f88:	d420      	bmi.n	8007fcc <_malloc_r+0xd0>
 8007f8a:	2a0b      	cmp	r2, #11
 8007f8c:	d917      	bls.n	8007fbe <_malloc_r+0xc2>
 8007f8e:	1961      	adds	r1, r4, r5
 8007f90:	42a3      	cmp	r3, r4
 8007f92:	6025      	str	r5, [r4, #0]
 8007f94:	bf18      	it	ne
 8007f96:	6059      	strne	r1, [r3, #4]
 8007f98:	6863      	ldr	r3, [r4, #4]
 8007f9a:	bf08      	it	eq
 8007f9c:	f8c8 1000 	streq.w	r1, [r8]
 8007fa0:	5162      	str	r2, [r4, r5]
 8007fa2:	604b      	str	r3, [r1, #4]
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	f000 f82f 	bl	8008008 <__malloc_unlock>
 8007faa:	f104 000b 	add.w	r0, r4, #11
 8007fae:	1d23      	adds	r3, r4, #4
 8007fb0:	f020 0007 	bic.w	r0, r0, #7
 8007fb4:	1ac2      	subs	r2, r0, r3
 8007fb6:	bf1c      	itt	ne
 8007fb8:	1a1b      	subne	r3, r3, r0
 8007fba:	50a3      	strne	r3, [r4, r2]
 8007fbc:	e7af      	b.n	8007f1e <_malloc_r+0x22>
 8007fbe:	6862      	ldr	r2, [r4, #4]
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	bf0c      	ite	eq
 8007fc4:	f8c8 2000 	streq.w	r2, [r8]
 8007fc8:	605a      	strne	r2, [r3, #4]
 8007fca:	e7eb      	b.n	8007fa4 <_malloc_r+0xa8>
 8007fcc:	4623      	mov	r3, r4
 8007fce:	6864      	ldr	r4, [r4, #4]
 8007fd0:	e7ae      	b.n	8007f30 <_malloc_r+0x34>
 8007fd2:	463c      	mov	r4, r7
 8007fd4:	687f      	ldr	r7, [r7, #4]
 8007fd6:	e7b6      	b.n	8007f46 <_malloc_r+0x4a>
 8007fd8:	461a      	mov	r2, r3
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	42a3      	cmp	r3, r4
 8007fde:	d1fb      	bne.n	8007fd8 <_malloc_r+0xdc>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	6053      	str	r3, [r2, #4]
 8007fe4:	e7de      	b.n	8007fa4 <_malloc_r+0xa8>
 8007fe6:	230c      	movs	r3, #12
 8007fe8:	6033      	str	r3, [r6, #0]
 8007fea:	4630      	mov	r0, r6
 8007fec:	f000 f80c 	bl	8008008 <__malloc_unlock>
 8007ff0:	e794      	b.n	8007f1c <_malloc_r+0x20>
 8007ff2:	6005      	str	r5, [r0, #0]
 8007ff4:	e7d6      	b.n	8007fa4 <_malloc_r+0xa8>
 8007ff6:	bf00      	nop
 8007ff8:	240002c8 	.word	0x240002c8

08007ffc <__malloc_lock>:
 8007ffc:	4801      	ldr	r0, [pc, #4]	@ (8008004 <__malloc_lock+0x8>)
 8007ffe:	f7ff bf0e 	b.w	8007e1e <__retarget_lock_acquire_recursive>
 8008002:	bf00      	nop
 8008004:	240002c0 	.word	0x240002c0

08008008 <__malloc_unlock>:
 8008008:	4801      	ldr	r0, [pc, #4]	@ (8008010 <__malloc_unlock+0x8>)
 800800a:	f7ff bf09 	b.w	8007e20 <__retarget_lock_release_recursive>
 800800e:	bf00      	nop
 8008010:	240002c0 	.word	0x240002c0

08008014 <__sflush_r>:
 8008014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800801c:	0716      	lsls	r6, r2, #28
 800801e:	4605      	mov	r5, r0
 8008020:	460c      	mov	r4, r1
 8008022:	d454      	bmi.n	80080ce <__sflush_r+0xba>
 8008024:	684b      	ldr	r3, [r1, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	dc02      	bgt.n	8008030 <__sflush_r+0x1c>
 800802a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800802c:	2b00      	cmp	r3, #0
 800802e:	dd48      	ble.n	80080c2 <__sflush_r+0xae>
 8008030:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008032:	2e00      	cmp	r6, #0
 8008034:	d045      	beq.n	80080c2 <__sflush_r+0xae>
 8008036:	2300      	movs	r3, #0
 8008038:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800803c:	682f      	ldr	r7, [r5, #0]
 800803e:	6a21      	ldr	r1, [r4, #32]
 8008040:	602b      	str	r3, [r5, #0]
 8008042:	d030      	beq.n	80080a6 <__sflush_r+0x92>
 8008044:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008046:	89a3      	ldrh	r3, [r4, #12]
 8008048:	0759      	lsls	r1, r3, #29
 800804a:	d505      	bpl.n	8008058 <__sflush_r+0x44>
 800804c:	6863      	ldr	r3, [r4, #4]
 800804e:	1ad2      	subs	r2, r2, r3
 8008050:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008052:	b10b      	cbz	r3, 8008058 <__sflush_r+0x44>
 8008054:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008056:	1ad2      	subs	r2, r2, r3
 8008058:	2300      	movs	r3, #0
 800805a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800805c:	6a21      	ldr	r1, [r4, #32]
 800805e:	4628      	mov	r0, r5
 8008060:	47b0      	blx	r6
 8008062:	1c43      	adds	r3, r0, #1
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	d106      	bne.n	8008076 <__sflush_r+0x62>
 8008068:	6829      	ldr	r1, [r5, #0]
 800806a:	291d      	cmp	r1, #29
 800806c:	d82b      	bhi.n	80080c6 <__sflush_r+0xb2>
 800806e:	4a2a      	ldr	r2, [pc, #168]	@ (8008118 <__sflush_r+0x104>)
 8008070:	410a      	asrs	r2, r1
 8008072:	07d6      	lsls	r6, r2, #31
 8008074:	d427      	bmi.n	80080c6 <__sflush_r+0xb2>
 8008076:	2200      	movs	r2, #0
 8008078:	6062      	str	r2, [r4, #4]
 800807a:	04d9      	lsls	r1, r3, #19
 800807c:	6922      	ldr	r2, [r4, #16]
 800807e:	6022      	str	r2, [r4, #0]
 8008080:	d504      	bpl.n	800808c <__sflush_r+0x78>
 8008082:	1c42      	adds	r2, r0, #1
 8008084:	d101      	bne.n	800808a <__sflush_r+0x76>
 8008086:	682b      	ldr	r3, [r5, #0]
 8008088:	b903      	cbnz	r3, 800808c <__sflush_r+0x78>
 800808a:	6560      	str	r0, [r4, #84]	@ 0x54
 800808c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800808e:	602f      	str	r7, [r5, #0]
 8008090:	b1b9      	cbz	r1, 80080c2 <__sflush_r+0xae>
 8008092:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008096:	4299      	cmp	r1, r3
 8008098:	d002      	beq.n	80080a0 <__sflush_r+0x8c>
 800809a:	4628      	mov	r0, r5
 800809c:	f7ff fec2 	bl	8007e24 <_free_r>
 80080a0:	2300      	movs	r3, #0
 80080a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80080a4:	e00d      	b.n	80080c2 <__sflush_r+0xae>
 80080a6:	2301      	movs	r3, #1
 80080a8:	4628      	mov	r0, r5
 80080aa:	47b0      	blx	r6
 80080ac:	4602      	mov	r2, r0
 80080ae:	1c50      	adds	r0, r2, #1
 80080b0:	d1c9      	bne.n	8008046 <__sflush_r+0x32>
 80080b2:	682b      	ldr	r3, [r5, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d0c6      	beq.n	8008046 <__sflush_r+0x32>
 80080b8:	2b1d      	cmp	r3, #29
 80080ba:	d001      	beq.n	80080c0 <__sflush_r+0xac>
 80080bc:	2b16      	cmp	r3, #22
 80080be:	d11e      	bne.n	80080fe <__sflush_r+0xea>
 80080c0:	602f      	str	r7, [r5, #0]
 80080c2:	2000      	movs	r0, #0
 80080c4:	e022      	b.n	800810c <__sflush_r+0xf8>
 80080c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080ca:	b21b      	sxth	r3, r3
 80080cc:	e01b      	b.n	8008106 <__sflush_r+0xf2>
 80080ce:	690f      	ldr	r7, [r1, #16]
 80080d0:	2f00      	cmp	r7, #0
 80080d2:	d0f6      	beq.n	80080c2 <__sflush_r+0xae>
 80080d4:	0793      	lsls	r3, r2, #30
 80080d6:	680e      	ldr	r6, [r1, #0]
 80080d8:	bf08      	it	eq
 80080da:	694b      	ldreq	r3, [r1, #20]
 80080dc:	600f      	str	r7, [r1, #0]
 80080de:	bf18      	it	ne
 80080e0:	2300      	movne	r3, #0
 80080e2:	eba6 0807 	sub.w	r8, r6, r7
 80080e6:	608b      	str	r3, [r1, #8]
 80080e8:	f1b8 0f00 	cmp.w	r8, #0
 80080ec:	dde9      	ble.n	80080c2 <__sflush_r+0xae>
 80080ee:	6a21      	ldr	r1, [r4, #32]
 80080f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80080f2:	4643      	mov	r3, r8
 80080f4:	463a      	mov	r2, r7
 80080f6:	4628      	mov	r0, r5
 80080f8:	47b0      	blx	r6
 80080fa:	2800      	cmp	r0, #0
 80080fc:	dc08      	bgt.n	8008110 <__sflush_r+0xfc>
 80080fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008106:	81a3      	strh	r3, [r4, #12]
 8008108:	f04f 30ff 	mov.w	r0, #4294967295
 800810c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008110:	4407      	add	r7, r0
 8008112:	eba8 0800 	sub.w	r8, r8, r0
 8008116:	e7e7      	b.n	80080e8 <__sflush_r+0xd4>
 8008118:	dfbffffe 	.word	0xdfbffffe

0800811c <_fflush_r>:
 800811c:	b538      	push	{r3, r4, r5, lr}
 800811e:	690b      	ldr	r3, [r1, #16]
 8008120:	4605      	mov	r5, r0
 8008122:	460c      	mov	r4, r1
 8008124:	b913      	cbnz	r3, 800812c <_fflush_r+0x10>
 8008126:	2500      	movs	r5, #0
 8008128:	4628      	mov	r0, r5
 800812a:	bd38      	pop	{r3, r4, r5, pc}
 800812c:	b118      	cbz	r0, 8008136 <_fflush_r+0x1a>
 800812e:	6a03      	ldr	r3, [r0, #32]
 8008130:	b90b      	cbnz	r3, 8008136 <_fflush_r+0x1a>
 8008132:	f7ff fc8f 	bl	8007a54 <__sinit>
 8008136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0f3      	beq.n	8008126 <_fflush_r+0xa>
 800813e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008140:	07d0      	lsls	r0, r2, #31
 8008142:	d404      	bmi.n	800814e <_fflush_r+0x32>
 8008144:	0599      	lsls	r1, r3, #22
 8008146:	d402      	bmi.n	800814e <_fflush_r+0x32>
 8008148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800814a:	f7ff fe68 	bl	8007e1e <__retarget_lock_acquire_recursive>
 800814e:	4628      	mov	r0, r5
 8008150:	4621      	mov	r1, r4
 8008152:	f7ff ff5f 	bl	8008014 <__sflush_r>
 8008156:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008158:	07da      	lsls	r2, r3, #31
 800815a:	4605      	mov	r5, r0
 800815c:	d4e4      	bmi.n	8008128 <_fflush_r+0xc>
 800815e:	89a3      	ldrh	r3, [r4, #12]
 8008160:	059b      	lsls	r3, r3, #22
 8008162:	d4e1      	bmi.n	8008128 <_fflush_r+0xc>
 8008164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008166:	f7ff fe5b 	bl	8007e20 <__retarget_lock_release_recursive>
 800816a:	e7dd      	b.n	8008128 <_fflush_r+0xc>

0800816c <__swhatbuf_r>:
 800816c:	b570      	push	{r4, r5, r6, lr}
 800816e:	460c      	mov	r4, r1
 8008170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008174:	2900      	cmp	r1, #0
 8008176:	b096      	sub	sp, #88	@ 0x58
 8008178:	4615      	mov	r5, r2
 800817a:	461e      	mov	r6, r3
 800817c:	da0d      	bge.n	800819a <__swhatbuf_r+0x2e>
 800817e:	89a3      	ldrh	r3, [r4, #12]
 8008180:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008184:	f04f 0100 	mov.w	r1, #0
 8008188:	bf14      	ite	ne
 800818a:	2340      	movne	r3, #64	@ 0x40
 800818c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008190:	2000      	movs	r0, #0
 8008192:	6031      	str	r1, [r6, #0]
 8008194:	602b      	str	r3, [r5, #0]
 8008196:	b016      	add	sp, #88	@ 0x58
 8008198:	bd70      	pop	{r4, r5, r6, pc}
 800819a:	466a      	mov	r2, sp
 800819c:	f000 f848 	bl	8008230 <_fstat_r>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	dbec      	blt.n	800817e <__swhatbuf_r+0x12>
 80081a4:	9901      	ldr	r1, [sp, #4]
 80081a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80081aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80081ae:	4259      	negs	r1, r3
 80081b0:	4159      	adcs	r1, r3
 80081b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081b6:	e7eb      	b.n	8008190 <__swhatbuf_r+0x24>

080081b8 <__smakebuf_r>:
 80081b8:	898b      	ldrh	r3, [r1, #12]
 80081ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081bc:	079d      	lsls	r5, r3, #30
 80081be:	4606      	mov	r6, r0
 80081c0:	460c      	mov	r4, r1
 80081c2:	d507      	bpl.n	80081d4 <__smakebuf_r+0x1c>
 80081c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	6123      	str	r3, [r4, #16]
 80081cc:	2301      	movs	r3, #1
 80081ce:	6163      	str	r3, [r4, #20]
 80081d0:	b003      	add	sp, #12
 80081d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081d4:	ab01      	add	r3, sp, #4
 80081d6:	466a      	mov	r2, sp
 80081d8:	f7ff ffc8 	bl	800816c <__swhatbuf_r>
 80081dc:	9f00      	ldr	r7, [sp, #0]
 80081de:	4605      	mov	r5, r0
 80081e0:	4639      	mov	r1, r7
 80081e2:	4630      	mov	r0, r6
 80081e4:	f7ff fe8a 	bl	8007efc <_malloc_r>
 80081e8:	b948      	cbnz	r0, 80081fe <__smakebuf_r+0x46>
 80081ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ee:	059a      	lsls	r2, r3, #22
 80081f0:	d4ee      	bmi.n	80081d0 <__smakebuf_r+0x18>
 80081f2:	f023 0303 	bic.w	r3, r3, #3
 80081f6:	f043 0302 	orr.w	r3, r3, #2
 80081fa:	81a3      	strh	r3, [r4, #12]
 80081fc:	e7e2      	b.n	80081c4 <__smakebuf_r+0xc>
 80081fe:	89a3      	ldrh	r3, [r4, #12]
 8008200:	6020      	str	r0, [r4, #0]
 8008202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008206:	81a3      	strh	r3, [r4, #12]
 8008208:	9b01      	ldr	r3, [sp, #4]
 800820a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800820e:	b15b      	cbz	r3, 8008228 <__smakebuf_r+0x70>
 8008210:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008214:	4630      	mov	r0, r6
 8008216:	f000 f81d 	bl	8008254 <_isatty_r>
 800821a:	b128      	cbz	r0, 8008228 <__smakebuf_r+0x70>
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	f023 0303 	bic.w	r3, r3, #3
 8008222:	f043 0301 	orr.w	r3, r3, #1
 8008226:	81a3      	strh	r3, [r4, #12]
 8008228:	89a3      	ldrh	r3, [r4, #12]
 800822a:	431d      	orrs	r5, r3
 800822c:	81a5      	strh	r5, [r4, #12]
 800822e:	e7cf      	b.n	80081d0 <__smakebuf_r+0x18>

08008230 <_fstat_r>:
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	4d07      	ldr	r5, [pc, #28]	@ (8008250 <_fstat_r+0x20>)
 8008234:	2300      	movs	r3, #0
 8008236:	4604      	mov	r4, r0
 8008238:	4608      	mov	r0, r1
 800823a:	4611      	mov	r1, r2
 800823c:	602b      	str	r3, [r5, #0]
 800823e:	f7f9 f9e3 	bl	8001608 <_fstat>
 8008242:	1c43      	adds	r3, r0, #1
 8008244:	d102      	bne.n	800824c <_fstat_r+0x1c>
 8008246:	682b      	ldr	r3, [r5, #0]
 8008248:	b103      	cbz	r3, 800824c <_fstat_r+0x1c>
 800824a:	6023      	str	r3, [r4, #0]
 800824c:	bd38      	pop	{r3, r4, r5, pc}
 800824e:	bf00      	nop
 8008250:	240002bc 	.word	0x240002bc

08008254 <_isatty_r>:
 8008254:	b538      	push	{r3, r4, r5, lr}
 8008256:	4d06      	ldr	r5, [pc, #24]	@ (8008270 <_isatty_r+0x1c>)
 8008258:	2300      	movs	r3, #0
 800825a:	4604      	mov	r4, r0
 800825c:	4608      	mov	r0, r1
 800825e:	602b      	str	r3, [r5, #0]
 8008260:	f7f9 f9e2 	bl	8001628 <_isatty>
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	d102      	bne.n	800826e <_isatty_r+0x1a>
 8008268:	682b      	ldr	r3, [r5, #0]
 800826a:	b103      	cbz	r3, 800826e <_isatty_r+0x1a>
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	240002bc 	.word	0x240002bc

08008274 <_sbrk_r>:
 8008274:	b538      	push	{r3, r4, r5, lr}
 8008276:	4d06      	ldr	r5, [pc, #24]	@ (8008290 <_sbrk_r+0x1c>)
 8008278:	2300      	movs	r3, #0
 800827a:	4604      	mov	r4, r0
 800827c:	4608      	mov	r0, r1
 800827e:	602b      	str	r3, [r5, #0]
 8008280:	f7f9 f9ea 	bl	8001658 <_sbrk>
 8008284:	1c43      	adds	r3, r0, #1
 8008286:	d102      	bne.n	800828e <_sbrk_r+0x1a>
 8008288:	682b      	ldr	r3, [r5, #0]
 800828a:	b103      	cbz	r3, 800828e <_sbrk_r+0x1a>
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	bd38      	pop	{r3, r4, r5, pc}
 8008290:	240002bc 	.word	0x240002bc

08008294 <_init>:
 8008294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008296:	bf00      	nop
 8008298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800829a:	bc08      	pop	{r3}
 800829c:	469e      	mov	lr, r3
 800829e:	4770      	bx	lr

080082a0 <_fini>:
 80082a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a2:	bf00      	nop
 80082a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a6:	bc08      	pop	{r3}
 80082a8:	469e      	mov	lr, r3
 80082aa:	4770      	bx	lr
