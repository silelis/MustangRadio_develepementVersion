D G "__PCM__" 6 22 ""5.070""
D G "__DEVICE__" 6 22 "77"
D G "__DATE__" 6 22 ""18-paü-18""
D G "__TIME__" 6 22 ""14:53:25""
D G "_UNICODE" 6 22 ""?""
D G "__EVAL" 6 22 ""?""
D G "i2c_slave_address" 1 1 "0x10"
D G "i2c_slave_fake_address" 1 2 "0x12"
D G "i2c_slave_ready" 1 4 "()            I2C_SlaveAddr(i2c_slave_address)" "ustawia w≥aúciwy adres slave, wtedy master otrzymuje ACK = 0 czyli ok"
D G "i2c_slave_not_ready" 1 5 "()        I2C_SlaveAddr(i2c_slave_fake_address)" "ustawia fa≥szywy adres slave (jak øadnego innego urzπdzenia w uk≥adzie), wtedy master nie otrzymuje øadnego ACK"
D G "__CONFIG_FILE__" 2 2 ""
D G "slave_fw_version" 2 5 ""HMI_stepper_motor_calibrator_fw_v0_1 ""
D G "_USE_LOGPORT_" 2 7 "" "chode one of _USE_LOGPORT_ or DEBUG_ENABLED"
D G "A1" 0 7 "PIN_C5"
D G "A2" 0 8 "PIN_C6"
D G "A3" 0 9 "PIN_C7"
D G "A4" 0 10 "PIN_D4"
D G "use_EN_pins" 0 11 ""
D G "EN_12" 0 12 "PIN_D2"
D G "EN_34" 0 13 "EN_12"
D G "one_fase_control" 0 15 "" "chose one of one_fase_control  OR two_fase_control OR halfstep_control"
D G "steper_motor_left_end" 0 20 "PIN_D5"
D G "steper_motor_right_end" 0 21 "PIN_D6"
D G "steper_motor_sensor_enable_pin" 0 22 "PIN_D7"
c L "set_tris_a" 4 1 6 "FUNCTION"
f N "set_tris_a" 4 35 ""
v L "value" 4 35 "int8" `55 
f B "set_tris_a" 4 35 "void(int8 value)" `54 
f N "set_tris_b" 4 36 ""
v L "value" 4 36 "int8" `57 
f B "set_tris_b" 4 36 "void(int8 value)" `56 
f N "set_tris_c" 4 37 ""
v L "value" 4 37 "int8" `59 
f B "set_tris_c" 4 37 "void(int8 value)" `58 
f N "set_tris_d" 4 38 ""
v L "value" 4 38 "int8" `61 
f B "set_tris_d" 4 38 "void(int8 value)" `60 
f N "set_tris_e" 4 39 ""
v L "value" 4 39 "int8" `63 
f B "set_tris_e" 4 39 "void(int8 value)" `62 
f N "get_tris_a" 4 40 ""
f B "get_tris_a" 4 40 "int8()" `64 
f N "get_tris_b" 4 41 ""
f B "get_tris_b" 4 41 "int8()" `65 
f N "get_tris_c" 4 42 ""
f B "get_tris_c" 4 42 "int8()" `66 
f N "get_tris_d" 4 43 ""
f B "get_tris_d" 4 43 "int8()" `67 
f N "get_tris_e" 4 44 ""
f B "get_tris_e" 4 44 "int8()" `68 
f N "output_a" 4 45 ""
v L "value" 4 45 "int8" `70 
f B "output_a" 4 45 "void(int8 value)" `69 
f N "output_b" 4 46 ""
v L "value" 4 46 "int8" `72 
f B "output_b" 4 46 "void(int8 value)" `71 
f N "output_c" 4 47 ""
v L "value" 4 47 "int8" `74 
f B "output_c" 4 47 "void(int8 value)" `73 
f N "output_d" 4 48 ""
v L "value" 4 48 "int8" `76 
f B "output_d" 4 48 "void(int8 value)" `75 
f N "output_e" 4 49 ""
v L "value" 4 49 "int8" `78 
f B "output_e" 4 49 "void(int8 value)" `77 
f N "input_a" 4 50 ""
f B "input_a" 4 50 "int8()" `79 
f N "input_b" 4 51 ""
f B "input_b" 4 51 "int8()" `80 
f N "input_c" 4 52 ""
f B "input_c" 4 52 "int8()" `81 
f N "input_d" 4 53 ""
f B "input_d" 4 53 "int8()" `82 
f N "input_e" 4 54 ""
f B "input_e" 4 54 "int8()" `83 
f N "input_change_a" 4 55 ""
f B "input_change_a" 4 55 "int8()" `84 
f N "input_change_b" 4 56 ""
f B "input_change_b" 4 56 "int8()" `85 
f N "input_change_c" 4 57 ""
f B "input_change_c" 4 57 "int8()" `86 
f N "input_change_d" 4 58 ""
f B "input_change_d" 4 58 "int8()" `87 
f N "input_change_e" 4 59 ""
f B "input_change_e" 4 59 "int8()" `88 
f N "port_b_pullups" 4 60 ""
v L "value" 4 60 "int8" `90 
f B "port_b_pullups" 4 60 "void(int8 value)" `89 
f N "input" 4 61 ""
v L "pin" 4 61 "int16" `92 
f B "input" 4 61 "int8(int16 pin)" `91 
f N "input_state" 4 62 ""
v L "pin" 4 62 "int16" `94 
f B "input_state" 4 62 "int8(int16 pin)" `93 
f N "output_low" 4 63 ""
v L "pin" 4 63 "int16" `96 
f B "output_low" 4 63 "void(int16 pin)" `95 
f N "output_high" 4 64 ""
v L "pin" 4 64 "int16" `98 
f B "output_high" 4 64 "void(int16 pin)" `97 
f N "output_toggle" 4 65 ""
v L "pin" 4 65 "int16" `100 
f B "output_toggle" 4 65 "void(int16 pin)" `99 
f N "output_bit" 4 66 ""
v L "pin" 4 66 "int16" `102 
v L "level" 4 66 "int8" `103 
f B "output_bit" 4 66 "void(int16 pin,int8 level)" `101 
f N "output_float" 4 67 ""
v L "pin" 4 67 "int16" `105 
f B "output_float" 4 67 "void(int16 pin)" `104 
f N "output_drive" 4 68 ""
v L "pin" 4 68 "int16" `107 
f B "output_drive" 4 68 "void(int16 pin)" `106  "Constants used to identify pins in the above are:"
d G "PIN_A0" 4 72 "40"
d G "PIN_A1" 4 73 "41"
d G "PIN_A2" 4 74 "42"
d G "PIN_A3" 4 75 "43"
d G "PIN_A4" 4 76 "44"
d G "PIN_A5" 4 77 "45"
d G "PIN_B0" 4 79 "48"
d G "PIN_B1" 4 80 "49"
d G "PIN_B2" 4 81 "50"
d G "PIN_B3" 4 82 "51"
d G "PIN_B4" 4 83 "52"
d G "PIN_B5" 4 84 "53"
d G "PIN_B6" 4 85 "54"
d G "PIN_B7" 4 86 "55"
d G "PIN_C0" 4 88 "56"
d G "PIN_C1" 4 89 "57"
d G "PIN_C2" 4 90 "58"
d G "PIN_C3" 4 91 "59"
d G "PIN_C4" 4 92 "60"
d G "PIN_C5" 4 93 "61"
d G "PIN_C6" 4 94 "62"
d G "PIN_C7" 4 95 "63"
d G "PIN_D0" 4 97 "64"
d G "PIN_D1" 4 98 "65"
d G "PIN_D2" 4 99 "66"
d G "PIN_D3" 4 100 "67"
d G "PIN_D4" 4 101 "68"
d G "PIN_D5" 4 102 "69"
d G "PIN_D6" 4 103 "70"
d G "PIN_D7" 4 104 "71"
d G "PIN_E0" 4 106 "72"
d G "PIN_E1" 4 107 "73"
d G "PIN_E2" 4 108 "74"
d G "FALSE" 4 111 "0"
d G "TRUE" 4 112 "1"
d G "BYTE" 4 114 "int8"
d G "BOOLEAN" 4 115 "int1"
d G "getc" 4 117 "getch"
d G "fgetc" 4 118 "getch"
d G "getchar" 4 119 "getch"
d G "putc" 4 120 "putchar"
d G "fputc" 4 121 "putchar"
d G "fgets" 4 122 "gets"
d G "fputs" 4 123 "puts"
c L "output_drive" 4 1 3 "FUNCTION"
f N "restart_cause" 4 128 ""
f B "restart_cause" 4 128 "int8()" `108 
f N "reset_cpu" 4 129 ""
f B "reset_cpu" 4 129 "void()" `109 
f N "sleep" 4 130 ""
f B "sleep" 4 130 "void()" `110  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 4 132 "3"
d G "WDT_TIMEOUT" 4 133 "11"
d G "MCLR_FROM_SLEEP" 4 134 "19"
d G "MCLR_FROM_RUN" 4 135 "27"
d G "NORMAL_POWER_UP" 4 136 "25"
d G "BROWNOUT_RESTART" 4 137 "26"
c L "sleep" 4 1 5 "FUNCTION"
f N "setup_timer_0" 4 144 ""
v L "mode" 4 144 "int8" `112 
f B "setup_timer_0" 4 144 "void(int8 mode)" `111 
f N "set_timer0" 4 145 ""
v L "value" 4 145 "int8" `114 
f B "set_timer0" 4 145 "void(int8 value)" `113 
f N "get_timer0" 4 146 ""
f B "get_timer0" 4 146 "int8()" `115 
f N "setup_counters" 4 147 ""
v L "mode" 4 147 "int8" `117 
v L "prescaler" 4 147 "int8" `118 
f B "setup_counters" 4 147 "void(int8 mode,int8 prescaler)" `116 
f N "set_rtcc" 4 148 ""
v L "value" 4 148 "int8" `120 
f B "set_rtcc" 4 148 "void(int8 value)" `119 
f N "get_rtcc" 4 149 ""
f B "get_rtcc" 4 149 "int8()" `121  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 4 151 "0"
d G "T0_EXT_L_TO_H" 4 152 "32"
d G "T0_EXT_H_TO_L" 4 153 "48"
d G "T0_DIV_1" 4 155 "8"
d G "T0_DIV_2" 4 156 "0"
d G "T0_DIV_4" 4 157 "1"
d G "T0_DIV_8" 4 158 "2"
d G "T0_DIV_16" 4 159 "3"
d G "T0_DIV_32" 4 160 "4"
d G "T0_DIV_64" 4 161 "5"
d G "T0_DIV_128" 4 162 "6"
d G "T0_DIV_256" 4 163 "7"
d G "T0_8_BIT" 4 166 "0"
d G "RTCC_INTERNAL" 4 170 "0"
d G "RTCC_EXT_L_TO_H" 4 171 "32"
d G "RTCC_EXT_H_TO_L" 4 172 "48"
d G "RTCC_DIV_1" 4 173 "8"
d G "RTCC_DIV_2" 4 174 "0"
d G "RTCC_DIV_4" 4 175 "1"
d G "RTCC_DIV_8" 4 176 "2"
d G "RTCC_DIV_16" 4 177 "3"
d G "RTCC_DIV_32" 4 178 "4"
d G "RTCC_DIV_64" 4 179 "5"
d G "RTCC_DIV_128" 4 180 "6"
d G "RTCC_DIV_256" 4 181 "7"
d G "RTCC_8_BIT" 4 182 "0"
c L "get_rtcc" 4 1 8 "FUNCTION"
f N "setup_wdt" 4 193 ""
v L "mode" 4 193 "int16" `123 
f B "setup_wdt" 4 193 "void(int16 mode)" `122 
f N "restart_wdt" 4 194 ""
f B "restart_wdt" 4 194 "void()" `124  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 4 197 "8"
d G "WDT_36MS" 4 198 "9"
d G "WDT_72MS" 4 199 "10"
d G "WDT_144MS" 4 200 "11"
d G "WDT_288MS" 4 201 "12"
d G "WDT_576MS" 4 202 "13"
d G "WDT_1152MS" 4 203 "14"
d G "WDT_2304MS" 4 204 "15"
c L "restart_wdt" 4 1 3 "FUNCTION"
f N "setup_timer_1" 4 210 ""
v L "mode" 4 210 "int16" `126 
f B "setup_timer_1" 4 210 "void(int16 mode)" `125 
f N "get_timer1" 4 211 ""
f B "get_timer1" 4 211 "int16()" `127 
f N "set_timer1" 4 212 ""
v L "value" 4 212 "int16" `129 
f B "set_timer1" 4 212 "void(int16 value)" `128  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 4 215 "0"
d G "T1_INTERNAL" 4 216 "0x85"
d G "T1_EXTERNAL" 4 217 "0x87"
d G "T1_EXTERNAL_SYNC" 4 218 "0x83"
d G "T1_CLK_OUT" 4 220 "8"
d G "T1_DIV_BY_1" 4 222 "0"
d G "T1_DIV_BY_2" 4 223 "0x10"
d G "T1_DIV_BY_4" 4 224 "0x20"
d G "T1_DIV_BY_8" 4 225 "0x30"
c L "set_timer1" 4 1 3 "FUNCTION"
f N "setup_timer_2" 4 230 ""
v L "mode" 4 230 "int8" `131 
v L "period" 4 230 "int8" `132 
v L "postscale" 4 230 "int8" `133 
f B "setup_timer_2" 4 230 "void(int8 mode,int8 period,int8 postscale)" `130 
f N "get_timer2" 4 231 ""
f B "get_timer2" 4 231 "int8()" `134 
f N "set_timer2" 4 232 ""
v L "value" 4 232 "int8" `136 
f B "set_timer2" 4 232 "void(int8 value)" `135  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 4 234 "0"
d G "T2_DIV_BY_1" 4 235 "4"
d G "T2_DIV_BY_4" 4 236 "5"
d G "T2_DIV_BY_16" 4 237 "6"
c L "set_timer2" 4 1 4 "FUNCTION"
f N "setup_ccp1" 4 243 ""
v L "mode" 4 243 "int32" `138 
f B "setup_ccp1" 4 243 "void(int32 mode)" `137 
f N "setup_ccp1" 4 244 ""
v L "mode" 4 244 "int32" `140 
v L "pwm" 4 244 "int8" `141 
f B "setup_ccp1" 4 244 "void(int32 mode,int8 pwm)" `139 
f N "set_pwm1_duty" 4 245 ""
v L "value" 4 245 "int16" `143 
f B "set_pwm1_duty" 4 245 "void(int16 value)" `142  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 4 247 "0"
d G "CCP_CAPTURE_FE" 4 248 "0x04"
d G "CCP_CAPTURE_RE" 4 249 "0x05"
d G "CCP_CAPTURE_DIV_4" 4 250 "0x06"
d G "CCP_CAPTURE_DIV_16" 4 251 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 4 252 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 4 253 "0x09"
d G "CCP_COMPARE_INT" 4 254 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 4 255 "0x0B"
d G "CCP_PWM" 4 256 "0x0C"
d G "CCP_PWM_PLUS_1" 4 257 "0x1c"
d G "CCP_PWM_PLUS_2" 4 258 "0x2c"
d G "CCP_PWM_PLUS_3" 4 259 "0x3c"
c L "set_pwm1_duty" 4 1 1 "FUNCTION"
f N "setup_ccp2" 4 266 ""
v L "mode" 4 266 "int32" `148 
f B "setup_ccp2" 4 266 "void(int32 mode)" `147 
f N "setup_ccp2" 4 267 ""
v L "mode" 4 267 "int32" `150 
v L "pwm" 4 267 "int8" `151 
f B "setup_ccp2" 4 267 "void(int32 mode,int8 pwm)" `149 
f N "set_pwm2_duty" 4 268 ""
v L "value" 4 268 "int16" `153 
f B "set_pwm2_duty" 4 268 "void(int16 value)" `152 
c L "set_pwm2_duty" 4 1 5 "FUNCTION"
f N "setup_psp" 4 277 ""
v L "mode" 4 277 "int8" `158 
f B "setup_psp" 4 277 "void(int8 mode)" `157 
f N "psp_output_full" 4 278 ""
f B "psp_output_full" 4 278 "int8()" `159 
f N "psp_input_full" 4 279 ""
f B "psp_input_full" 4 279 "int8()" `160 
f N "psp_overflow" 4 280 ""
f B "psp_overflow" 4 280 "int8()" `161  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 4 282 "0x10"
d G "PSP_DISABLED" 4 283 "0"
c L "psp_overflow" 4 1 3 "FUNCTION"
f N "setup_spi" 4 290 ""
v L "mode" 4 290 "int32" `164 
f B "setup_spi" 4 290 "void(int32 mode)" `163 
f N "spi_write" 4 291 ""
v L "value" 4 291 "int8" `166 
f B "spi_write" 4 291 "void(int8 value)" `165 
f N "spi_read" 4 292 ""
f B "spi_read" 4 292 "int8()" `167 
f N "spi_read" 4 293 ""
v L "value" 4 293 "int8" `169 
f B "spi_read" 4 293 "int8(int8 value)" `168 
f N "spi_data_is_in" 4 294 ""
f B "spi_data_is_in" 4 294 "int8()" `170  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 4 296 "0x00"
d G "SPI_MASTER" 4 297 "0x20"
d G "SPI_SLAVE" 4 298 "0x24"
d G "SPI_SCK_IDLE_HIGH" 4 299 "0x10"
d G "SPI_SCK_IDLE_LOW" 4 300 "0x00"
d G "SPI_CLK_DIV_4" 4 301 "0x00"
d G "SPI_CLK_DIV_16" 4 302 "0x01"
d G "SPI_CLK_DIV_64" 4 303 "0x02"
d G "SPI_CLK_T2" 4 304 "0x03"
d G "SPI_SS_DISABLED" 4 305 "0x01"
d G "SPI_XMIT_L_TO_H" 4 307 "0x4000"
d G "SPI_XMIT_H_TO_L" 4 308 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 4 310 "0x0000"
d G "SPI_SAMPLE_AT_END" 4 311 "0x8000"
d G "SPI_L_TO_H" 4 314 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 4 315 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 4 1 2 "FUNCTION"
f N "setup_uart" 4 319 ""
v L "baud" 4 319 "int32" `172 
f B "setup_uart" 4 319 "void(int32 baud)" `171 
f N "setup_uart" 4 320 ""
v L "baud" 4 320 "int32" `174 
v L "stream" 4 320 "int8" `175 
f B "setup_uart" 4 320 "void(int32 baud,int8 stream)" `173 
f N "setup_uart" 4 321 ""
v L "baud" 4 321 "int32" `177 
v L "stream" 4 321 "int8" `178 
v L "clock" 4 321 "int32" `179 
f B "setup_uart" 4 321 "void(int32 baud,int8 stream,int32 clock)" `176 
f N "set_uart_speed" 4 322 ""
v L "baud" 4 322 "int32" `181 
f B "set_uart_speed" 4 322 "void(int32 baud)" `180 
f N "set_uart_speed" 4 323 ""
v L "baud" 4 323 "int32" `183 
v L "stream" 4 323 "int8" `184 
f B "set_uart_speed" 4 323 "void(int32 baud,int8 stream)" `182 
f N "set_uart_speed" 4 324 ""
v L "baud" 4 324 "int32" `186 
v L "stream" 4 324 "int8" `187 
v L "clock" 4 324 "int32" `188 
f B "set_uart_speed" 4 324 "void(int32 baud,int8 stream,int32 clock)" `185  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 4 328 "2"
d G "UART_DATA" 4 329 "4"
c L "set_uart_speed" 4 1 4 "FUNCTION"
f N "setup_adc" 4 336 ""
v L "mode" 4 336 "int16" `190 
f B "setup_adc" 4 336 "void(int16 mode)" `189 
f N "read_adc" 4 337 ""
f B "read_adc" 4 337 "int8()" `191 
f N "read_adc" 4 338 ""
v L "mode" 4 338 "int8" `193 
f B "read_adc" 4 338 "int8(int8 mode)" `192 
f N "read_adc" 4 339 ""
f G "read_adc" 4 339 "int16()" `194 
f N "read_adc" 4 340 ""
v L "mode" 4 340 "int8" `195 
f G "read_adc" 4 340 "int16(int8 mode,int8 setting)" `194 
f N "adc_done" 4 341 ""
f B "adc_done" 4 341 "int8(int8 mode,int8 setting)" `194  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 4 343 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 4 344 "0x100"
d G "ADC_CLOCK_DIV_8" 4 345 "0x40"
d G "ADC_CLOCK_DIV_32" 4 346 "0x80"
d G "ADC_CLOCK_INTERNAL" 4 347 "0xc0" "Internal 2-6us"
c L "adc_done" 4 1 1 "FUNCTION"
f N "setup_adc_ports" 4 350 ""
v L "setting" 4 350 "int8" `196 
f B "setup_adc_ports" 4 350 "void(int8 setting)" `195 
f N "set_analog_pins" 4 351 ""
v L "setting" 4 351 "int8" `198 
f B "set_analog_pins" 4 351 "void(int8 setting)" `197 
f N "set_adc_channel" 4 352 ""
v L "channel" 4 352 "int8" `200 
f B "set_adc_channel" 4 352 "void(int8 channel)" `199  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 4 354 "7" "None"
d G "ALL_ANALOG" 4 355 "0" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF" 4 356 "1" "A0 A1 A2 A5 E0 E1 E2 VRefh=A3"
d G "AN0_AN1_AN2_AN3_AN4" 4 357 "2" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 4 358 "3" "A0 A1 A2 A5 VRefh=A3"
d G "AN0_AN1_AN3" 4 359 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 4 360 "5" "A0 A1 VRefh=A3"
d G "ANALOG_RA3_REF" 4 361 "1" "!old only provided for compatibility"
d G "A_ANALOG" 4 362 "2" "!old only provided for compatibility"
d G "A_ANALOG_RA3_REF" 4 363 "3" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 4 364 "4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 4 365 "5" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 4 368 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 4 369 "1"
d G "ADC_READ_ONLY" 4 370 "6"
c L "set_adc_channel" 4 1 3 "FUNCTION"
f N "abs" 4 376 ""
v L "x" 4 376 "sint8" `202 
f B "abs" 4 376 "sint8(sint8 x)" `201 
f N "abs" 4 377 ""
v L "x" 4 377 "sint16" `204 
f B "abs" 4 377 "sint16(sint16 x)" `203 
f N "abs" 4 378 ""
v L "x" 4 378 "sint32" `206 
f B "abs" 4 378 "sint32(sint32 x)" `205 
f N "abs" 4 379 ""
v L "x" 4 379 "float" `208 
f B "abs" 4 379 "float(float x)" `207 
f N "_mul" 4 380 ""
v L "??65535" 4 380 "int8" `210 
v L "??65535" 4 380 "int8" `211 
f B "_mul" 4 380 "int16(int8 ,int8 )" `209 
f N "_mul" 4 381 ""
v L "??65535" 4 381 "sint8" `213 
v L "??65535" 4 381 "sint8" `214 
f B "_mul" 4 381 "sint16(sint8 ,sint8 )" `212 
f N "_mul" 4 382 ""
v L "??65535" 4 382 "int16" `216 
v L "??65535" 4 382 "int16" `217 
f B "_mul" 4 382 "int32(int16 ,int16 )" `215 
f N "_mul" 4 383 ""
v L "??65535" 4 383 "sint16" `219 
v L "??65535" 4 383 "sint16" `220 
f B "_mul" 4 383 "sint32(sint16 ,sint16 )" `218  "Memory Manipulation Prototypes:"
f N "read_bank" 4 386 ""
v L "bank" 4 386 "int8" `222 
v L "offset" 4 386 "int8" `223 
f B "read_bank" 4 386 "int8(int8 bank,int8 offset)" `221 
f N "write_bank" 4 387 ""
v L "bank" 4 387 "int8" `225 
v L "offset" 4 387 "int8" `226 
v L "value" 4 387 "int8" `227 
f B "write_bank" 4 387 "void(int8 bank,int8 offset,int8 value)" `224 
f N "strcpy" 4 388 ""
v L "dest" 4 388 "*int8" `229 
v L "src" 4 388 "*int8" `230 
f B "strcpy" 4 388 "void(*int8 dest,*int8 src)" `228 
f N "memset" 4 389 ""
v L "destination" 4 389 "*int8" `232 
v L "value" 4 389 "int8" `233 
v L "num" 4 389 "int16" `234 
f B "memset" 4 389 "void(*int8 destination,int8 value,int16 num)" `231 
f N "memcpy" 4 390 ""
v L "destination" 4 390 "*int8" `236 
v L "source" 4 390 "*int8" `237 
v L "num" 4 390 "int16" `238 
f B "memcpy" 4 390 "void(*int8 destination,*int8 source,int16 num)" `235  "String Prototypes:"
f N "toupper" 4 393 ""
v L "cvalue" 4 393 "int8" `240 
f B "toupper" 4 393 "int8(int8 cvalue)" `239 
f N "tolower" 4 394 ""
v L "cvalue" 4 394 "int8" `242 
f B "tolower" 4 394 "int8(int8 cvalue)" `241 
f N "sprintf" 4 395 ""
v L "string" 4 395 "*int8" `244 
v L "cstring" 4 395 "*int8" `245 
f B "sprintf" 4 395 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `243  "Data Manipulators Prototypes:"
f N "shift_left" 4 398 ""
v L "address" 4 398 "*int8" `248 
v L "bytes" 4 398 "int8" `249 
v L "value" 4 398 "int8" `250 
f B "shift_left" 4 398 "int8(*int8 address,int8 bytes,int8 value)" `247 
f N "shift_right" 4 399 ""
v L "address" 4 399 "*int8" `252 
v L "bytes" 4 399 "int8" `253 
v L "value" 4 399 "int8" `254 
f B "shift_right" 4 399 "int8(*int8 address,int8 bytes,int8 value)" `251 
f N "rotate_left" 4 400 ""
v L "address" 4 400 "*int8" `256 
v L "bytes" 4 400 "int8" `257 
f B "rotate_left" 4 400 "void(*int8 address,int8 bytes)" `255 
f N "rotate_right" 4 401 ""
v L "address" 4 401 "*int8" `259 
v L "bytes" 4 401 "int8" `260 
f B "rotate_right" 4 401 "void(*int8 address,int8 bytes)" `258 
f N "swap" 4 402 ""
v L "value" 4 402 "int8" `262 
f B "swap" 4 402 "void(int8 value)" `261 
f N "make8" 4 403 ""
v L "var" 4 403 "int16" `264 
v L "offset" 4 403 "int8" `265 
f B "make8" 4 403 "int8(int16 var,int8 offset)" `263 
f N "make8" 4 404 ""
v L "var" 4 404 "int32" `267 
v L "offset" 4 404 "int8" `268 
f B "make8" 4 404 "int8(int32 var,int8 offset)" `266 
f N "make16" 4 405 ""
v L "varhigh" 4 405 "int8" `270 
v L "varlow" 4 405 "int8" `271 
f B "make16" 4 405 "int16(int8 varhigh,int8 varlow)" `269 
f N "make32" 4 406 ""
v L "var1" 4 406 "int16" `273 
f B "make32" 4 406 "int32(int16 var1)" `272 
f N "make32" 4 407 ""
v L "var1" 4 407 "int16" `275 
v L "var2" 4 407 "int16" `276 
f B "make32" 4 407 "int32(int16 var1,int16 var2)" `274 
f N "make32" 4 408 ""
v L "var1" 4 408 "int16" `278 
v L "var2" 4 408 "int8" `279 
f B "make32" 4 408 "int32(int16 var1,int8 var2)" `277 
f N "make32" 4 409 ""
v L "var1" 4 409 "int16" `281 
v L "var2" 4 409 "int8" `282 
v L "var3" 4 409 "int8" `283 
f B "make32" 4 409 "int32(int16 var1,int8 var2,int8 var3)" `280 
f N "make32" 4 410 ""
v L "var1" 4 410 "int8" `285 
f B "make32" 4 410 "int32(int8 var1)" `284 
f N "make32" 4 411 ""
v L "var1" 4 411 "int8" `287 
v L "var2" 4 411 "int8" `288 
f B "make32" 4 411 "int32(int8 var1,int8 var2)" `286 
f N "make32" 4 412 ""
v L "var1" 4 412 "int8" `290 
v L "var2" 4 412 "int8" `291 
v L "var3" 4 412 "int8" `292 
f B "make32" 4 412 "int32(int8 var1,int8 var2,int8 var3)" `289 
f N "make32" 4 413 ""
v L "var1" 4 413 "int8" `294 
v L "var2" 4 413 "int8" `295 
v L "var3" 4 413 "int8" `296 
v L "var4" 4 413 "int8" `297 
f B "make32" 4 413 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `293 
f N "make32" 4 414 ""
v L "var1" 4 414 "int8" `299 
v L "var2" 4 414 "int16" `300 
f B "make32" 4 414 "int32(int8 var1,int16 var2)" `298 
f N "make32" 4 415 ""
v L "var1" 4 415 "int8" `302 
v L "var2" 4 415 "int16" `303 
v L "var3" 4 415 "int8" `304 
f B "make32" 4 415 "int32(int8 var1,int16 var2,int8 var3)" `301 
f N "make32" 4 416 ""
v L "var1" 4 416 "int8" `306 
v L "var2" 4 416 "int8" `307 
v L "var3" 4 416 "int16" `308 
f B "make32" 4 416 "int32(int8 var1,int8 var2,int16 var3)" `305 
f N "bit_set" 4 417 ""
v L "var" 4 417 "int8" `310 
v L "bit" 4 417 "int8" `311 
f B "bit_set" 4 417 "void(int8 var,int8 bit)" `309 
f N "bit_set" 4 418 ""
v L "var" 4 418 "int16" `313 
v L "bit" 4 418 "int8" `314 
f B "bit_set" 4 418 "void(int16 var,int8 bit)" `312 
f N "bit_set" 4 419 ""
v L "var" 4 419 "int32" `316 
v L "bit" 4 419 "int8" `317 
f B "bit_set" 4 419 "void(int32 var,int8 bit)" `315 
f N "bit_clear" 4 420 ""
v L "var" 4 420 "int8" `319 
v L "bit" 4 420 "int8" `320 
f B "bit_clear" 4 420 "void(int8 var,int8 bit)" `318 
f N "bit_clear" 4 421 ""
v L "var" 4 421 "int16" `322 
v L "bit" 4 421 "int8" `323 
f B "bit_clear" 4 421 "void(int16 var,int8 bit)" `321 
f N "bit_clear" 4 422 ""
v L "var" 4 422 "int32" `325 
v L "bit" 4 422 "int8" `326 
f B "bit_clear" 4 422 "void(int32 var,int8 bit)" `324 
f N "bit_test" 4 423 ""
v L "var" 4 423 "int8" `328 
v L "bit" 4 423 "int8" `329 
f B "bit_test" 4 423 "int8(int8 var,int8 bit)" `327 
f N "bit_test" 4 424 ""
v L "var" 4 424 "int16" `331 
v L "bit" 4 424 "int8" `332 
f B "bit_test" 4 424 "int8(int16 var,int8 bit)" `330 
f N "bit_test" 4 425 ""
v L "var" 4 425 "int32" `334 
v L "bit" 4 425 "int8" `335 
f B "bit_test" 4 425 "int8(int32 var,int8 bit)" `333  "#use delay() Prototypes:"
f N "delay_cycles" 4 428 ""
v L "count" 4 428 "int8" `337 
f B "delay_cycles" 4 428 "void(int8 count)" `336 
f N "delay_ms" 4 429 ""
v L "time" 4 429 "int16" `339 
f B "delay_ms" 4 429 "void(int16 time)" `338 
f N "delay_us" 4 430 ""
v L "time" 4 430 "int16" `341 
f B "delay_us" 4 430 "void(int16 time)" `340  "#use rs232() Prototypes:"
f N "putchar" 4 433 ""
v L "cdata" 4 433 "int8" `343 
f B "putchar" 4 433 "void(int8 cdata)" `342 
f N "putchar" 4 434 ""
v L "cdata" 4 434 "int8" `345 
v L "stream" 4 434 "int8" `346 
f B "putchar" 4 434 "void(int8 cdata,int8 stream)" `344 
f N "puts" 4 435 ""
v L "string" 4 435 "*int8" `348 
f B "puts" 4 435 "void(*int8 string)" `347 
f N "puts" 4 436 ""
v L "string" 4 436 "*int8" `350 
v L "stream" 4 436 "int8" `351 
f B "puts" 4 436 "void(*int8 string,int8 stream)" `349 
f N "getch" 4 437 ""
f B "getch" 4 437 "int8()" `352 
f N "getch" 4 438 ""
v L "stream" 4 438 "int8" `354 
f B "getch" 4 438 "int8(int8 stream)" `353 
f N "gets" 4 439 ""
v L "string" 4 439 "*int8" `356 
f B "gets" 4 439 "void(*int8 string)" `355 
f N "gets" 4 440 ""
v L "string" 4 440 "*int8" `358 
v L "stream" 4 440 "int8" `359 
f B "gets" 4 440 "void(*int8 string,int8 stream)" `357 
f N "kbhit" 4 441 ""
f B "kbhit" 4 441 "int8()" `360 
f N "kbhit" 4 442 ""
v L "stream" 4 442 "int8" `362 
f B "kbhit" 4 442 "int8(int8 stream)" `361 
f N "printf" 4 443 ""
v L "string" 4 443 "*int8" `364 
f B "printf" 4 443 "void(*int8 string,*int8 _VA_LIST)" `363 
f N "fprintf" 4 444 ""
v L "stream" 4 444 "int8" `367 
v L "string" 4 444 "*int8" `368 
f B "fprintf" 4 444 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `366 
f N "putc_send" 4 445 ""
f B "putc_send" 4 445 "void()" `370 
f N "fputc_send" 4 446 ""
v L "stream" 4 446 "int8" `372 
f B "fputc_send" 4 446 "void(int8 stream)" `371 
f N "rcv_buffer_full" 4 447 ""
f B "rcv_buffer_full" 4 447 "int8()" `373 
f N "rcv_buffer_full" 4 448 ""
v L "stream" 4 448 "int8" `375 
f B "rcv_buffer_full" 4 448 "int8(int8 stream)" `374 
f N "rcv_buffer_bytes" 4 449 ""
f B "rcv_buffer_bytes" 4 449 "int16()" `376 
f N "rcv_buffer_bytes" 4 450 ""
v L "stream" 4 450 "int8" `378 
f B "rcv_buffer_bytes" 4 450 "int16(int8 stream)" `377 
f N "tx_buffer_full" 4 451 ""
f B "tx_buffer_full" 4 451 "int8()" `379 
f N "tx_buffer_full" 4 452 ""
v L "stream" 4 452 "int8" `381 
f B "tx_buffer_full" 4 452 "int8(int8 stream)" `380 
f N "tx_buffer_bytes" 4 453 ""
f B "tx_buffer_bytes" 4 453 "int16()" `382 
f N "tx_buffer_bytes" 4 454 ""
v L "stream" 4 454 "int8" `384 
f B "tx_buffer_bytes" 4 454 "int16(int8 stream)" `383  "#use i2c() Prototypes:"
f N "i2c_read" 4 457 ""
f B "i2c_read" 4 457 "int8()" `385 
f N "i2c_read" 4 458 ""
v L "ack" 4 458 "int8" `387 
f B "i2c_read" 4 458 "int8(int8 ack)" `386 
f N "i2c_read" 4 459 ""
v L "stream" 4 459 "int8" `389 
v L "ack" 4 459 "int8" `390 
f B "i2c_read" 4 459 "int8(int8 stream,int8 ack)" `388 
f N "i2c_write" 4 460 ""
v L "data" 4 460 "int8" `392 
f B "i2c_write" 4 460 "int8(int8 data)" `391 
f N "i2c_write" 4 461 ""
v L "stream" 4 461 "int8" `394 
v L "data" 4 461 "int8" `395 
f B "i2c_write" 4 461 "int8(int8 stream,int8 data)" `393 
f N "i2c_start" 4 462 ""
f B "i2c_start" 4 462 "void()" `396 
f N "i2c_start" 4 463 ""
v L "stream" 4 463 "int8" `398 
f B "i2c_start" 4 463 "void(int8 stream)" `397 
f N "i2c_start" 4 464 ""
v L "stream" 4 464 "int8" `400 
v L "restart" 4 464 "int8" `401 
f B "i2c_start" 4 464 "void(int8 stream,int8 restart)" `399 
f N "i2c_stop" 4 465 ""
f B "i2c_stop" 4 465 "void()" `402 
f N "i2c_stop" 4 466 ""
v L "stream" 4 466 "int8" `404 
f B "i2c_stop" 4 466 "void(int8 stream)" `403 
f N "i2c_isr_state" 4 467 ""
f B "i2c_isr_state" 4 467 "int8()" `405 
f N "i2c_slaveaddr" 4 468 ""
v L "addr" 4 468 "int8" `407 
f B "i2c_slaveaddr" 4 468 "void(int8 addr)" `406 
f N "i2c_slaveaddr" 4 469 ""
v L "stream" 4 469 "int8" `409 
v L "addr" 4 469 "int8" `410 
f B "i2c_slaveaddr" 4 469 "void(int8 stream,int8 addr)" `408 
f N "i2c_poll" 4 470 ""
f B "i2c_poll" 4 470 "int8()" `411 
f N "i2c_poll" 4 471 ""
v L "stream" 4 471 "int8" `413 
f B "i2c_poll" 4 471 "int8(int8 stream)" `412 
f N "i2c_init" 4 472 ""
v L "baud" 4 472 "int32" `415 
f B "i2c_init" 4 472 "void(int32 baud)" `414 
f N "i2c_init" 4 473 ""
v L "stream" 4 473 "int8" `417 
v L "baud" 4 473 "int32" `418 
f B "i2c_init" 4 473 "void(int8 stream,int32 baud)" `416  "#use spi() Prototypes:"
f N "spi_xfer" 4 476 ""
f B "spi_xfer" 4 476 "int8()" `419 
f N "spi_xfer" 4 477 ""
f G "spi_xfer" 4 477 "int16(int8 data)" `420 
f N "spi_xfer" 4 478 ""
f G "spi_xfer" 4 478 "int32(int8 data)" `420 
f N "spi_xfer" 4 479 ""
v L "data" 4 479 "int8" `421 
f B "spi_xfer" 4 479 "int8(int8 data)" `420 
f N "spi_xfer" 4 480 ""
v L "data" 4 480 "int16" `423 
f B "spi_xfer" 4 480 "int16(int16 data)" `422 
f N "spi_xfer" 4 481 ""
v L "data" 4 481 "int32" `425 
f B "spi_xfer" 4 481 "int32(int32 data)" `424 
f N "spi_xfer" 4 482 ""
v L "stream" 4 482 "int8" `427 
v L "data" 4 482 "int8" `428 
f B "spi_xfer" 4 482 "int8(int8 stream,int8 data)" `426 
f N "spi_xfer" 4 483 ""
v L "stream" 4 483 "int8" `430 
v L "data" 4 483 "int16" `431 
f B "spi_xfer" 4 483 "int16(int8 stream,int16 data)" `429 
f N "spi_xfer" 4 484 ""
v L "stream" 4 484 "int8" `433 
v L "data" 4 484 "int32" `434 
f B "spi_xfer" 4 484 "int32(int8 stream,int32 data)" `432 
f N "spi_xfer" 4 485 ""
v L "stream" 4 485 "int8" `436 
v L "data" 4 485 "int8" `437 
v L "bits" 4 485 "int8" `438 
f B "spi_xfer" 4 485 "int8(int8 stream,int8 data,int8 bits)" `435 
f N "spi_xfer" 4 486 ""
v L "stream" 4 486 "int8" `440 
v L "data" 4 486 "int16" `441 
v L "bits" 4 486 "int8" `442 
f B "spi_xfer" 4 486 "int16(int8 stream,int16 data,int8 bits)" `439 
f N "spi_xfer" 4 487 ""
v L "stream" 4 487 "int8" `444 
v L "data" 4 487 "int32" `445 
v L "bits" 4 487 "int8" `446 
f B "spi_xfer" 4 487 "int32(int8 stream,int32 data,int8 bits)" `443 
f N "spi_init" 4 488 ""
v L "baud" 4 488 "int32" `448 
f B "spi_init" 4 488 "void(int32 baud)" `447 
f N "spi_init" 4 489 ""
v L "stream" 4 489 "int8" `450 
v L "baud" 4 489 "int32" `451 
f B "spi_init" 4 489 "void(int8 stream,int32 baud)" `449 
f N "spi_speed" 4 490 ""
v L "baud" 4 490 "int32" `453 
f B "spi_speed" 4 490 "void(int32 baud)" `452 
f N "spi_speed" 4 491 ""
v L "stream" 4 491 "int8" `455 
v L "baud" 4 491 "int32" `456 
f B "spi_speed" 4 491 "void(int8 stream,int32 baud)" `454 
f N "spi_speed" 4 492 ""
v L "stream" 4 492 "int8" `458 
v L "baud" 4 492 "int32" `459 
v L "clock" 4 492 "int32" `460 
f B "spi_speed" 4 492 "void(int8 stream,int32 baud,int32 clock)" `457 
f N "spi_prewrite" 4 493 ""
v L "data" 4 493 "int8" `462 
f B "spi_prewrite" 4 493 "void(int8 data)" `461 
f N "spi_prewrite" 4 494 ""
v L "data" 4 494 "int16" `464 
f B "spi_prewrite" 4 494 "void(int16 data)" `463 
f N "spi_prewrite" 4 495 ""
v L "data" 4 495 "int32" `466 
f B "spi_prewrite" 4 495 "void(int32 data)" `465 
f N "spi_prewrite" 4 496 ""
v L "??65535" 4 496 "int8" `468 
v L "data" 4 496 "int8" `469 
f B "spi_prewrite" 4 496 "void(int8 ,int8 data)" `467 
f N "spi_prewrite" 4 497 ""
v L "??65535" 4 497 "int8" `471 
v L "data" 4 497 "int16" `472 
f B "spi_prewrite" 4 497 "void(int8 ,int16 data)" `470 
f N "spi_prewrite" 4 498 ""
v L "??65535" 4 498 "int8" `474 
v L "data" 4 498 "int32" `475 
f B "spi_prewrite" 4 498 "void(int8 ,int32 data)" `473 
f N "spi_xfer_in" 4 499 ""
f B "spi_xfer_in" 4 499 "int8()" `476 
f N "spi_xfer_in" 4 500 ""
f G "spi_xfer_in" 4 500 "int16(int8 bits)" `477 
f N "spi_xfer_in" 4 501 ""
f G "spi_xfer_in" 4 501 "int32(int8 bits)" `477 
f N "spi_xfer_in" 4 502 ""
v L "bits" 4 502 "int8" `478 
f B "spi_xfer_in" 4 502 "int8(int8 bits)" `477 
f N "spi_xfer_in" 4 503 ""
v L "bits" 4 503 "int8" `480 
f G "spi_xfer_in" 4 503 "int16(int8 bits,int8 bits)" `479 
f N "spi_xfer_in" 4 504 ""
v L "bits" 4 504 "int8" `480 
f G "spi_xfer_in" 4 504 "int32(int8 bits,int8 bits)" `479 
f N "spi_xfer_in" 4 505 ""
v L "stream" 4 505 "int8" `480 
v L "bits" 4 505 "int8" `481 
f B "spi_xfer_in" 4 505 "int8(int8 stream,int8 bits)" `479 
f N "spi_xfer_in" 4 506 ""
v L "stream" 4 506 "int8" `480 
v L "bits" 4 506 "int8" `484 
f G "spi_xfer_in" 4 506 "int16(int8 stream,int8 bits,int8 task)" `482 
f N "spi_xfer_in" 4 507 ""
v L "stream" 4 507 "int8" `480 
v L "bits" 4 507 "int8" `484 
f G "spi_xfer_in" 4 507 "int32(int8 stream,int8 bits,int8 task)" `482  "#use rtos() Prototypes:"
f N "rtos_run" 4 510 ""
f B "rtos_run" 4 510 "void(int8 stream,int8 bits,int8 task)" `482 
f N "rtos_yield" 4 511 ""
f B "rtos_yield" 4 511 "void(int8 bits,int8 task)" `483 
f N "rtos_enable" 4 512 ""
v L "task" 4 512 "int8" `485 
f B "rtos_enable" 4 512 "void(int8 task)" `484 
f N "rtos_disable" 4 513 ""
v L "task" 4 513 "int8" `487 
f B "rtos_disable" 4 513 "void(int8 task)" `486 
f N "rtos_terminate" 4 514 ""
f B "rtos_terminate" 4 514 "void()" `488 
f N "rtos_await" 4 515 ""
v L "flag" 4 515 "int8" `490 
f B "rtos_await" 4 515 "void(int8 flag)" `489 
f N "rtos_wait" 4 516 ""
v L "sem" 4 516 "int8" `492 
f B "rtos_wait" 4 516 "void(int8 sem)" `491 
f N "rtos_signal" 4 517 ""
v L "sem" 4 517 "int8" `494 
f B "rtos_signal" 4 517 "void(int8 sem)" `493 
f N "rtos_msg_send" 4 518 ""
v L "task" 4 518 "int8" `496 
v L "msg" 4 518 "int8" `497 
f B "rtos_msg_send" 4 518 "void(int8 task,int8 msg)" `495 
f N "rtos_msg_read" 4 519 ""
f B "rtos_msg_read" 4 519 "int8()" `498 
f N "rtos_msg_poll" 4 520 ""
f B "rtos_msg_poll" 4 520 "int8()" `499 
f N "rtos_overrun" 4 521 ""
v L "task" 4 521 "int8" `501 
f B "rtos_overrun" 4 521 "int8(int8 task)" `500 
f N "rtos_stats" 4 522 ""
v L "task" 4 522 "int8" `503 
v L "stat" 4 522 "*int8" `504 
f B "rtos_stats" 4 522 "void(int8 task,*int8 stat)" `502  "#use timer() Prototypes:"
f N "get_ticks" 4 525 ""
f B "get_ticks" 4 525 "int8()" `505 
f N "get_ticks" 4 526 ""
f G "get_ticks" 4 526 "int16(int8 stream)" `506 
f N "get_ticks" 4 527 ""
f G "get_ticks" 4 527 "int32(int8 stream)" `506 
f N "get_ticks" 4 528 ""
v L "stream" 4 528 "int8" `507 
f B "get_ticks" 4 528 "int8(int8 stream)" `506 
f N "get_ticks" 4 529 ""
v L "stream" 4 529 "int8" `509 
f G "get_ticks" 4 529 "int16(int8 stream)" `508 
f N "get_ticks" 4 530 ""
v L "stream" 4 530 "int8" `509 
f G "get_ticks" 4 530 "int32(int8 stream)" `508 
f N "set_ticks" 4 531 ""
v L "value" 4 531 "int8" `509 
f B "set_ticks" 4 531 "void(int8 value)" `508 
f N "set_ticks" 4 532 ""
v L "value" 4 532 "int16" `511 
f B "set_ticks" 4 532 "void(int16 value)" `510 
f N "set_ticks" 4 533 ""
v L "value" 4 533 "int32" `513 
f B "set_ticks" 4 533 "void(int32 value)" `512 
f N "set_ticks" 4 534 ""
v L "stream" 4 534 "int8" `515 
v L "value" 4 534 "int8" `516 
f B "set_ticks" 4 534 "void(int8 stream,int8 value)" `514 
f N "set_ticks" 4 535 ""
v L "stream" 4 535 "int8" `518 
v L "value" 4 535 "int16" `519 
f B "set_ticks" 4 535 "void(int8 stream,int16 value)" `517 
f N "set_ticks" 4 536 ""
v L "stream" 4 536 "int8" `521 
v L "value" 4 536 "int32" `522 
f B "set_ticks" 4 536 "void(int8 stream,int32 value)" `520  "#use pwm() Prototypes:"
f N "pwm_on" 4 539 ""
f B "pwm_on" 4 539 "void()" `523 
f N "pwm_on" 4 540 ""
v L "stream" 4 540 "int8" `525 
f B "pwm_on" 4 540 "void(int8 stream)" `524 
f N "pwm_off" 4 541 ""
f B "pwm_off" 4 541 "void()" `526 
f N "pwm_off" 4 542 ""
v L "stream" 4 542 "int8" `528 
f B "pwm_off" 4 542 "void(int8 stream)" `527 
f N "pwm_set_duty" 4 543 ""
v L "duty" 4 543 "int16" `530 
f B "pwm_set_duty" 4 543 "void(int16 duty)" `529 
f N "pwm_set_duty" 4 544 ""
v L "stream" 4 544 "int8" `532 
v L "duty" 4 544 "int16" `533 
f B "pwm_set_duty" 4 544 "void(int8 stream,int16 duty)" `531 
f N "pwm_set_duty_percent" 4 545 ""
v L "percent" 4 545 "int16" `535 
f B "pwm_set_duty_percent" 4 545 "void(int16 percent)" `534 
f N "pwm_set_duty_percent" 4 546 ""
v L "stream" 4 546 "int8" `537 
v L "percent" 4 546 "int16" `538 
f B "pwm_set_duty_percent" 4 546 "void(int8 stream,int16 percent)" `536 
f N "pwm_set_frequency" 4 547 ""
v L "frequency" 4 547 "int32" `540 
f B "pwm_set_frequency" 4 547 "void(int32 frequency)" `539 
f N "pwm_set_frequency" 4 548 ""
v L "stream" 4 548 "int8" `542 
v L "frequency" 4 548 "int32" `543 
f B "pwm_set_frequency" 4 548 "void(int8 stream,int32 frequency)" `541  "#use capture() Prototypes:"
f N "get_capture_time" 4 551 ""
f B "get_capture_time" 4 551 "int16()" `544 
f N "get_capture_time" 4 552 ""
v L "stream" 4 552 "int8" `546 
f B "get_capture_time" 4 552 "int16(int8 stream)" `545 
f N "get_capture_event" 4 553 ""
f B "get_capture_event" 4 553 "int8()" `547 
f N "get_capture_event" 4 554 ""
v L "stream" 4 554 "int8" `549 
f B "get_capture_event" 4 554 "int8(int8 stream)" `548  "Enviroment Prototypes:"
c L "get_capture_event" 4 1 2 "FUNCTION"
f N "goto_address" 4 567 ""
v L "address" 4 567 "int16" `551 
f B "goto_address" 4 567 "void(int16 address)" `550 
f N "label_address" 4 568 ""
v L "label" 4 568 "int16" `553 
f B "label_address" 4 568 "int16(int16 label)" `552  "Program Memory Prototypes:"
f N "read_program_memory" 4 571 ""
v L "address" 4 571 "int16" `555 
v L "dataptr" 4 571 "*int8" `556 
v L "count" 4 571 "int16" `557 
f B "read_program_memory" 4 571 "void(int16 address,*int8 dataptr,int16 count)" `554 
f N "read_program_eeprom" 4 572 ""
v L "address" 4 572 "int16" `559 
f B "read_program_eeprom" 4 572 "int16(int16 address)" `558  "INT"
c L "read_program_eeprom" 4 1 4 "FUNCTION"
f N "enable_interrupts" 4 578 ""
v L "interrupt" 4 578 "int32" `561 
f B "enable_interrupts" 4 578 "void(int32 interrupt)" `560 
f N "disable_interrupts" 4 579 ""
v L "interrupt" 4 579 "int32" `563 
f B "disable_interrupts" 4 579 "void(int32 interrupt)" `562 
f N "clear_interrupt" 4 580 ""
v L "interrupt" 4 580 "int32" `565 
f B "clear_interrupt" 4 580 "void(int32 interrupt)" `564 
f N "interrupt_active" 4 581 ""
v L "interrupt" 4 581 "int32" `567 
f B "interrupt_active" 4 581 "int8(int32 interrupt)" `566 
f N "interrupt_enabled" 4 582 ""
v L "interrupt" 4 582 "int32" `569 
f B "interrupt_enabled" 4 582 "int8(int32 interrupt)" `568 
f N "ext_int_edge" 4 583 ""
v L "source" 4 583 "int8" `571 
v L "edge" 4 583 "int8" `572 
f B "ext_int_edge" 4 583 "void(int8 source,int8 edge)" `570 
f N "jump_to_isr" 4 584 ""
v L "address" 4 584 "int16" `574 
f B "jump_to_isr" 4 584 "void(int16 address)" `573  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 4 586 "0x40"
d G "H_TO_L" 4 587 "0"
d G "GLOBAL" 4 589 "0x0BC0"
d G "PERIPH" 4 590 "0x0B40"
d G "INT_RTCC" 4 591 "0x000B20"
d G "INT_RB" 4 592 "0x00FF0B08"
d G "INT_EXT_L2H" 4 593 "0x50000B10"
d G "INT_EXT_H2L" 4 594 "0x60000B10"
d G "INT_EXT" 4 595 "0x000B10"
d G "INT_AD" 4 596 "0x008C40"
d G "INT_TBE" 4 597 "0x008C10"
d G "INT_RDA" 4 598 "0x008C20"
d G "INT_TIMER1" 4 599 "0x008C01"
d G "INT_TIMER2" 4 600 "0x008C02"
d G "INT_CCP1" 4 601 "0x008C04"
d G "INT_CCP2" 4 602 "0x008D01"
d G "INT_SSP" 4 603 "0x008C08"
d G "INT_PSP" 4 604 "0x008C80"
d G "INT_TIMER0" 4 605 "0x000B20"
D G "TICKS_PER_SECOND_stepper" 3 17 "1221"
D G "dbg_return_carriage" 3 33 "() fprintf_return_carriage()"
D G "dbg_printf" 3 34 "(fmt,...)   fprintf(LOG_PORT,fmt, __VA_ARGS__); dbg_return_carriage()" ";  fprintf_return_carriage()//return_carrier//;  delay_ms(500)"
C L "jump_to_isr" 3 7 5 "FUNCTION"
F N "fprintf_return_carriage" 3 46 ""
F G "fprintf_return_carriage" 3 47 "void()" `588 
D G "_stepper_motor_module_" 6 2 ""
D G "__l293d__" 8 2 ""
D G "L293_OUTPUT_lag_time" 8 15 "1" "800 ns co daje 1 us"
D G "L293_EN_lag_time_ON" 8 17 "1" "800 ns co daje 1 us"
D G "L293_EN_lag_time_OFF" 8 18 "1" "800 ns co daje 1 us"
D G "ON" 8 27 "1"
D G "OFF" 8 28 "0"
D G "LEFT" 8 29 "0"
D G "RIGHT" 8 30 "1"
D G "STOP" 8 31 "2"
D G "stop_phase" 8 34 "0"
D G "first_phase" 8 35 "1"
D G "max_phase" 8 40 "4"
V G "stepper_motor_pase" 8 41 "[5][4]" `591  "Wave or one-fase control"
C L "enable_EN_12" 8 38 1 "FUNCTION"
F N "enable_EN_12" 8 92 ""
f G "enable_EN_12" 8 92 "void()" `594 
F N "enable_EN_34" 8 93 ""
f G "enable_EN_34" 8 93 "void()" `595 
F N "disable_EN_12" 8 94 ""
f G "disable_EN_12" 8 94 "void()" `596 
F N "disable_EN_34" 8 95 ""
f G "disable_EN_34" 8 95 "void()" `597 
F N "STEPPER_motor" 8 97 ""
V L "??65535" 8 97 "int8" `599 
V L "??65535" 8 97 "int8" `600 
f G "STEPPER_motor" 8 97 "int8(int8 ,int8 )" `598 
F N "DC_motor_Bidirectional" 8 98 ""
V L "??65535" 8 98 "int8" `602 
V L "??65535" 8 98 "int8" `603 
f G "DC_motor_Bidirectional" 8 98 "void(int8 ,int8 )" `601 
F N "DC_motor_Unidirectional" 8 99 ""
V L "??65535" 8 99 "int8" `605 
V L "??65535" 8 99 "int16" `606 
f G "DC_motor_Unidirectional" 8 99 "void(int8 ,int16 )" `604 
F N "STEPPER_motor" 7 3 ""
V L "present_phase" 7 3 "int8" `599 
V L "LEFT_RIGHT_STOP" 7 3 "int8" `609 
F G "STEPPER_motor" 7 4 "int8(int8 present_phase,int8 LEFT_RIGHT_STOP)" `598 
V L "output_order" 7 5 "int8[4]" `607 
V L "i" 7 15 "int8" `608 
V L "i" 7 29 "int8" `609 
C L "STEPPER_motor" 7 35 1 "FUNCTION"
F N "DC_motor_Bidirectional" 7 52 ""
V L "LEFT_RIGHT_STOP" 7 52 "int8" `602 
V L "morot_number" 7 52 "int8" `613 
F G "DC_motor_Bidirectional" 7 53 "void(int8 LEFT_RIGHT_STOP,int8 morot_number)" `601 
V L "motor_pin_1" 7 54 "int16" `611 
V L "motor_pin_2" 7 55 "int16" `612 
F N "DC_motor_Unidirectional" 7 83 ""
V L "ON_OFF" 7 83 "int8" `605 
V L "motor_pin" 7 83 "int16" `619 
F G "DC_motor_Unidirectional" 7 84 "void(int8 ON_OFF,int16 motor_pin)" `604 
F N "enable_EN_12" 7 91 ""
F G "enable_EN_12" 7 92 "void()" `594  "delay_ms(L293_EN_lag_time_OFF);"
C L "enable_EN_12" 7 35 1 "FUNCTION"
F N "enable_EN_34" 7 104 ""
F G "enable_EN_34" 7 105 "void()" `595  "delay_ms(L293_EN_lag_time_OFF);"
C L "enable_EN_34" 7 35 1 "FUNCTION"
F N "disable_EN_12" 7 117 ""
F G "disable_EN_12" 7 118 "void()" `596  "delay_ms(L293_EN_lag_time_OFF);"
C L "disable_EN_12" 7 35 1 "FUNCTION"
F N "disable_EN_34" 7 130 ""
F G "disable_EN_34" 7 131 "void()" `597  "delay_ms(L293_EN_lag_time_OFF);"
C L "disable_EN_34" 7 35 1 "FUNCTION"
D G "stepper_motor_calibrated_NONE" 6 19 "0b00000000"
D G "stepper_motor_calibrated_left" 6 20 "0b00000001"
D G "stepper_motor_calibrated_right" 6 21 "0b00000010"
D G "stepper_motor_calibrated" 6 22 "0b00000011"
D G "steper_motor_LIMIT_SWITCH_reached" 6 27 "0" "for switch 1 for opto 0"
D G "steper_motor_LIMIT_SWITCH_NOT_reached" 6 28 "1" "for switch 0 for opto 1"
V G "steper_motor_calibration_state" 6 30 "int8" `617 
V G "stepper_motor_phase" 6 31 "int8" `618 
V G "stepper_motor_position" 6 32 "int32" `619 
V G "stepper_motor_position_max" 6 33 "int32" `620  "void module_stepper_motor_disable_EN(void);"
C L "module_steper_motor_step_left" 6 24 1 "FUNCTION"
F N "module_steper_motor_step_left" 6 38 ""
f G "module_steper_motor_step_left" 6 38 "void()" `621 
F N "module_steper_motor_step_right" 6 39 ""
f G "module_steper_motor_step_right" 6 39 "void()" `622 
F N "module_steper_motor_stop" 6 40 ""
f G "module_steper_motor_stop" 6 40 "void()" `623 
F N "steper_motor_sensor_enable" 6 41 ""
f G "steper_motor_sensor_enable" 6 41 "int8()" `624 
F N "steper_motor_sensor_disable" 6 42 ""
f G "steper_motor_sensor_disable" 6 42 "int8()" `625 
F N "__reset_L293D_conditions__" 6 44 ""
f G "__reset_L293D_conditions__" 6 44 "void()" `626  "void module_stepper_motor_disable_EN(void)"
C L "__reset_L293D_conditions__" 5 3 13 "FUNCTION"
F N "module_steper_motor_step_left" 5 22 ""
F G "module_steper_motor_step_left" 5 23 "void()" `621  "if (input(steper_motor_left_end)==0)"
C L "module_steper_motor_step_left" 5 3 1 "FUNCTION"
C L "module_steper_motor_step_left" 5 3 1 "FUNCTION"
C L "module_steper_motor_step_left" 5 3 1 "FUNCTION"
F N "module_steper_motor_step_right" 5 44 ""
F G "module_steper_motor_step_right" 5 45 "void()" `622  "if (input(steper_motor_right_end)==0)"
C L "module_steper_motor_step_right" 5 3 1 "FUNCTION"
C L "module_steper_motor_step_right" 5 3 1 "FUNCTION"
C L "module_steper_motor_step_right" 5 3 1 "FUNCTION"
F N "module_steper_motor_stop" 5 67 ""
F G "module_steper_motor_stop" 5 68 "void()" `623 
C L "module_steper_motor_stop" 5 3 1 "FUNCTION"
C L "module_steper_motor_stop" 5 3 1 "FUNCTION"
C L "__reset_L293D_conditions__" 5 3 1 "FUNCTION"
F N "__reset_L293D_conditions__" 5 80 ""
F G "__reset_L293D_conditions__" 5 81 "void()" `626 
C L "__reset_L293D_conditions__" 5 3 1 "FUNCTION"
C L "steper_motor_sensor_enable" 5 3 1 "FUNCTION"
F N "steper_motor_sensor_enable" 5 87 ""
F G "steper_motor_sensor_enable" 5 88 "int8()" `624 
F N "steper_motor_sensor_disable" 5 95 ""
F G "steper_motor_sensor_disable" 5 96 "int8()" `625 
D G "__silelis_math__" 9 2 ""
D G "_STDLIB" 10 13 ""
D G "RAND_MAX" 10 20 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 10 26 "1"
T G "div_t" 10 34 "{sint8 quot,sint8 rem}" `636 
T G "ldiv_t" 10 39 "{sint16 quot,sint16 rem}" `640  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 11 13 ""
D G "ptrdiff_t" 11 18 "unsigned int16"
D G "size_t" 11 22 "unsigned int8"
D G "wchar_t" 11 26 "char"
D G "NULL" 11 27 "0"
D G "offsetof" 11 29 "(s,f) (offsetofbit(s,f)/8)"
C L "atoi" 10 44 2 "FUNCTION"
C L "atoi" 10 47 1 "*"
C L "atoi" 10 47 1 "*"
F N "atoi" 10 51 ""
V L "s" 10 51 "*int8" `642 
f G "atoi" 10 51 "sint8(*int8 s)" `641  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 10 59 ""
V L "s" 10 59 "*int8" `644 
f G "atoi32" 10 59 "sint32(*int8 s)" `643  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 10 47 2 "FUNCTION"
F N "itoa" 10 80 ""
V L "num" 10 80 "sint32" `646 
V L "base" 10 80 "int8" `647 
V L "s" 10 80 "*int8" `648 
f G "itoa" 10 80 "*int8(sint32 num,int8 base,*int8 s)" `645  "Standard template: signed int16  atol(char * s)"
C L "itoa" 10 82 1 "*"
C L "itoa" 10 82 1 "*"
F N "atol" 10 86 ""
V L "s" 10 86 "*int8" `650 
f G "atol" 10 86 "sint16(*int8 s)" `649  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 10 88 1 "*"
C L "atol" 10 88 1 "*"
C L "atol" 10 88 1 "*"
C L "atol" 10 88 1 "*"
F N "strtol" 10 94 ""
V L "s" 10 94 "*int8" `652 
V L "endptr" 10 94 "*int8" `653 
V L "base" 10 94 "sint8" `654 
f G "strtol" 10 94 "sint16(*int8 s,*int8 endptr,sint8 base)" `651  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 10 96 1 "*"
C L "strtol" 10 96 1 "*"
C L "strtol" 10 96 1 "*"
C L "strtol" 10 96 1 "*"
F N "strtoul" 10 102 ""
V L "s" 10 102 "*int8" `656 
V L "endptr" 10 102 "*int8" `657 
V L "base" 10 102 "sint8" `658 
f G "strtoul" 10 102 "int16(*int8 s,*int8 endptr,sint8 base)" `655  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 10 96 2 "FUNCTION"
C L "strtoul" 10 104 1 "*"
C L "strtoul" 10 104 1 "*"
C L "strtoul" 10 104 1 "*"
F N "strtof" 10 111 ""
V L "s" 10 111 "*int8" `660 
V L "endptr" 10 111 "??0 *" `661 
f G "strtof" 10 111 "float(*int8 s,??0 * endptr)" `659  "provided for compatibility"
D G "strtof48" 10 117 "(s,e) strtof(s, e)"
D G "strtod" 10 118 "(s,e) strtof(s, e)"
C L "strtof" 10 104 1 "FUNCTION"
C L "strtof" 10 121 1 "*"
D G "atof" 10 125 "(s)   strtof(s, (char*)0)"
C L "strtof" 10 121 1 "FUNCTION"
C L "strtof" 10 144 1 "*"
C L "strtof" 10 144 1 "*"
C L "strtof" 10 144 1 "*"
F N "atoe" 10 150 ""
V L "s" 10 150 "*int8" `664 
f G "atoe" 10 150 "float(*int8 s)" `663  "Pseudo-random sequence generation functions"
C L "atoe" 10 144 1 "FUNCTION"
C L "atoe" 10 161 1 "*"
C L "atoe" 10 161 1 "*"
C L "atoe" 10 161 1 "*"
C L "atoe" 10 161 1 "*"
C L "atoe" 10 161 1 "*"
F N "rand" 10 170 ""
f G "rand" 10 170 "int16()" `665  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 10 172 1 "*"
C L "rand" 10 172 1 "*"
C L "rand" 10 172 1 "*"
C L "rand" 10 172 1 "*"
C L "rand" 10 172 1 "*"
C L "rand" 10 172 1 "*"
C L "rand" 10 172 1 "*"
C L "rand" 10 172 1 "*"
C L "rand" 10 172 1 "*"
C L "rand" 10 172 1 "*"
C L "rand" 10 172 1 "*"
C L "rand" 10 172 1 "*"
C L "rand" 10 172 1 "*"
C L "rand" 10 172 1 "*"
C L "rand" 10 172 1 "*"
F N "srand" 10 192 ""
V L "seed" 10 192 "int32" `667 
f G "srand" 10 192 "void(int32 seed)" `666  "Memory management functions"
C L "srand" 10 172 3 "FUNCTION"
F N "system" 10 206 ""
V L "string" 10 206 "*int8" `669 
f G "system" 10 206 "sint8(*int8 string)" `668  "Searching and sorting utilities"
C L "system" 10 172 1 "FUNCTION"
C L "system" 10 212 1 "*"
C L "system" 10 212 1 "*"
C L "system" 10 212 1 "*"
C L "system" 10 212 1 "*"
C L "system" 10 212 1 "*"
C L "system" 10 212 1 "*"
C L "system" 10 212 1 "*"
C L "system" 10 212 1 "*"
C L "system" 10 212 1 "*"
C L "system" 10 212 1 "*"
C L "system" 10 212 4 "*"
C L "system" 10 230 1 "*"
C L "system" 10 230 1 "*"
C L "system" 10 230 1 "*"
C L "system" 10 230 1 "*"
C L "system" 10 230 1 "*"
C L "system" 10 230 1 "*"
C L "system" 10 230 1 "*"
C L "system" 10 230 1 "*"
D G "labs" 10 250 "abs"
F N "div" 10 252 ""
V L "numer" 10 252 "sint8" `671 
V L "denom" 10 252 "sint8" `672 
f G "div" 10 252 "div_t(sint8 numer,sint8 denom)" `670 
F N "ldiv" 10 253 ""
V L "numer" 10 253 "sint16" `674 
V L "denom" 10 253 "sint16" `675 
f G "ldiv" 10 253 "ldiv_t(sint16 numer,sint16 denom)" `673  "Multibyte character functions"
C L "ldiv" 10 230 4 "FUNCTION"
C L "ldiv" 11 2 7 "FUNCTION"
D G "_STRING" 12 12 ""
C L "ldiv" 11 2 7 "FUNCTION"
D G "_CTYPE" 13 12 ""
D G "islower" 13 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 13 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 13 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 13 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 13 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 13 19 "(x)  ((x)==' ')"
D G "isxdigit" 13 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 13 21 "(x)  ((x)<' ')"
D G "isprint" 13 22 "(x)  ((x)>=' ')"
D G "isgraph" 13 23 "(x)  ((x)>' ')"
D G "ispunct" 13 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 12 19 10 "FUNCTION"
F N "memmove" 12 34 ""
V L "s1" 12 34 "*void" `677 
V L "s2" 12 34 "*void" `678 
V L "n" 12 34 "int8" `679 
F G "memmove" 12 35 "*int8(*void s1,*void s2,int8 n)" `676 
V L "sc1" 12 36 "*int8" `680 
V L "sc2" 12 37 "*int8" `681 
D G "strcopy" 12 54 "strcpy"
F N "strncpy" 12 61 ""
V L "s1" 12 61 "*int8" `683 
V L "s2" 12 61 "*int8" `684 
V L "n" 12 61 "int8" `685 
F G "strncpy" 12 62 "*int8(*int8 s1,*int8 s2,int8 n)" `682 
V L "s" 12 63 "*int8" `686 
F N "strcat" 12 78 ""
V L "s1" 12 78 "*int8" `688 
V L "s2" 12 78 "*int8" `689 
F G "strcat" 12 79 "*int8(*int8 s1,*int8 s2)" `687 
V L "s" 12 80 "*int8" `690 
F N "strncat" 12 96 ""
V L "s1" 12 96 "*int8" `692 
V L "s2" 12 96 "*int8" `693 
V L "n" 12 96 "int8" `694 
F G "strncat" 12 97 "*int8(*int8 s1,*int8 s2,int8 n)" `691 
V L "s" 12 98 "*int8" `695 
C L "memcmp" 12 19 3 "FUNCTION"
F N "memcmp" 12 120 ""
V L "s1" 12 120 "*void" `697 
V L "s2" 12 120 "*void" `698 
V L "n" 12 120 "int8" `699 
F G "memcmp" 12 121 "sint8(*void s1,*void s2,int8 n)" `696 
V L "su1" 12 122 "*int8" `700 
V L "su2" 12 122 "*int8" `701 
C L "strcmp" 12 19 2 "FUNCTION"
F N "strcmp" 12 134 ""
V L "s1" 12 134 "*int8" `703 
V L "s2" 12 134 "*int8" `704 
F G "strcmp" 12 135 "sint8(*int8 s1,*int8 s2)" `702 
C L "strcoll" 12 19 2 "FUNCTION"
F N "strcoll" 12 144 ""
V L "s1" 12 144 "*int8" `706 
V L "s2" 12 144 "*int8" `707 
F G "strcoll" 12 145 "sint8(*int8 s1,*int8 s2)" `705 
C L "strncmp" 12 19 4 "FUNCTION"
F N "strncmp" 12 157 ""
V L "s1" 12 157 "*int8" `709 
V L "s2" 12 157 "*int8" `710 
V L "n" 12 157 "int8" `711 
F G "strncmp" 12 158 "sint8(*int8 s1,*int8 s2,int8 n)" `708 
C L "strxfrm" 12 19 4 "FUNCTION"
F N "strxfrm" 12 170 ""
V L "s1" 12 170 "*int8" `713 
V L "s2" 12 170 "*int8" `714 
V L "n" 12 170 "int8" `715 
F G "strxfrm" 12 171 "int8(*int8 s1,*int8 s2,int8 n)" `712 
V L "c" 12 172 "int8" `716 
V L "n1" 12 173 "int8" `717 
C L "strxfrm" 12 19 1 "FUNCTION"
F N "memchr" 12 201 ""
V L "s" 12 201 "*void" `719 
V L "c" 12 201 "int8" `720 
V L "n" 12 201 "int8" `721 
F G "memchr" 12 202 "*int8(*void s,int8 c,int8 n)" `718 
V L "uc" 12 203 "int8" `722 
V L "su" 12 204 "*int8" `723 
F N "strchr" 12 215 ""
V L "s" 12 215 "*int8" `725 
V L "c" 12 215 "int8" `726 
F G "strchr" 12 216 "*int8(*int8 s,int8 c)" `724 
C L "strcspn" 12 19 4 "FUNCTION"
F N "strcspn" 12 227 ""
V L "s1" 12 227 "*int8" `728 
V L "s2" 12 227 "*int8" `729 
F G "strcspn" 12 228 "int8(*int8 s1,*int8 s2)" `727 
V L "sc1" 12 229 "*int8" `730 
V L "sc2" 12 229 "*int8" `731 
F N "strpbrk" 12 242 ""
V L "s1" 12 242 "*int8" `733 
V L "s2" 12 242 "*int8" `734 
F G "strpbrk" 12 243 "*int8(*int8 s1,*int8 s2)" `732 
V L "sc1" 12 244 "*int8" `735 
V L "sc2" 12 244 "*int8" `736 
F N "strrchr" 12 257 ""
V L "s" 12 257 "*int8" `738 
V L "c" 12 257 "int8" `739 
F G "strrchr" 12 258 "*int8(*int8 s,int8 c)" `737 
V L "p" 12 259 "*int8" `740 
C L "strspn" 12 19 2 "FUNCTION"
F N "strspn" 12 272 ""
V L "s1" 12 272 "*int8" `742 
V L "s2" 12 272 "*int8" `743 
F G "strspn" 12 273 "int8(*int8 s1,*int8 s2)" `741 
V L "sc1" 12 274 "*int8" `744 
V L "sc2" 12 274 "*int8" `745 
F N "strstr" 12 291 ""
V L "s1" 12 291 "*int8" `747 
V L "s2" 12 291 "*int8" `748 
F G "strstr" 12 292 "*int8(*int8 s1,*int8 s2)" `746 
V L "s" 12 293 "*int8" `749 
V L "t" 12 293 "*int8" `750 
C L "strlen" 12 19 2 "FUNCTION"
F N "strlen" 12 318 ""
V L "s" 12 318 "*int8" `752 
F G "strlen" 12 319 "int8(*int8 s)" `751 
V L "sc" 12 320 "*int8" `753 
F N "strtok" 12 341 ""
V L "s1" 12 341 "*int8" `755 
V L "s2" 12 341 "*int8" `756 
F G "strtok" 12 342 "*int8(*int8 s1,*int8 s2)" `754 
V L "beg" 12 343 "*int8" `757 
V L "end" 12 343 "*int8" `758 
V L "save" 12 344 "*int8" `759 
C L "stricmp" 12 19 6 "FUNCTION"
F N "stricmp" 12 392 ""
V L "s1" 12 392 "*int8" `761 
V L "s2" 12 392 "*int8" `762 
F G "stricmp" 12 393 "sint8(*int8 s1,*int8 s2)" `760 
F N "strlwr" 12 406 ""
V L "s" 12 406 "*int8" `766 
F G "strlwr" 12 407 "*int8(*int8 s)" `765 
V L "p" 12 408 "*int8" `767 
F N "strupr" 12 420 ""
V L "s" 12 420 "*int8" `769 
F G "strupr" 12 421 "*int8(*int8 s)" `768 
V L "p" 12 422 "*int8" `770 
F N "div" 10 275 ""
V L "numer" 10 275 "sint8" `671 
V L "denom" 10 275 "sint8" `773 
F G "div" 10 276 "div_t(sint8 numer,sint8 denom)" `670 
V L "val" 10 277 "div_t" `771 
F N "ldiv" 10 283 ""
V L "numer" 10 283 "sint16" `674 
V L "denom" 10 283 "sint16" `780 
F G "ldiv" 10 284 "ldiv_t(sint16 numer,sint16 denom)" `673 
V L "val" 10 285 "ldiv_t" `778 
F N "atoe" 10 362 ""
V L "s" 10 362 "*int8" `786 
F G "atoe" 10 363 "float(*int8 s)" `663 
V L "pow10" 10 364 "float" `785 
V L "result" 10 365 "float" `786 
V L "sign" 10 366 "int8" `787 
V L "expsign" 10 367 "int8" `788 
V L "c" 10 368 "int8" `789 
V L "ptr" 10 369 "int8" `790 
V L "i" 10 370 "int8" `791 
V L "exp" 10 371 "float" `792 
V L "expcnt" 10 372 "int8" `793 
C L "atoe" 10 398 1 "FUNCTION"
F N "atoi" 10 430 ""
V L "s" 10 430 "*int8" `806 
F G "atoi" 10 431 "sint8(*int8 s)" `641 
V L "result" 10 432 "sint8" `805 
V L "sign" 10 433 "int8" `806 
V L "base" 10 433 "int8" `807 
V L "index" 10 433 "int8" `808 
V L "c" 10 434 "int8" `809 
C L "atoi" 10 398 1 "FUNCTION"
C L "atoi" 10 398 1 "FUNCTION"
C L "atoi" 10 398 1 "FUNCTION"
C L "atoi" 10 398 1 "FUNCTION"
C L "atoi" 10 398 1 "FUNCTION"
C L "atoi" 10 398 1 "FUNCTION"
F N "atol" 10 499 ""
V L "s" 10 499 "*int8" `811 
F G "atol" 10 500 "sint16(*int8 s)" `649 
V L "result" 10 501 "sint16" `810 
V L "sign" 10 502 "int8" `811 
V L "base" 10 502 "int8" `812 
V L "index" 10 502 "int8" `813 
V L "c" 10 503 "int8" `814 
C L "atol" 10 398 1 "FUNCTION"
C L "atol" 10 398 1 "FUNCTION"
C L "atol" 10 398 1 "FUNCTION"
C L "atol" 10 398 1 "FUNCTION"
C L "mult_with10" 10 398 1 "FUNCTION"
F N "mult_with10" 10 566 ""
V L "num" 10 566 "int32" `816 
F G "mult_with10" 10 567 "sint32(int32 num)" `815 
F N "atoi32" 10 572 ""
V L "s" 10 572 "*int8" `818 
F G "atoi32" 10 573 "sint32(*int8 s)" `643 
V L "result" 10 574 "sint32" `817 
V L "sign" 10 575 "int8" `818 
V L "base" 10 575 "int8" `819 
V L "index" 10 575 "int8" `820 
V L "c" 10 576 "int8" `821 
C L "atoi32" 10 398 1 "FUNCTION"
C L "atoi32" 10 398 1 "FUNCTION"
C L "atoi32" 10 398 1 "FUNCTION"
C L "atoi32" 10 398 1 "FUNCTION"
C L "atoi32" 10 398 1 "FUNCTION"
F N "itoa" 10 771 ""
V L "num" 10 771 "sint32" `646 
V L "base" 10 771 "int8" `647 
V L "s" 10 771 "*int8" `825 
F G "itoa" 10 772 "*int8(sint32 num,int8 base,*int8 s)" `645 
V L "temp" 10 773 "int32" `822 
V L "i" 10 774 "int8" `823 
V L "sign" 10 774 "int8" `824 
V L "cnt" 10 774 "int8" `825 
V L "c" 10 775 "int8" `826 
C L "itoa" 10 398 1 "FUNCTION"
C L "itoa" 10 398 1 "FUNCTION"
C L "itoa" 10 398 1 "FUNCTION"
C L "itoa" 10 398 1 "FUNCTION"
C L "itoa" 10 398 1 "FUNCTION"
F N "strtof" 10 886 ""
V L "s" 10 886 "*int8" `660 
V L "endptr" 10 886 "??0 *" `835 
F G "strtof" 10 887 "float(*int8 s,??0 * endptr)" `659 
V L "pow10" 10 888 "float" `833 
V L "result" 10 889 "float" `834 
V L "skip" 10 890 "int1" `835 
V L "sign" 10 890 "int1" `836 
V L "point" 10 890 "int1" `837 
V L "c" 10 891 "int8" `838 
V L "ptr" 10 892 "int8" `839 
F N "strtoul" 10 1104 ""
V L "s" 10 1104 "*int8" `656 
V L "endptr" 10 1104 "*int8" `657 
V L "base" 10 1104 "sint8" `844 
F G "strtoul" 10 1105 "int16(*int8 s,*int8 endptr,sint8 base)" `655 
V L "sc" 10 1106 "*int8" `841 
V L "s1" 10 1106 "*int8" `842 
V L "sd" 10 1106 "*int8" `843 
V L "x" 10 1107 "int16" `844 
V L "sign" 10 1108 "int8" `845 
V L "digits" 10 1109 "int8[1]" `846 
C L "strtoul" 10 398 1 "FUNCTION"
C L "strtoul" 10 398 1 "FUNCTION"
C L "strtoul" 10 398 1 "FUNCTION"
F N "strtol" 10 1166 ""
V L "s" 10 1166 "*int8" `652 
V L "endptr" 10 1166 "*int8" `653 
V L "base" 10 1166 "sint8" `851 
F G "strtol" 10 1167 "sint16(*int8 s,*int8 endptr,sint8 base)" `651 
V L "sc" 10 1168 "*int8" `848 
V L "s1" 10 1168 "*int8" `849 
V L "sd" 10 1168 "*int8" `850 
V L "x" 10 1169 "sint16" `851 
V L "sign" 10 1170 "int8" `852 
V L "digits" 10 1171 "int8[1]" `853 
C L "strtol" 10 398 1 "FUNCTION"
C L "strtol" 10 398 1 "FUNCTION"
C L "strtol" 10 398 1 "FUNCTION"
F N "system" 10 1229 ""
V L "string" 10 1229 "*int8" `856 
F G "system" 10 1230 "sint8(*int8 string)" `668 
F N "mblen" 10 1234 ""
V L "s" 10 1234 "*int8" `856 
V L "n" 10 1234 "int8" `857 
F G "mblen" 10 1235 "int8(*int8 s,int8 n)" `855 
F N "mbtowc" 10 1239 ""
V L "pwc" 10 1239 "*int8" `859 
V L "s" 10 1239 "*int8" `860 
V L "n" 10 1239 "int8" `861 
F G "mbtowc" 10 1240 "int8(*int8 pwc,*int8 s,int8 n)" `858 
F N "wctomb" 10 1245 ""
V L "s" 10 1245 "*int8" `863 
V L "wchar" 10 1245 "int8" `864 
F G "wctomb" 10 1246 "int8(*int8 s,int8 wchar)" `862 
F N "mbstowcs" 10 1251 ""
V L "pwcs" 10 1251 "*int8" `866 
V L "s" 10 1251 "*int8" `867 
V L "n" 10 1251 "int8" `868 
F G "mbstowcs" 10 1252 "int8(*int8 pwcs,*int8 s,int8 n)" `865 
F N "wcstombs" 10 1257 ""
V L "s" 10 1257 "*int8" `870 
V L "pwcs" 10 1257 "*int8" `871 
V L "n" 10 1257 "int8" `872 
F G "wcstombs" 10 1258 "int8(*int8 s,*int8 pwcs,int8 n)" `869 
V G "_Randseed" 10 1267 "int32" `873 
F N "rand" 10 1269 ""
F G "rand" 10 1270 "int16()" `665 
F N "srand" 10 1275 ""
V L "seed" 10 1275 "int32" `878 
F G "srand" 10 1276 "void(int32 seed)" `666 
F N "*_Cmpfun" 10 1285 ""
V L "p1" 10 1285 "*int8" `878 
V L "p2" 10 1285 "*int8" `879 
T G "*_Cmpfun" 10 1285 "sint8(*int8 p1,*int8 p2)" `877 
F N "qsort" 10 1292 ""
V L "qdata" 10 1292 "*int8" `882 
V L "qitems" 10 1292 "int8" `883 
V L "qsize" 10 1292 "int8" `884 
V L "cmp" 10 1292 "_Cmpfun" `885 
F G "qsort" 10 1292 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `881 
V L "m" 10 1293 "int8" `886 
V L "j" 10 1293 "int8" `887 
V L "i" 10 1293 "int8" `888 
V L "l" 10 1293 "int8" `889 
V L "done" 10 1294 "int1" `890 
V L "t" 10 1295 "int8[16]" `891 
F N "bsearch" 10 1320 ""
V L "key" 10 1320 "*int8" `894 
V L "base" 10 1320 "*int8" `895 
V L "num" 10 1320 "int8" `896 
V L "width" 10 1320 "int8" `897 
V L "cmp" 10 1320 "_Cmpfun" `898 
F G "bsearch" 10 1321 "*int8(*int8 key,*int8 base,int8 num,int8 width,_Cmpfun cmp)" `893 
V L "p" 10 1322 "*int8" `899 
V L "q" 10 1322 "*int8" `900 
V L "n" 10 1323 "int8" `901 
V L "pivot" 10 1324 "int8" `902 
V L "val" 10 1325 "sint8" `903 
C L "bsearch" 10 398 1 "FUNCTION"
D G "_BIT_MATH_" 15 2 ""
F N "n_value_bits_to_x" 15 3 ""
V L "??65535" 15 3 "int8" `905 
V L "??65535" 15 3 "int8" `906 
V L "??65535" 15 3 "int8" `907 
f G "n_value_bits_to_x" 15 3 "int8(int8 ,int8 ,int8 )" `904 
F N "nth_bit_to_x" 15 4 ""
V L "??65535" 15 4 "int8" `909 
V L "??65535" 15 4 "int8" `910 
V L "??65535" 15 4 "int8" `911 
f G "nth_bit_to_x" 15 4 "int8(int8 ,int8 ,int8 )" `908 
F N "set_bit" 15 5 ""
V L "??65535" 15 5 "int8" `913 
V L "??65535" 15 5 "int8" `914 
f G "set_bit" 15 5 "int8(int8 ,int8 )" `912 
F N "clear_bit" 15 6 ""
V L "??65535" 15 6 "int8" `916 
V L "??65535" 15 6 "int8" `917 
f G "clear_bit" 15 6 "int8(int8 ,int8 )" `915 
F N "toggle_bit" 15 7 ""
V L "??65535" 15 7 "int8" `919 
V L "??65535" 15 7 "int8" `920 
f G "toggle_bit" 15 7 "int8(int8 ,int8 )" `918 
F N "check_bit" 15 8 ""
V L "??65535" 15 8 "int8" `922 
V L "??65535" 15 8 "int8" `923 
f G "check_bit" 15 8 "int8(int8 ,int8 )" `921 
F N "MSB_to_LSM" 15 9 ""
V L "??65535" 15 9 "int8" `925 
f G "MSB_to_LSM" 15 9 "int8(int8 )" `924  "BIT MATHEMATIC"
C L "MSB_to_LSM" 14 4 21 "FUNCTION"
F N "nth_bit_to_x" 14 44 ""
V L "var_to_change" 14 44 "int8" `909 
V L "x" 14 44 "int8" `910 
V L "nth_bit" 14 44 "int8" `929 
F G "nth_bit_to_x" 14 45 "int8(int8 var_to_change,int8 x,int8 nth_bit)" `908  "zmienia na x konkretny bit*"
F N "n_value_bits_to_x" 14 53 ""
V L "var_to_change" 14 53 "int8" `905 
V L "x" 14 53 "int8" `906 
V L "n_value" 14 53 "int8" `929 
F G "n_value_bits_to_x" 14 54 "int8(int8 var_to_change,int8 x,int8 n_value)" `904  "zmienia na x bity dajπce wartoúÊ n_value eg. 65 zminei bity 0?00000?*"
C L "n_value_bits_to_x" 14 4 3 "FUNCTION"
F N "set_bit" 14 64 ""
V L "var_to_change" 14 64 "int8" `913 
V L "nth" 14 64 "int8" `928 
F G "set_bit" 14 65 "int8(int8 var_to_change,int8 nth)" `912 
F N "clear_bit" 14 71 ""
V L "var_to_change" 14 71 "int8" `916 
V L "nth" 14 71 "int8" `928 
F G "clear_bit" 14 72 "int8(int8 var_to_change,int8 nth)" `915 
F N "toggle_bit" 14 77 ""
V L "var_to_change" 14 77 "int8" `919 
V L "nth" 14 77 "int8" `928 
F G "toggle_bit" 14 78 "int8(int8 var_to_change,int8 nth)" `918 
F N "check_bit" 14 83 ""
V L "var_to_check" 14 83 "int8" `922 
V L "nth" 14 83 "int8" `928 
F G "check_bit" 14 84 "int8(int8 var_to_check,int8 nth)" `921 
V L "bit" 14 85 "int1" `926 
F N "MSB_to_LSM" 14 90 ""
V L "num" 14 90 "int8" `925  "function change bit order - i.e. required between PIC and 8051 mcu communication*"
F G "MSB_to_LSM" 14 92 "int8(int8 num)" `924 
V L "NO_OF_BITS" 14 93 "int8" `927 
V L "reverse_num" 14 94 "int8" `928 
V L "i" 14 94 "int8" `929 
V L "temp" 14 94 "int8" `930 
F N "random" 9 10 ""
V L "min" 9 10 "int8" `932 
V L "max" 9 10 "int8" `933 
F G "random" 9 11 "int8(int8 min,int8 max)" `931 
V L "tmp" 9 12 "int8" `934 
F N "round_closest" 9 24 ""
V L "dividend" 9 24 "float" `936 
V L "divisor" 9 24 "float" `937 
F G "round_closest" 9 25 "int32(float dividend,float divisor)" `935 
F N "MAIN" 0 39 ""
F G "MAIN" 0 40 "void()" `940 
D G "stepper_motor_delay_time_beetwen_steps_init_speed" 0 41 "1"
V L "stepper_motor_delay_time_beetwen_steps" 0 42 "int8" `941 
C L "MAIN" 0 42 1 "FUNCTION"
V L "correct_calibration_counter" 0 43 "int8" `942 
C L "MAIN" 0 42 1 "FUNCTION"
V L "recalculate_percentage_to_steps_STATEMENT" 0 45 "int1" `943 
V L "stepper_motor_need_to_drive_STATEMENT" 0 46 "int1" `944 
V L "stepper_motor_percents_goto" 0 47 "float" `945 
C L "MAIN" 0 42 1 "FUNCTION"
V L "stepper_motor_steps_goto" 0 48 "int32" `946 
C L "MAIN" 0 42 1 "FUNCTION"
V L "stepper_motor_position" 0 50 "int32" `947  "zmienna przechowuje informacje na temat aktualnego ustawienia wskazowki w [ krokach od lewej], wartoúÊ 0 jest nadawana gdy wskazowka osiagnie podczas kalibracji lewy zderzak"
V L "stepper_motor_position_max" 0 51 "int32" `948  "po kalibracji zmienna przechowuje informacje na temat maksymalnej ilosci krokow na wskazowce w krokach od lewej], wartosc nadawana jest gdy wskazowka osiπgnie prawy zderzak podczas kalibracji"
V L "steper_motor_calibration_state" 0 52 "int8" `949 
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
V L "i" 0 66 "int8" `954 
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 3 "FUNCTION"
C L "MAIN" 0 42 2 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 2 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 2 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
D G "max_calibration_try" 0 150 "10"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 3 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_eeprom" 1 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "get_ticks" 0 1
F B "set_ticks" 1 2
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
